<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 
   
<mapper namespace="pe.marista.sigma.dao.EvaluacionDesempenoDAO">    
    
    <select id="sp_ed_lista_preguntas" resultType="pe.marista.sigma.bean.PreguntasBean" parameterType="Map"
            statementType="CALLABLE">
        { call SP_ED_LISTA_PREGUNTAS (
        #{idcompetencia, mode=IN, jdbcType=INTEGER},
        #{iduniorg, mode=IN, jdbcType=VARCHAR},
        #{anio, mode=IN, jdbcType=INTEGER}
        )}      
    </select>     
    <select id="sp_ed_lista_evaluaciones" resultType="pe.marista.sigma.bean.EvaluacionBean" parameterType="Map"
            statementType="CALLABLE">
        { call SP_ED_LISTA_EVALUACIONES (
        #{codigoEvaluador, mode=IN, jdbcType=VARCHAR},        
        #{idcargoEvaluador , mode=IN, jdbcType=INTEGER}, 
        #{uniNeg, mode=IN, jdbcType=VARCHAR},
        #{anio , mode=IN, jdbcType=INTEGER}
        )}      
    </select>          
    <select id="sp_datos_evaluado" resultType="pe.marista.sigma.bean.EvaluadoBean" parameterType="Map"
            statementType="CALLABLE">
        { call SP_DATOS_EVALUADO (     
        #{idEvaluadoEvaluador , mode=IN, jdbcType=INTEGER},
        #{idgrupo, mode=IN, jdbcType=INTEGER}, 
        #{uniNeg, mode=IN, jdbcType=VARCHAR},
        #{anio , mode=IN, jdbcType=INTEGER}
        )}      
    </select>
    <select id="sp_ed_idgrupoocupacional" resultType="pe.marista.sigma.bean.EvaluadoBean" parameterType="Map"
            statementType="CALLABLE">
        { call sp_ed_idgrupoocupacional (     
        #{idevaluadoevaluador, mode=IN, jdbcType=INTEGER}, 
        #{uniNeg, mode=IN, jdbcType=VARCHAR},
        #{anio , mode=IN, jdbcType=INTEGER}
        )}      
    </select>
	           
    
    <select id="sp_ed_lista_estados" resultType="pe.marista.sigma.bean.EstadoBean" parameterType="Map"
            statementType="CALLABLE">
        { call SP_ED_LISTA_ESTADOS (
        #{codigoEvaluador, mode=IN, jdbcType=VARCHAR},        
        #{idcargoEvaluador , mode=IN, jdbcType=INTEGER}, 
        #{uniNeg, mode=IN, jdbcType=VARCHAR},
        #{anio , mode=IN, jdbcType=INTEGER}
        )}     
    </select>   
    <select id="sp_datos_personal" resultType="pe.marista.sigma.bean.DatosPersonalBean" parameterType="Map"
            statementType="CALLABLE">
        { call SP_DATOS_PERSONAL (
        #{codPer, mode=IN, jdbcType=VARCHAR},
        #{idcargo, mode=IN, jdbcType=INTEGER}, 
        #{uniNeg, mode=IN, jdbcType=VARCHAR},
        #{anio , mode=IN, jdbcType=INTEGER}
        )}      
    </select>       
    <select id="sp_ed_existe_encuesta" resultType="pe.marista.sigma.bean.ProgresoBean" parameterType="Map"
            statementType="CALLABLE">
        { call SP_ED_EXISTE_ENCUESTA (
        #{idevaluadoevaluador , mode=IN, jdbcType=INTEGER},
        #{uniNeg, mode=IN, jdbcType=VARCHAR},
        #{anio , mode=IN, jdbcType=INTEGER}
        )}      
    </select>     
    <select id="sp_ed_update_progreso" resultType="pe.marista.sigma.bean.ProgresoBean" parameterType="Map"
            statementType="CALLABLE">
        { call SP_ED_UPDATE_PROGRESO (
        #{idevaluadoevaluador , mode=IN, jdbcType=INTEGER},
        #{progreso , mode=IN, jdbcType=FLOAT},
        #{uniNeg, mode=IN, jdbcType=VARCHAR},
        #{anio , mode=IN, jdbcType=INTEGER}
        )}      
    </select>      
    <select id="sp_ed_cargos_evaluador" resultType="pe.marista.sigma.bean.CargosEvaluadorBean" parameterType="Map"
            statementType="CALLABLE">
        { call SP_ED_CARGOS_EVALUADOR (
        #{codigoEvaluador , mode=IN, jdbcType=VARCHAR},
        #{uniNeg, mode=IN, jdbcType=VARCHAR},
        #{anio , mode=IN, jdbcType=INTEGER}
        )}      
    </select>           
    <select id="sp_ed_cant_preg_grupoocupacional" resultType="pe.marista.sigma.bean.PreguntaxCompetenciaBean" parameterType="Map"
            statementType="CALLABLE">
        { call SP_ED_CANT_PREG_GRUPOOCUPACIONAL (
        #{idtipogrupoOcupacional , mode=IN, jdbcType=INTEGER},
        #{flgcargoocuprincipal , mode=IN, jdbcType=INTEGER},
        #{anio , mode=IN, jdbcType=INTEGER}
        )}      
    </select>    
    <select id="sp_ed_lista_encuestas_editar" resultType="pe.marista.sigma.bean.HabilitaEncuestaBean" parameterType="Map"
            statementType="CALLABLE">
        { call SP_ED_LISTA_ENCUESTAS_EDITAR (
        #{unineg , mode=IN, jdbcType=VARCHAR},
        #{anio , mode=IN, jdbcType=INTEGER}
        )}      
    </select>   
    
    <delete id="ed_updateEncuesta">
        delete from ED_Encuesta where idevaluadoevaluador= #{idevaluadoevaluador}
    </delete>     
        
    <select id="sp_ed_cargar_estados" resultType="pe.marista.sigma.bean.CantidadBean" parameterType="Map"
            statementType="CALLABLE">
        { call SP_ED_CARGAR_ESTADOS (
        #{unineg , mode=IN, jdbcType=VARCHAR},
        #{anio , mode=IN, jdbcType=INTEGER}
        )}      
    </select>   

    
    <select id="sp_datos_personal_default" resultType="pe.marista.sigma.bean.DatosPersonalBean" parameterType="Map"
            statementType="CALLABLE">
        { call SP_DATOS_PERSONAL_DEFAULT (
        #{codPer, mode=IN, jdbcType=VARCHAR},
        #{uniNeg , mode=IN, jdbcType=VARCHAR},
        #{anio , mode=IN, jdbcType=INTEGER}
        )}      
    </select>    
       
    
    <select id="sp_ed_evaluaciones_completas" resultType="pe.marista.sigma.bean.EvaluacionBean" parameterType="Map"
            statementType="CALLABLE">
        { call SP_ED_EVALUACIONES_COMPLETAS (
        #{codigoEvaluador, mode=IN, jdbcType=VARCHAR},
        #{uniNeg , mode=IN, jdbcType=VARCHAR},
        #{anio , mode=IN, jdbcType=INTEGER}
        )}      
    </select>  
         
    <select id="sp_ed_evaluaciones_completas_default" resultType="pe.marista.sigma.bean.EvaluacionBean" parameterType="Map"
            statementType="CALLABLE">
        { call SP_ED_EVALUACIONES_COMPLETAS_DEFAULT (
        #{codigoEvaluador, mode=IN, jdbcType=VARCHAR},
        #{uniNeg , mode=IN, jdbcType=VARCHAR},
        #{anio , mode=IN, jdbcType=INTEGER}
        )}      
    </select>     
    <select id="sp_ed_lista_evaluaciones_default" resultType="pe.marista.sigma.bean.EvaluacionBean" parameterType="Map"
            statementType="CALLABLE">
        { call SP_ED_LISTA_EVALUACIONES_DEFAULT (
        #{codigoEvaluador, mode=IN, jdbcType=VARCHAR},        
        #{idcargoEvaluador , mode=IN, jdbcType=INTEGER},
        #{uniNeg , mode=IN, jdbcType=VARCHAR},
        #{anio , mode=IN, jdbcType=INTEGER}
        )}      
    </select>                                             
    
    <insert id="insertEncuesta">
        insert into ED_Encuesta (idpregunta,respuesta,prom_respuesta,idcompetencia,idestado,progreso,flag,unineg,fecha,idevaluadoevaluador,anio,creaPor)
        values (#{idpregunta},#{respuesta},#{prom_respuesta},#{idcompetencia},#{idestado},#{progreso},#{flag},#{unineg},#{fecha},#{idevaluadoevaluador},
        #{anio},#{creaPor})
    </insert>    
   
    
    <!-- MEY -->
    <sql id="consulta">
        select
        ed.idEvaluadoEvaluador , 
        ed.status,
        ed.anio,
        ed.creapor,
        ed.creafecha,
        ed.modipor,
        pevaluado.codper as codigoEvaluado,
        pevaluador.codper as codigoEvaluador,
        cevaluado.nombre as cargoNombreEvaluado,
        cevaluador.nombre as cargoNombreEvaluador,
        cevaluado.idcargo as idCargoEvaluado,
        cevaluador.idcargo as idCargoEvaluador,
        <!--org1.iduniorg as idUniOrgEvaluado,
        org2.iduniorg as idUniOrgEvaluador,
        org1.nombreuniorg as nombreOrgEvaluado,
        org2.nombreuniorg as nombreOrgEvaluador,-->
        uni.unineg as uniNeg
        from ED_EvaluadoEvaluador ed
        inner join MO_UnidadNegocio uni on uni.unineg=ed.unineg 
        inner join ED_Personal pevaluado on pevaluado.codper=ed.codigoEvaluado and pevaluado.unineg=uni.unineg
        inner join ED_Personal pevaluador on pevaluador.codper=ed.codigoEvaluador and pevaluador.unineg=uni.unineg
        inner join MO_Cargo cevaluado on cevaluado.idcargo=ed.idCargoEvaluado
        inner join MO_Cargo cevaluador on cevaluador.idcargo=ed.idCargoEvaluador
    </sql>
    <sql id="consultaPersonalED">
        select 
        uni.unineg as uniNeg,
        pered.idcodigo as idCodigo,
        pered.codper as codigoPer,
        pered.nombre ,
        pered.apepat as apepat,
        pered.apemat as apemat,
        concat(pered.apepat,' '+pered.apemat,' '+pered.nombre) as nombreCompleto,
        pered.status,
        c1.nombre as nombre1,
        c1.idcargo as idCargo1,
        u.codigo as tipoGrupoOcupacional,
        u.idcodigo as idTipoGrupoOcupacional
        <!--,u.iduniorg as idUniOrgCargo,
        u.nombreUniOrg as nombreUniOrgCargo
         c2.nombre as nombre2,
        c2.idcargo as idCargo2,
        c3.nombre as nombre3,
        c3.idcargo as idCargo3,
        c4.nombre as nombre4,
        c4.idcargo as idCargo4-->
        from ED_Personal pered
        inner join MO_UnidadNegocio uni on uni.unineg=pered.unineg
        left join MO_Cargo c1 on c1.idcargo=pered.idCargo
        left join MO_Codigo u on u.idcodigo=c1.idtipogrupoocupacional
        <!-- left join MO_Cargo c2 on c2.idcargo=pered.idCargo2
        left join MO_Cargo c3 on c3.idcargo=pered.idCargo3
        left join MO_Cargo c4 on c4.idcargo=pered.idCargo4-->
    </sql>
    <sql id="consultaPersonalDetED">
        select  distinct
        uni.unineg as uniNeg,
        pevaluado.idcodigo as idCodigo,
        pevaluado.codper as codigoPer,
        pevaluado.nombre ,
        pevaluado.apepat as apepat,
        pevaluado.apemat as apemat,
        concat(pevaluado.apepat,' '+pevaluado.apemat,' '+pevaluado.nombre) as nombreCompleto,
        pevaluado.status,
        cevaluado.nombre as nombre1,
        cevaluado.idcargo as idCargo1,
        uevaluado.codigo as tipoGrupoOcupacional,
        uevaluado.idcodigo as idTipoGrupoOcupacional 
        <!--,org1.iduniorg as idUniOrgCargo,
        org1.nombreUniOrg as nombreUniOrgCargo-->
        from ED_EvaluadoEvaluador ed
        inner join MO_UnidadNegocio uni on uni.unineg=ed.unineg
        inner join ED_Personal pevaluado on pevaluado.codper=ed.codigoEvaluado and pevaluado.unineg=uni.unineg
        inner join ED_Personal pevaluador on pevaluador.codper=ed.codigoEvaluador and pevaluador.unineg=uni.unineg 
        inner join MO_Cargo cevaluado on cevaluado.idcargo=ed.idCargoEvaluado and cevaluado.idcargo=pevaluado.idcargo
        inner join MO_Cargo cevaluador on cevaluador.idcargo=ed.idCargoEvaluador
        left join MO_Codigo uevaluador on uevaluador.idcodigo=cevaluado.idtipogrupoocupacional
        left join MO_Codigo uevaluado on uevaluado.idcodigo=cevaluador.idtipogrupoocupacional
        <!--left join MO_UnidadOrganica u on u.iduniorg=ed.idUniOrgEvaluador      -->  
    </sql>
    
    <resultMap id="personalEDResultado" type="pe.marista.sigma.bean.PersonalEDBean"> 
        <id property="idCodigo" column="idCodigo"/>
        <result property="codigoPer" column="codigoPer"/>
        <result property="nombre" column="nombre"/>
        <result property="apepat" column="apepat"/>
        <result property="apemat" column="apemat"/>
        <result property="nombreCompleto" column="nombreCompleto"/>
        <result property="status" column="status"/> 
        <association property="unidadNegocioBean" column="uniNeg"
                     javaType="pe.marista.sigma.bean.UnidadNegocioBean"
                     resultMap="unidadNegocioResultado"/>
        <association property="cargo1Bean" column="idCargo"
                     javaType="pe.marista.sigma.bean.CargoBean"
                     resultMap="cargo1Resultado"/>
        <!--  <association property="cargo2Bean" column="idCargo2"
        javaType="pe.marista.sigma.bean.CargoBean"
        resultMap="cargo2Resultado"/>
<association property="cargo3Bean" column="idCargo3"
        javaType="pe.marista.sigma.bean.CargoBean"
        resultMap="cargo3Resultado"/>
<association property="cargo4Bean" column="idCargo4"
        javaType="pe.marista.sigma.bean.CargoBean"
        resultMap="cargo4Resultado"/>-->
    </resultMap>
    <resultMap id="unidadNegocioResultado" type="pe.marista.sigma.bean.UnidadNegocioBean">
        <id property="uniNeg" column="uniNeg"/>
        <result property="nombreUniNeg" column="nombreUniNeg"/>
    </resultMap>
    <resultMap id="codigoOcupacionalResultado" type="pe.marista.sigma.bean.CodigoBean">
        <id property="idCodigo" column="idTipoGrupoOcupacional"/>
        <result property="codigo" column="tipoGrupoOcupacional"/>
    </resultMap>
    <resultMap id="cargo1Resultado" type="pe.marista.sigma.bean.CargoBean">
        <id property="idCargo" column="idCargo1"/>
        <result property="nombre" column="nombre1"/>
        <association property="tipoGrupoOcupacionalBean" column="idTipoGrupoOcupacional"
                     javaType="pe.marista.sigma.bean.CodigoBean"
                     resultMap="codigoOcupacionalResultado"/>
    </resultMap>
    <!-- <resultMap id="cargo2Resultado" type="pe.marista.sigma.bean.CargoBean">
        <id property="idCargo" column="idCargo2"/>
        <result property="nombre" column="nombre2"/>
    </resultMap>
    <resultMap id="cargo3Resultado" type="pe.marista.sigma.bean.CargoBean">
        <id property="idCargo" column="idCargo3"/>
        <result property="nombre" column="nombre3"/>
    </resultMap>
    <resultMap id="cargo4Resultado" type="pe.marista.sigma.bean.CargoBean">
        <id property="idCargo" column="idCargo4"/>
        <result property="nombre" column="nombre4"/>
    </resultMap>-->
    <resultMap id="evaluacionDesempenoResultado" type="pe.marista.sigma.bean.EvaluacionDesempenoBean">
        <id property="unidadNegocioBean.uniNeg" column="uniNeg"/>
        <id property="idEvaluadoEvaluador" column="idEvaluadoEvaluador"/> 
        <result property="anio" column="anio"/>
        <result property="status" column="status"/>
        <result property="creaPor" column="creaPor"/>
        <result property="creaFecha" column="creaFecha"/>
        <result property="modiPor" column="modiPor"/>
        <result property="estadoVista" column="estadoVista"/>
        <association property="codigoEvaluado" column="codigoEvaluado"
                     javaType="pe.marista.sigma.bean.PersonalEDBean"
                     resultMap="personalEDResultado"/>
        <association property="codigoEvaluador" column="codigoEvaluador"
                     javaType="pe.marista.sigma.bean.PersonalEDBean"
                     resultMap="personalEDResultado"/> 
        <association property="unidadNegocioBean" column="uniNeg"
                     javaType="pe.marista.sigma.bean.UnidadNegocioBean"
                     resultMap="unidadNegocioResultado"/>
        <association property="cargoEvaluadoBean" column="idCargoEvaluado"
                     javaType="pe.marista.sigma.bean.CargoBean"
                     resultMap="cargoEvaluadoResultado"/>
        <association property="cargoEvaluadorBean" column="idCargoEvaluador"
                     javaType="pe.marista.sigma.bean.CargoBean"
                     resultMap="cargoEvaluadorResultado"/>
    </resultMap>  
    <resultMap id="cargoEvaluadoResultado" type="pe.marista.sigma.bean.CargoBean">
        <id property="idCargo" column="idCargoEvaluado"/>
        <result property="nombre" column="cargoNombreEvaluado"/>
    </resultMap>
    <resultMap id="cargoEvaluadorResultado" type="pe.marista.sigma.bean.CargoBean">
        <id property="idCargo" column="idCargoEvaluador"/>
        <result property="nombre" column="cargoNombreEvaluador"/>
    </resultMap>
    <select id="obtenerEvaluacionDesempenoActivos" resultMap="personalEDResultado" parameterType="map">
        <include refid="consultaPersonalED"/>
        Where pered.status = 1 
        and uni.uniNeg=#{uniNeg}
    </select>
    <select id="obtenerEvluacionDesempeno" resultMap="evaluacionDesempenoResultado" parameterType="pe.marista.sigma.bean.EvaluacionDesempenoBean">
        <include refid="consulta"/>
        Where uni.uniNeg=#{unidadNegocioBean.uniNeg}
    </select>
    <select id="obtenerEvaluador" resultMap="personalEDResultado" parameterType="map">
        <include refid="consultaPersonalED" /> 
        where pered.codper=#{codigoEvaluador.codigoPer} and c1.idcargo=#{cargoEvaluadorBean.idCargo}
    </select>
    <select  id="obtenerEvaluado" resultMap="personalEDResultado"  parameterType="map">
        <include  refid="consultaPersonalDetED" /> 
        where pevaluador.codper=#{codigoEvaluador.codigoPer} and cevaluador.idcargo=#{cargoEvaluadorBean.idCargo}
    </select>             
    <select id="obtenerListaEvluacionDesempeno" resultMap="evaluacionDesempenoResultado" parameterType="pe.marista.sigma.bean.EvaluacionDesempenoBean">
        SELECT distinct ed.codigoEvaluador as codigoPer,concat(p.apepat,' '+p.apemat,' '+p.nombre) as nombreCompleto,
        c.idcargo as idCargoEvaluador,c.nombre as cargoNombreEvaluador, ed.anio ,
        (case when ed.status=1 then 'ACTIVO' 
        when ed.status=0 then 'DESACTIVO' end) as estadoVista
        FROM ED_EvaluadoEvaluador ED
        inner join ED_Personal p on p.codper=ed.codigoEvaluador
        inner join MO_Cargo c on c.idcargo=ed.idCargoEvaluador
        Where ed.uniNeg=#{unidadNegocioBean.uniNeg}  
    </select>
    <select id="obtenerPersonalYaIngresadoDesempeno" resultType="String" parameterType="pe.marista.sigma.bean.EvaluacionDesempenoBean">
        select 'yes' as estadoVista from 
        ED_EvaluadoEvaluador
        where codigoEvaluado=#{codigoEvaluado.codigoPer} and codigoEvaluador=#{codigoEvaluador.codigoPer}
        and idCargoEvaluado=#{cargoEvaluadoBean.idCargo} and idCargoEvaluador=#{cargoEvaluadorBean.idCargo}
        and uniNeg=#{unidadNegocioBean.uniNeg}  
    </select>
    <select id="obtenerReporteEvaluadoresEvaluados" resultType="pe.marista.sigma.bean.reporte.EvaluacionDesempenoRepBean" parameterType="map">
        select distinct
        'G.O.' cabecera,'' as usuario,
        'EVALUACIÓN DE DESEMPEÑO '+CONVERT(VARCHAR(4),E.ANIO) AS titulo,
        (case when cdevaluador.idcodigo=30901 then 'D' 
        when cdevaluador.idcodigo=30902 then 'O' 
        when cdevaluador.idcodigo=30903 then 'F' 
        when cdevaluador.idcodigo=30904 then 'A'
        when cdevaluador.idcodigo=30905 then 'M' 
        when cdevaluador.idcodigo=30906 then 'C' end) as grupoOcupacionalUNivelEvaluador,
        concat(pevaluador.apepat,' '+pevaluador.apemat,', '+pevaluador.nombre) as nombreEvaluador,
        cevaluador.nombre as cargoEvaluador,
        (case when cdevaluado.idcodigo=30901 then 'D' 
        when cdevaluado.idcodigo=30902 then 'O' 
        when cdevaluado.idcodigo=30903 then 'F' 
        when cdevaluado.idcodigo=30904 then 'A'
        when cdevaluado.idcodigo=30905 then 'M' 
        when cdevaluado.idcodigo=30906 then 'C'end) as grupoOcupacionalUNivelEvaluado,
        concat(pevaluado.apepat,' '+pevaluado.apemat,', '+pevaluado.nombre) as nombreEvaluado,
        cevaluado.nombre as cargoEvaluado,
        isnull((select top 1
        (case when enc.progreso=100 then 'SI' else 'NO' end)
        from ED_Encuesta enc where en.idEvaluadoEvaluador=enc.idevaluadoevaluador
        and enc.unineg=#{uniNeg}  and enc.anio=#{anio}),'NO') as hecho, 
        ent.nombrecomercial as nombreUniNeg
        from ED_EvaluadoEvaluador e
        inner join ED_Personal pevaluador on pevaluador.codper=e.codigoEvaluador
        inner join ED_Personal pevaluado on pevaluado.codper=e.codigoEvaluado
        inner join MO_Cargo cevaluador on cevaluador.idcargo=e.idCargoEvaluador
        inner join MO_Cargo cevaluado on cevaluado.idcargo=e.idCargoEvaluado
        left join ED_Encuesta en on e.idEvaluadoEvaluador=EN.idEvaluadoEvaluador
        inner join MO_UnidadNegocio uni on uni.unineg=e.unineg
        inner join MO_Entidad ent on ent.ruc=uni.ruc 
        inner join MO_Codigo cdevaluador on cdevaluador.idcodigo=cevaluador.idtipogrupoocupacional 
        inner join MO_Codigo cdevaluado on cdevaluado.idcodigo=cevaluado.idtipogrupoocupacional   
        where uni.unineg=#{uniNeg}  and e.anio=#{anio}
        <if test="orden == 1" >
            order by concat(pevaluador.apepat,' '+pevaluador.apemat,', '+pevaluador.nombre) asc
        </if>
        <if test="orden == 2" >
            order by  grupoOcupacionalUNivelEvaluador asc, concat(pevaluador.apepat,' '+pevaluador.apemat,', '+pevaluador.nombre) asc
        </if>
        <if test="orden == 3" >
            order by  concat(pevaluado.apepat,' '+pevaluado.apemat,', '+pevaluado.nombre) asc
        </if>
        <if test="orden == 4" >
            order by  cevaluador.nombre asc,concat(pevaluador.apepat,' '+pevaluador.apemat,', '+pevaluador.nombre) asc
        </if>
        <if test="orden == 5" >
            order by  grupoOcupacionalUNivelEvaluador asc,cevaluador.nombre asc,
            concat(pevaluador.apepat,' '+pevaluador.apemat,', '+pevaluador.nombre) asc
        </if>
        <if test="orden == 6" >
            order by  cevaluado.nombre asc,concat(pevaluado.apepat,' '+pevaluado.apemat,', '+pevaluado.nombre) asc
        </if>
    </select>
    <select id="obtenerReporteEvaluadoresEvaluadosNiveles" resultType="pe.marista.sigma.bean.reporte.EvaluacionDesempenoRepBean" parameterType="map">
        select distinct
        'N' cabecera,'' as usuario,
        'EVALUACIÓN DE DESEMPEÑO '+CONVERT(VARCHAR(4),E.ANIO) AS titulo,
        isnull((case when cdevaluador.idcodigo=30205 or cdevaluador.idcodigo=30301 then 'A' 
        when cdevaluador.idcodigo=30201 then 'D' 
        when cdevaluador.idcodigo=30202 then 'S' 
        when cdevaluador.idcodigo=30203 then 'P'
        when cdevaluador.idcodigo=30204 then 'I' 
        when cdevaluador.idcodigo=30206 then 'E'  
        when cdevaluador.idcodigo=30207 then 'M' 
        
        when cdevaluador.idcodigo=30302  then 'CP'
        when cdevaluador.idcodigo=30303  then 'C'
        when cdevaluador.idcodigo=30304  then 'HS'
        when cdevaluador.idcodigo=30305  then 'CR'
        when cdevaluador.idcodigo=30306  then 'VM'
        when cdevaluador.idcodigo=30307  then 'SMA'
        when cdevaluador.idcodigo=30308  then 'MI'
        end),'-') as grupoOcupacionalUNivelEvaluador,
        cdevaluador.codigo as codigoEvaluador,
        concat(pevaluador.apepat,' '+pevaluador.apemat,', '+pevaluador.nombre) as nombreEvaluador,
        cevaluador.nombre as cargoEvaluador,
        isnull((case when cdevaluado.idcodigo=30205 or cdevaluado.idcodigo=30301 then 'A' 
        when cdevaluado.idcodigo=30201 then 'D' 
        when cdevaluado.idcodigo=30202 then 'S' 
        when cdevaluado.idcodigo=30203 then 'P'
        when cdevaluado.idcodigo=30204 then 'I' 
        when cdevaluado.idcodigo=30206 then 'E'  
        when cdevaluado.idcodigo=30207 then 'M' 
        
        when cdevaluado.idcodigo=30302  then 'CP'
        when cdevaluado.idcodigo=30303  then 'C'
        when cdevaluado.idcodigo=30304  then 'HS'
        when cdevaluado.idcodigo=30305  then 'CR'
        when cdevaluado.idcodigo=30306  then 'VM'
        when cdevaluado.idcodigo=30307  then 'SMA'
        when cdevaluado.idcodigo=30308  then 'MI'
        end),'-') as grupoOcupacionalUNivelEvaluado,
        cdevaluado.codigo as codigoEvaluado,
        concat(pevaluado.apepat,' '+pevaluado.apemat,', '+pevaluado.nombre) as nombreEvaluado,
        cevaluado.nombre as cargoEvaluado,
        isnull((select top 1
        (case when enc.progreso=100 then 'SI' else 'NO' end)
        from ED_Encuesta enc where en.idEvaluadoEvaluador=enc.idevaluadoevaluador
        and enc.unineg=#{uniNeg}  and enc.anio=#{anio}),'NO') as hecho,  
        ent.nombrecomercial as nombreUniNeg
        from ED_EvaluadoEvaluador e
        inner join ED_Personal pevaluador on pevaluador.codper=e.codigoEvaluador
        inner join ED_Personal pevaluado on pevaluado.codper=e.codigoEvaluado
        inner join MO_Cargo cevaluador on cevaluador.idcargo=e.idCargoEvaluador
        inner join MO_Cargo cevaluado on cevaluado.idcargo=e.idCargoEvaluado
        left join ED_Encuesta en on e.idEvaluadoEvaluador=EN.idEvaluadoEvaluador
        inner join MO_UnidadNegocio uni on uni.unineg=e.unineg 
        inner join MO_Entidad ent on ent.ruc=uni.ruc
        inner join MO_Codigo cdevaluador on cdevaluador.idcodigo=pevaluador.idtiponivelesColegio
        inner join MO_Codigo cdevaluado on cdevaluado.idcodigo=pevaluado.idtiponivelesColegio 
        where uni.unineg=#{uniNeg}  and e.anio=#{anio} 
        <if test="orden == 7" >
            order by  codigoEvaluador asc, concat(pevaluador.apepat,' '+pevaluador.apemat,', '+pevaluador.nombre) asc
        </if> 
        <if test="orden == 8" >
            order by  codigoEvaluador asc,cevaluador.nombre asc,
            concat(pevaluador.apepat,' '+pevaluador.apemat,', '+pevaluador.nombre) asc
        </if> 
    </select>
    <select id="obtenerProgresoDeEvaluaciones" resultType="pe.marista.sigma.bean.reporte.EvaluacionDesempenoRepBean" parameterType="map">
        declare @anio int,@unineg varchar(6)
        set @anio=#{anio}
        set @unineg=#{uniNeg}
        ;WITH lista(titulo,usuario,nombreEvaluador,grupoOcupacionalUNivelEvaluador,nroEva,aplicado,pendiente,nombreUniNeg) 
        AS(

        select distinct
        'EVALUACIÓN DE DESEMPEÑO '+CONVERT(VARCHAR(4),ED.ANIO) AS titulo,'' as usuario,
        concat(perevaluador.apepat,' '+perevaluador.apemat,' '+perevaluador.nombre) as nombreEvaluador, 
        (case when nivel.idcodigo=30205 or nivel.idcodigo=30301 then 'A' 
        when nivel.idcodigo=30201 then 'D' 
        when nivel.idcodigo=30202 then 'S' 
        when nivel.idcodigo=30203 then 'P'
        when nivel.idcodigo=30204 then 'I' 
        when nivel.idcodigo=30206 then 'E'  
        when nivel.idcodigo=30207 then 'M' 
        
        when nivel.idcodigo=30302  then 'CP'
        when nivel.idcodigo=30303  then 'C'
        when nivel.idcodigo=30304  then 'HS'
        when nivel.idcodigo=30305  then 'CR'
        when nivel.idcodigo=30306  then 'VM'
        when nivel.idcodigo=30307  then 'SMA'
        when nivel.idcodigo=30308  then 'MI'
        end) as grupoOcupacionalUNivelEvaluador,
        (select count(*) from ED_EvaluadoEvaluador eva where eva.codigoEvaluador=ed.codigoEvaluador
        and eva.unineg=@unineg) as nroEva ,
        (select count(distinct e.idevaluadoevaluador) from ED_EvaluadoEvaluador ee
        left join ED_Encuesta e  on ee.idEvaluadoEvaluador=e.idevaluadoevaluador
        inner join ED_Personal pe on pe.codper=ee.codigoEvaluador
        where perevaluador.codper=pe.codper and e.progreso=100
        and ee.unineg=@unineg and e.unineg=@unineg and pe.unineg=@unineg) as aplicado
        ,((select count(*) from ED_EvaluadoEvaluador eva where eva.codigoEvaluador=ed.codigoEvaluador
        and eva.unineg=@unineg) - (select count(distinct e.idevaluadoevaluador) from ED_EvaluadoEvaluador ee
        left join ED_Encuesta e  on ee.idEvaluadoEvaluador=e.idevaluadoevaluador
        inner join ED_Personal pe on pe.codper=ee.codigoEvaluador
        where perevaluador.codper=pe.codper and e.progreso=100
        and ee.unineg=@unineg and e.unineg=@unineg and pe.unineg=@unineg)) as pendiente,
        ent.nombrecomercial as nombreUniNeg
        from ED_EvaluadoEvaluador ed
        inner join MO_UnidadNegocio uni on uni.unineg=ed.unineg
        inner join MO_Entidad ent on ent.ruc=uni.ruc
        left join ED_Encuesta en on ed.idEvaluadoEvaluador=en.idevaluadoevaluador
        inner join ED_Personal perevaluador on perevaluador.codper=ed.codigoEvaluador 
        inner join MO_Codigo nivel on nivel.idcodigo=perevaluador.idtiponivelescolegio
        where uni.unineg=@unineg  and ed.anio=@anio
        group by perevaluador.apepat,perevaluador.apemat,perevaluador.nombre,nivel.idcodigo ,ed.codigoEvaluador,
        perevaluador.codper,ED.ANIO,ent.nombrecomercial)
        select *, 
        (case when pendiente>0 then 'SI'
        when pendiente=0 then 'NO' end) as estado from lista
        order by nombreEvaluador asc

    </select>
    <insert id="insertarEvaluacionDesempeno" parameterType="pe.marista.sigma.bean.EvaluacionDesempenoBean">
        INSERT INTO ED_EvaluadoEvaluador 
        (codigoEvaluado,idCargoEvaluado,
        codigoEvaluador,idCargoEvaluador,
        unineg,status,creapor,
        creafecha,anio) 
        Values (#{codigoEvaluado.codigoPer},#{cargoEvaluadoBean.idCargo},
        #{codigoEvaluador.codigoPer},#{cargoEvaluadorBean.idCargo},
        #{unidadNegocioBean.uniNeg},#{status},#{creaPor},
        getDate(),#{anio})
    </insert> 
    <select id="obtenerAlertasEvaluacionDesempeno" resultType="pe.marista.sigma.bean.reporte.AlertasEvaluacionDesempenoRepBean" parameterType="map">
        declare @anio int,@unineg varchar(6)
        set @anio=#{anio}
        set @unineg=#{uniNeg}

        ;WITH lista(titulo,usuario,periodo,nombreUniNeg,idEvaluadoEvaluador,nombreEvaluador,cargoEvaluador,nombreEvaluado,cargoEvaluado,respuesta0,respuesta1,respuesta4) 
        AS
        (select distinct 'ALERTAS EVALUACIÓN DE DESEMPEÑO' as titulo,'' as usuario,
        ('Periodo: '+convert(varchar(10),e.anio)) as periodo,
        uni.nombreUniNeg as nombreUniNeg,
        idEvaluadoEvaluador,
        concat(pevaluador.apepat,' '+pevaluador.apemat,', '+pevaluador.nombre) as nombreEvaluador,
        carevaluador.nombre as cargoEvaluador,
        concat(pevaluado.apepat,' '+pevaluado.apemat,', '+pevaluado.nombre) as nombreEvaluado,
        carevaluado.nombre as cargoEvaluado,
        (((select count(en2.idpregunta)
        from ED_Encuesta  en2  where en2.respuesta=0 and en2.idevaluadoevaluador=e.idEvaluadoEvaluador
        and anio=@anio and en2.unineg=@unineg
        group by en2.idevaluadoevaluador
        having count(en2.idevaluadoevaluador)>0)*100)/
        (select count(en.idpregunta)
        from ED_Encuesta en where en.idevaluadoevaluador=e.idEvaluadoEvaluador
        and anio=@anio and en.unineg=@unineg
        group by en.idevaluadoevaluador
        having count(en.idevaluadoevaluador)>0)
        ) respuesta0,
        (((select count(en2.idpregunta)
        from ED_Encuesta  en2  where en2.respuesta=1 and en2.idevaluadoevaluador=e.idEvaluadoEvaluador
        and anio=@anio and en2.unineg=@unineg
        group by en2.idevaluadoevaluador
        having count(en2.idevaluadoevaluador)>0)*100)/
        (select count(en.idpregunta)
        from ED_Encuesta en where en.idevaluadoevaluador=e.idEvaluadoEvaluador
        and anio=@anio and en.unineg=@unineg
        group by en.idevaluadoevaluador
        having count(en.idevaluadoevaluador)>0)
        ) respuesta1,
        (((select count(en2.idpregunta)
        from ED_Encuesta  en2  where en2.respuesta=4 and en2.idevaluadoevaluador=e.idEvaluadoEvaluador
        and anio=@anio and en2.unineg=@unineg
        group by en2.idevaluadoevaluador
        having count(en2.idevaluadoevaluador)>0)*100)/
        (select count(en.idpregunta)
        from ED_Encuesta en where en.idevaluadoevaluador=e.idEvaluadoEvaluador
        and anio=@anio and en.unineg=@unineg
        group by en.idevaluadoevaluador
        having count(en.idevaluadoevaluador)>0)
        ) respuesta4
        from ED_EvaluadoEvaluador e
        inner join MO_UnidadNegocio uni on uni.unineg=e.unineg 
        inner join ED_Personal pevaluador on pevaluador.codper=e.codigoEvaluador
        inner join MO_Cargo carevaluador on carevaluador.idcargo=e.idCargoEvaluador
        inner join ED_Personal pevaluado on pevaluado.codper=e.codigoEvaluado
        inner join MO_Cargo carevaluado on carevaluado.idcargo=e.idCargoEvaluado
        where e.anio=@anio and uni.unineg=@unineg
        )
        select * from lista
        where 1=(case when respuesta0>=75 or respuesta1>=75 or respuesta4>=75 then 1  else 0 end)
    </select>
    <select id="obtenerSeguimientoEvaluacionDesempeno" resultType="pe.marista.sigma.bean.reporte.SeguimientoEDRepBean" parameterType="map">
        declare @unineg varchar(6)=#{uniNeg}
        declare @anio int=#{anio}
        select distinct 
        (count(distinct e.idevaluadoevaluador)-
        (select count(distinct e.idEvaluadoEvaluador) from ED_Encuesta encuesta 
        inner join ED_EvaluadoEvaluador e on e.idEvaluadoEvaluador=encuesta.idevaluadoevaluador
        where encuesta.unineg=@unineg)) as pendientes, 
        convert(varchar(20),convert(int,round((100-		
        (((select convert(decimal(8,2),count(distinct e.idEvaluadoEvaluador)) from ED_Encuesta encuesta 
        inner join ED_EvaluadoEvaluador e on e.idEvaluadoEvaluador=encuesta.idevaluadoevaluador
        where encuesta.unineg=@unineg)*100)/
        count(distinct e.idevaluadoevaluador))),0 )))+'%' as porcPendientes,
        (select count(distinct e.idEvaluadoEvaluador) from ED_Encuesta encuesta 
        inner join ED_EvaluadoEvaluador e on e.idEvaluadoEvaluador=encuesta.idevaluadoevaluador
        where encuesta.unineg=@unineg) as completas,
        convert(varchar(20),convert(int,round((((select convert(decimal(8,2),count(distinct e.idEvaluadoEvaluador)) from ED_Encuesta encuesta 
        inner join ED_EvaluadoEvaluador e on e.idEvaluadoEvaluador=encuesta.idevaluadoevaluador
        where encuesta.unineg=@unineg)*100)/
        count(distinct e.idevaluadoevaluador)),0)))+'%' as porcCompletas,
        count(distinct e.idevaluadoevaluador) totalEncuestas
        ,'100%' as totalPorcEncuesta
        from ED_EvaluadoEvaluador e
        left join ED_Encuesta en on en.idevaluadoevaluador=e.idEvaluadoEvaluador 
        inner join MO_UnidadNegocio uni on uni.unineg=e.unineg
        where uni.unineg=@unineg and e.anio=@anio
    </select>
    <delete id="eliminarEvaluadorAll" parameterType="pe.marista.sigma.bean.EvaluacionDesempenoBean">
        Delete From ED_EvaluadoEvaluador where codigoEvaluador= #{codigoEvaluador.codigoPer} and idCargoEvaluador= #{cargoEvaluadorBean.idCargo}
    </delete>       
    <select id="obtenerFotoPersonal" parameterType="map" resultType="String" >
        declare @unineg varchar (6),@codLPM varchar(15)
        set @unineg=#{uniNeg}
        set @codLPM=#{codPer}
        declare @flgest int 
        set @flgest= (SELECT top 1 count(*) 
        FROM MO_Personal PER 
        where per.codper=@codLPM and per.unineg=@unineg)
        SELECT 
        (
        case when @flgest=1 then (case  
        when @unineg in ('CHAMPS') THEN '/fotosTrabajadores/'+@codLPM+'.bmp' 	 
        else  '/fotosTrabajadores/'+@codLPM+'.JPG'    
        END)
        else '/resources/images/noFoto.bmp'
        end
        )	              		
    </select> 
    <select id="obtenerSinEvaluacionDesempeno" resultType="pe.marista.sigma.bean.reporte.EvaluacionDesempenoRepBean" parameterType="map">
        declare @anio int,@unineg varchar(6)
        set @anio=#{anio}
        set @unineg=#{uniNeg}

        SELECT  ent.nombrecomercial as nombreUniNeg,
        concat(p.apepat,' '+p.apemat,', '+p.nombre) AS nombreCompleto,@anio as anio,
        'NO TIENE PERSONAL POR EVALUAR' as condicion,''as usuario
        FROM ED_Personal p
        inner join MO_UnidadNegocio uni ON UNI.unineg=p.unineg
        inner join MO_Entidad ent on ent.ruc=uni.RUC
        where codper not in(select codigoEvaluador from ED_EvaluadoEvaluador WHERE ANIO=@anio)
        AND uni.unineg=@unineg
        union all
        select ent.nombrecomercial  as nombreUniNeg,
        concat(p.apepat,' '+p.apemat,', '+p.nombre) AS nombreCompleto ,@anio as anio,
        'NO SERÁ EVALUADO POR NINGÚN PERSONAL' as condicion,'' as usuario
        FROM ED_Personal p
        inner join MO_UnidadNegocio uni ON UNI.unineg=p.unineg
        inner join MO_Entidad ent on ent.ruc=uni.RUC
        where codper not in(select codigoEvaluado from ED_EvaluadoEvaluador WHERE ANIO=@anio)
        AND uni.unineg=@unineg
    </select>    
    <select id="sp_ed_grafico_directores" resultType="pe.marista.sigma.bean.MatrizGraficoEDBean" parameterType="Map"
             statementType="CALLABLE">
        { call SP_ED_GRAFICO_DIRECTORES (
        #{unineg , mode=IN, jdbcType=VARCHAR},
        #{anio , mode=IN, jdbcType=INTEGER}
        )}      
    </select>     
    <select id="sp_ed_historico_directores" resultType="pe.marista.sigma.bean.HistoricoEDBean" parameterType="Map"
            statementType="CALLABLE">
        { call SP_ED_HISTORICO_DIRECTORES (
        #{unineg , mode=IN, jdbcType=VARCHAR}
        )}      
    </select>   
    <select  id="sp_ed_lista_unineg_historico" resultType="pe.marista.sigma.bean.UniNegBean" parameterType="Map" statementType="CALLABLE">
        { call SP_ED_LISTA_UNINEG_HISTORICO()}
    </select>   
    <select id="sp_ed_lista_historico" resultType="pe.marista.sigma.bean.HistoricoEDListBean" parameterType="Map"
            statementType="CALLABLE">
        { call SP_ED_LISTA_HISTORICO (
        #{unineg , mode=IN, jdbcType=VARCHAR}
        )}      
    </select>      
    <select id="sp_ed_update_Promedio_Historico" resultType="Integer" parameterType="Map"
            statementType="CALLABLE">
        { call SP_ED_UPDATE_PROMEDIO_HISTORICO (
        #{unineg , mode=IN, jdbcType=VARCHAR},
        #{idcargo, mode=IN, jdbcType=INTEGER},
        #{anio , mode=IN, jdbcType=INTEGER},                        
        #{promedio , mode=IN, jdbcType=FLOAT}       
        )}      
    </select>
    <select  id="sp_ed_directores" resultType="pe.marista.sigma.bean.DirectoresEDBean" parameterType="Map" 
             statementType="CALLABLE">
        { call SP_ED_DIRECTORES()}
    </select>
    <select id="sp_ed_cargar_matriz_historico" resultType="Integer" parameterType="Map" 
            statementType="CALLABLE">
        { call SP_ED_CARGAR_MATRIZ_HISTORICO()}
    </select> 
    <select id="sp_ed_grafico_directores_unidadnegocio" resultType="pe.marista.sigma.bean.DirectoresPromBean" parameterType="Map" 
            statementType="CALLABLE">
        { call SP_ED_GRAFICO_DIRECTORES_UNIDADNEGOCIO()}
    </select>            
    <select id="sp_ed_recupera_promedio" resultType="Float" parameterType="Map"
            statementType="CALLABLE">
        { call SP_ED_RECUPERA_PROMEDIO (
        #{unineg , mode=IN, jdbcType=VARCHAR},
        #{nombre , mode=IN, jdbcType=VARCHAR},            
        #{idcargo, mode=IN, jdbcType=INTEGER},
        #{anio, mode=IN, jdbcType=INTEGER}
        )}      
    </select>    
    <!--******************************* INDICADORES DE LOGRO ****************************************-->       
    <select id="sp_ed_tipo_planilla" resultType="pe.marista.sigma.bean.IndicadoresBean" parameterType="Map"
            statementType="CALLABLE">
        { call SP_ED_TIPO_PLANILLA (
        #{idTipo , mode=IN, jdbcType=INTEGER}
        )}      
    </select>    
    <select id="sp_ed_lista_indicadores" resultType="pe.marista.sigma.bean.IndicadoresBean" parameterType="Map"
            statementType="CALLABLE">
        { call SP_ED_LISTA_INDICADORES (
        #{tipo_planilla , mode=IN, jdbcType=INTEGER}
        )}      
    </select>      
       
    <select id="sp_ed_lista_filtros_dinamicos" resultType="pe.marista.sigma.bean.DetalleIndicadorBean" parameterType="Map"
            statementType="CALLABLE">
        { call SP_ED_LISTA_FILTROS_DINAMICOS (
        #{cad , mode=IN, jdbcType=VARCHAR},
        #{unineg , mode=IN, jdbcType=VARCHAR}, 
        #{idindicador , mode=IN, jdbcType=VARCHAR},     
        #{anio , mode=IN, jdbcType=VARCHAR},
        #{flgAsigna , mode=IN, jdbcType=CHAR}               
        )}      
    </select>       
    <select id="sp_ed_insert_detalle_indicador" resultType="Integer" parameterType="Map"
            statementType="CALLABLE">
        { call SP_ED_INSERT_DETALLE_INDICADOR (
        #{unineg , mode=IN, jdbcType=VARCHAR},        
        #{codper , mode=IN, jdbcType=VARCHAR},
        #{idTipoNivelesColegio , mode=IN, jdbcType=INTEGER},        
        #{idindicador , mode=IN, jdbcType=INTEGER},
        #{promedio , mode=IN, jdbcType=FLOAT},
        #{creapor , mode=IN, jdbcType=VARCHAR},
        #{modipor , mode=IN, jdbcType=VARCHAR},
        #{creafecha , mode=IN, jdbcType=VARCHAR},
        #{anio , mode=IN, jdbcType=INTEGER}                        
        )}      
    </select>           
    <select id="sp_ed_update_detalle_indicador" resultType="Integer" parameterType="Map"
            statementType="CALLABLE">
        { call SP_ED_UPDATE_DETALLE_INDICADOR (
        #{unineg , mode=IN, jdbcType=VARCHAR},
        #{codper , mode=IN, jdbcType=VARCHAR},        
        #{idTipoNivelesColegio , mode=IN, jdbcType=INTEGER},        
        #{idindicador , mode=IN, jdbcType=INTEGER},
        #{promedio , mode=IN, jdbcType=FLOAT},
        #{anio , mode=IN, jdbcType=INTEGER}                        
        )}      
    </select>        
    <select id="sp_ed_consulta_detalle_indicador" resultType="Integer" parameterType="Map"
            statementType="CALLABLE">
        { call SP_ED_CONSULTA_DETALLE_INDICADOR (
        #{codper , mode=IN, jdbcType=VARCHAR},
        #{unineg , mode=IN, jdbcType=VARCHAR},
        #{idTipoNivelesColegio , mode=IN, jdbcType=INTEGER},
        #{idindicador , mode=IN, jdbcType=INTEGER},
        #{anio , mode=IN, jdbcType=INTEGER}                        
        )}      
    </select>        

    <select id="sp_ed_nombreindicador" resultType="String" parameterType="Map"
            statementType="CALLABLE">
        { call SP_ED_NOMBREINDICADOR (
        #{idindicador , mode=IN, jdbcType=INTEGER}
        )}      
    </select> 
    <select id="sp_ed_Rep_Indicadores_Planilla" resultType="pe.marista.sigma.bean.IndicadoresPlanilla" parameterType="Map"
            statementType="CALLABLE">
        { call sp_ed_Rep_Indicadores_Planilla (
        #{tipo_planilla , mode=IN, jdbcType=INTEGER}
        )}      
    </select>       
    
    <!--*************************************************************************************-->   
    <select id="sp_ed_insert_historico" resultType="Integer" parameterType="Map" 
            statementType="CALLABLE">
        { call SP_ED_INSERT_HISTORICO()}
    </select> 
    <select id="sp_ed_cargar_matriz_autoevaluacion" resultType="Integer" parameterType="Map" 
            statementType="CALLABLE">
        { call SP_ED_CARGAR_MATRIZ_AUTOEVALUACION()}
    </select>           

    <!-- propuestas  demos--> 
    <select id="lista_demo" resultType="pe.marista.sigma.bean.ED_PersonalBean" parameterType="Map" 
            statementType="CALLABLE">
        { call LISTA_DEMO()}
    </select>           
    <select id="sp_ed_detalle_cardinal_especifica" resultType="pe.marista.sigma.bean.ED_DetalleCompetencias" parameterType="Map"
            statementType="CALLABLE">
        { call SP_ED_DETALLE_CARDINAL_ESPECIFICA (
        #{unineg , mode=IN, jdbcType=VARCHAR},
        #{nombre , mode=IN, jdbcType=VARCHAR},
        #{apepat , mode=IN, jdbcType=INTEGER},
        #{apemat, mode=IN, jdbcType=INTEGER}                        
        )}      
    </select>   
    <select id="sp_ed_detallecompetencias" resultType="pe.marista.sigma.bean.ED_DetalleComObservables" parameterType="Map"
            statementType="CALLABLE">
        { call SP_ED_DETALLECOMPETENCIAS (
        #{codper , mode=IN, jdbcType=VARCHAR},
        #{idcargo, mode=IN, jdbcType=INTEGER}               
        )}      
    </select>           
    <select id="sp_ed_tiponiveles" resultType="pe.marista.sigma.bean.ED_IniPriSEC" parameterType="Map" 
            statementType="CALLABLE">
        { call SP_ED_TIPONIVELES()}
    </select>   
    
    <select id="sp_ed_detallexnivel" resultType="pe.marista.sigma.bean.ED_DetallexNivel" parameterType="Map"
            statementType="CALLABLE">
        { call SP_ED_DETALLEXNIVEL (
        #{idTipoNivelesColegio , mode=IN, jdbcType=INTEGER}                  
        )}      
    </select> 
    <select id="sp_ed_grafico_docentes" resultType="pe.marista.sigma.bean.ED_IniPriSEC" parameterType="Map" 
            statementType="CALLABLE">
        { call SP_ED_GRAFICO_DOCENTES()}
    </select>
    <select id="sp_ed_vista_reportes_EvaDes" resultType="pe.marista.sigma.bean.ED_PersonalBean" parameterType="Map" 
            statementType="CALLABLE">
        { call sp_ed_vista_reportes_EvaDes()}
    </select>    
    
    <!-- reporte ficha individual -->
    <select id="sp_reporte_individual" resultType="pe.marista.sigma.bean.EvaRepIndividualBean" parameterType="Map"
            statementType="CALLABLE">
        { call sp_reporte_individual (
        #{unineg , mode=IN, jdbcType=VARCHAR},
        #{codper , mode=IN, jdbcType=VARCHAR}                  
        )}      
    </select>  
    <select id="sp_ed_lista_cargos" resultType="pe.marista.sigma.bean.Cargos" parameterType="Map"
            statementType="CALLABLE">
        { call sp_ed_lista_cargos (
        #{codper , mode=IN, jdbcType=VARCHAR},
        #{unineg , mode=IN, jdbcType=VARCHAR}
        )}      
    </select>  
    <select id="sp_ed_resultados_eva_resumen" resultType="pe.marista.sigma.bean.ResumenEvaDesempeno" parameterType="Map"
            statementType="CALLABLE">
        { call sp_ed_resultados_eva_resumen (
        #{codper , mode=IN, jdbcType=VARCHAR},
        #{unineg , mode=IN, jdbcType=VARCHAR}        
        )}      
    </select>           
    <select id="sp_ed_ficha_retroalimentacion" resultType="pe.marista.sigma.bean.FichaRetroalimentacionBean" parameterType="Map"
            statementType="CALLABLE">
        { call sp_ed_ficha_retroalimentacion (
        #{codper , mode=IN, jdbcType=VARCHAR},
        #{unineg , mode=IN, jdbcType=VARCHAR}        
        )}      
    </select>      
    <select id="sp_ed_repIndividual_planilla" resultType="pe.marista.sigma.bean.EvaRepIndividualPlanBean" parameterType="Map"
            statementType="CALLABLE">
        { call sp_ed_repIndividual_planilla (
        #{unineg , mode=IN, jdbcType=VARCHAR}        
        )}      
    </select>    
    <select id="sp_ed_rep_fichaEntravista" resultType="pe.marista.sigma.bean.FichaEntrevista" parameterType="Map"
            statementType="CALLABLE">
        { call sp_ed_rep_fichaEntravista (
        #{unineg , mode=IN, jdbcType=VARCHAR}        
        )}      
    </select>    
    <select id="sp_ed_rep_consolidado" resultType="pe.marista.sigma.bean.RepConsolidado" parameterType="Map"
            statementType="CALLABLE">
        { call sp_ed_rep_consolidado (
        #{unineg , mode=IN, jdbcType=VARCHAR}        
        )}      
    </select>      
    <select id="sp_ed_detallexcargo" resultType="pe.marista.sigma.bean.DetalleNivelCargo" parameterType="Map"
            statementType="CALLABLE">
        { call sp_ed_detallexcargo (
        #{codper , mode=IN, jdbcType=VARCHAR},        
        #{unineg , mode=IN, jdbcType=VARCHAR}        
        )}      
    </select>           
    <select id="sp_ed_grafico_directivos" resultType="pe.marista.sigma.bean.ED_IniPriSEC" parameterType="Map" 
                  statementType="CALLABLE">
        { call SP_ED_GRAFICO_DIRECTIVOS()}
    </select>    
    <select id="sp_ed_ficha_retroalimentacionConsolidado" resultType="pe.marista.sigma.bean.FichaRetroConsolidado" parameterType="Map"
            statementType="CALLABLE">
        { call sp_ed_ficha_retroalimentacionConsolidado (
        #{unineg , mode=IN, jdbcType=VARCHAR}        
        )}      
    </select>  
    <select id="sp_ed_fichaEntrevista" resultType="pe.marista.sigma.bean.FichaEntrevista" parameterType="Map"
            statementType="CALLABLE">
        { call sp_ed_fichaEntrevista (
        #{codper , mode=IN, jdbcType=VARCHAR},        
        #{unineg , mode=IN, jdbcType=VARCHAR}        
        )}      
    </select>
    <select id="sp_ed_flg_consolidado" resultType="Integer" parameterType="Map"
            statementType="CALLABLE">
        { call sp_ed_flg_consolidado (
        #{idpersonal , mode=IN, jdbcType=INTEGER},        
        #{unineg , mode=IN, jdbcType=VARCHAR}        
        )}      
    </select>        
    <select id="sp_anio_indicadores" resultType="pe.marista.sigma.bean.AnioHistBean" parameterType="Map"
            statementType="CALLABLE">
        { call sp_anio_indicadores ()}      
    </select>    
            
</mapper>
