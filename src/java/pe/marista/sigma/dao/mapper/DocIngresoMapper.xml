<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 
<mapper namespace="pe.marista.sigma.dao.DocIngresoDAO">  
    <sql id="consultaPersona">
        Select  
        distinct
        per.idPersona,
        per.nombre,
        per.apepat,
        per.apemat,
        per.sexo,
        per.idTipoDocPer,
        per.nroDoc,
        per.fecNac,
        per.correo,
        per.idNacionalidad,
        per.idGradoAcademico,
        per.uniNeg,
        cod1.codigo as codigo1,
        cod1.valor as valor1,
        gra.codigo as codigo2,
        gra.nombre as nombre2,
        pai.codigo as codigoPais,
        pai.nombre as nombrePais,
        pai.nacionalidad,
        uni.nombreUniNeg,
        uni.ruc
        From MX_Persona per  
        Left Join MO_Codigo cod1 ON per.idTipoDocPer=cod1.idCodigo
        Left Join MX_GradoAcademico gra ON per.idGradoAcademico=gra.idGradoAcademico
        Left Join MO_Pais pai ON per.idNacionalidad=pai.idPais
        Left Join MO_UnidadNegocio uni ON per.uniNeg=uni.uniNeg
        
    </sql>
    <resultMap id="personaResultado" type="pe.marista.sigma.bean.PersonaBean">
        <id property="idPersona" column="idPersona"/>
        <result property="nombre" column="nombre"/>
        <result property="apepat" column="apepat"/>
        <result property="apemat" column="apemat"/>
        <result property="sexo" column="sexo"/>
        <result property="nroDoc" column="nroDoc"/>
        <result property="fecNac" column="fecNac"/>
        <result property="correo" column="correo"/>
        <association property="idTipoDocPer" column="idTipoDocPer"
                     javaType="pe.marista.sigma.bean.CodigoBean"
                     resultMap="tipoDocPerResultado"/>
        <association property="gradoAcademicoBean" column="idGradoAcademico"
                     javaType="pe.marista.sigma.bean.GradoAcademicoBean"
                     resultMap="gradoResultado"/>
        <association property="paisBean" column="idNacionalidad"
                     javaType="pe.marista.sigma.bean.PaisBean"
                     resultMap="paisResultado"/>
        <association property="unidadNegocioBean" column="uniNeg"
                     javaType="pe.marista.sigma.bean.UnidadNegocioBean"
                     resultMap="unidadNegocioResultado"/> 
    </resultMap> 
    <!--idTipoDocPer-->
    <resultMap id="tipoDocPerResultado" type="pe.marista.sigma.bean.CodigoBean">
        <id property="idCodigo" column="idTipoDocPer"/>
        <result property="codigo" column="codigo1"/>
        <result property="valor" column="valor1"/>
    </resultMap>
    <!--idGradoAcademico-->
    <resultMap id="gradoResultado" type="pe.marista.sigma.bean.GradoAcademicoBean">
        <id property="idGradoAcademico" column="idGradoAcademico"/>
        <result property="codigo" column="codigo"/>
        <result property="nombre" column="nombre2"/>
    </resultMap>
    <!--idNacionalidad-->
    <resultMap id="paisResultado" type="pe.marista.sigma.bean.PaisBean">
        <id property="idPais" column="idNacionalidad"/>
        <result property="codigo" column="codigoPais"/>
        <result property="nombre" column="nombrePais"/>
        <result property="nacionalidad" column="nacionalidad"/>
    </resultMap>
    <!--uniNeg-->
    <resultMap id="unidadNegocioResultado" type="pe.marista.sigma.bean.UnidadNegocioBean">
        <id property="uniNeg" column="uniNeg"/>
        <result property="nombreUniNeg" column="nombreUniNeg"/>
        <result property="ruc" column="ruc"/>
    </resultMap>
    
    <sql id="consultaCtasXCobrar">
        SELECT 
        cta.idCtasXCobrar				as idCtasXCobrar
        ,cta.idEstudiante				as idEstudiante	
        ,mat.idMatricula                                as idMatricula
        ,stu.idGradoHabilitado                          as idGradoHabilitado
        ,stu.seccion                                    as seccion
        <!--,mat.idGradoAcademico                           as idGradoAcademico-->
        ,gra.nombre                                     as nombreGraAca
        ,pro.idProgramacion                             as idProgramacion
        ,pro.seccion					as seccion
        ,cta.uniNeg					as uniNeg
        ,uni.nombreUniNeg				as nombreUniNeg
        ,cta.idConcepto					as idConcepto
        ,con.nombre					as nombreConcepto
        ,cta.idDocIngreso				as idDocIngreso
        ,doc.fechaPago					as fechaPago
        ,cta.cr						as cr
        ,cen.nombre					as nombreCr
        ,cta.cuentad					as cuentaD
        ,pla.nombre					as nombreCuentaD
        ,cta.monto					as monto
        ,cta.montoPagado				as montoPagado	
        ,cta.deuda					as deuda
        ,cta.mora					as mora
        ,cta.tasaInteres				as tasaInteres
        ,cta.idTipoMoneda				as idTipoMoneda
        ,cod.codigo					as codigoMoneda
        ,cta.fechaVenc					as fechaVenc
        ,cta.fechaPago					as fechaPago
        ,isnull(cta.dsctoBeca,0)		        as dsctoBeca
        ,isnull(cta.dscto,0)				as dscto
        ,ISNULL(cta.idEstudianteBeca,0)			as idEstudianteBeca
        ,est.mesInicio					as mesInicio
        ,est.idBeca					as idBeca
        ,bec.nombre					as nombreBeca
        ,bec.porcentaje					as porcentaje
        <!--,mot.idTipoMotivoBeca				as idTipoMotivoBeca	-->
        ,mot.codigo					as codigoMotivoBeca
        <!--,cta.condonacion				as condonacion-->
        <!--  ,cnd.idTipoMotivoCondonacion                    as idTipoMotivoCondonacion-->
        ,cnd.codigo					as codigoMotivoCondonacion
        ,cta.docRefProvision				as docRefProvision
        ,cta.anio					as anio	
        ,cta.mes					as mes
        ,cta.idTipoStatusCtaCte                         as idTipoStatusCtaCte
        ,sta.codigo					as codigoStatusCtaCte
        ,cta.creaPor					as creaPor
        ,cta.creaFecha					as creaFecha
        FROM MT_CtasxCobrar cta
        INNER JOIN MX_Estudiante stu on stu.idestudiante = cta.idestudiante and stu.unineg=cta.unineg
        INNER JOIN MX_Matricula mat on cta.idestudiante = mat.idestudiante  and mat.unineg=cta.unineg
        INNER JOIN MX_GradoAcademico gra on gra.idGradoAcademico = stu.idgradoHabilitado
        INNER JOIN MX_Programacion pro on pro.idProgramacion = mat.idProgramacion and pro.unineg=mat.unineg
        INNER JOIN MO_UnidadNegocio uni on uni.unineg = cta.unineg
        INNER JOIN MT_Concepto con ON cta.idconcepto = con.idconcepto
        LEFT JOIN MT_DocIngreso doc ON cta.iddocingreso = doc.iddocingreso
        LEFT JOIN MT_CentroResponsabilidad cen ON cta.cr = cen.cr
        LEFT JOIN MT_PlanContable pla ON cta.cuentad = pla.cuenta       
        LEFT JOIN MO_Codigo cod ON cta.idtipomoneda = cod.idcodigo 
        LEFT JOIN MX_EstudianteBeca est ON est.idestudiantebeca = cta.idestudiantebeca and est.unineg=stu.unineg
        LEFT JOIN MT_Beca bec ON bec.idbeca = est.idbeca
        <!--  LEFT JOIN MO_Codigo mot ON mot.idcodigo = cta.idtipomotivobeca
        LEFT JOIN MO_Codigo cnd ON cta.idtipomotivocondonacion = cnd.idcodigo-->
        LEFT JOIN MO_Codigo sta ON cta.idtipostatusctacte = sta.idcodigo        
    </sql>
    
    <resultMap id="ctasXCobrarResultado" type="pe.marista.sigma.bean.CuentasPorCobrarBean">
        <id property="idCtasXCobrar" column="idCtasXCobrar"/>
        <result property="monto" column="monto"/>
        <result property="montoPagado" column="montoPagado"/>
        <result property="deuda" column="deuda"/>
        <result property="mora" column="mora"/>
        <result property="tasaInteres" column="tasaInteres"/>        
        <result property="fechaVenc" column="fechaVenc"/>
        <result property="fechaPago" column="fechaPago"/>
        <result property="dsctoBeca" column="dsctoBeca"/>
        <result property="dscto" column="dscto"/>
        <result property="condonacion" column="condonacion"/>
        <result property="docRefProvision" column="docRefProvision"/>
        <result property="anio" column="anio"/>
        <result property="mes" column="mes"/>
        <result property="creaPor" column="creaPor"/>
        <result property="creaFecha" column="creaFecha"/>        
        <result property="flgRecGenerado" column="flgRecGenerado"/>        
        <association property="estudianteBean" column="idEstudiante"
                     javaType="pe.marista.sigma.bean.EstudianteBean"
                     resultMap="estudianteResultado"/>
        <association property="matriculaBean" column="idMatricula"
                     javaType="pe.marista.sigma.bean.MatriculaBean"
                     resultMap="matriculaResultado"/>
        <association property="unidadNegocioBean" column="uniNeg"
                     javaType="pe.marista.sigma.bean.UnidadNegocioBean"
                     resultMap="unidadNegocioResultado"/>
        <association property="conceptoBean" column="idConcepto"
                     javaType="pe.marista.sigma.bean.ConceptoBean"
                     resultMap="conceptoResultado"/>
        <association property="docIngresoBean" column="idDocIngreso"
                     javaType="pe.marista.sigma.bean.DocIngresoBean"
                     resultMap="docIngresoResultado"/>
        <association property="centroResponsabilidadBean" column="cr"
                     javaType="pe.marista.sigma.bean.CentroResponsabilidadBean"
                     resultMap="centroResponsabilidadResultado"/>
        <association property="cuentaD" column="cuentaD"
                     javaType="pe.marista.sigma.bean.PlanContableBean"
                     resultMap="planContableDResultado"/>
        <association property="cuentaH" column="cuentaH"
                     javaType="pe.marista.sigma.bean.PlanContableBean"
                     resultMap="planContableHResultado"/>
        <association property="idTipoMoneda" column="idTipoMoneda"
                     javaType="pe.marista.sigma.bean.CodigoBean"
                     resultMap="tipoMonedaResultado"/>
        <association property="estudianteBecaBean" column="idEstudianteBeca"
                     javaType="pe.marista.sigma.bean.EstudianteBecaBean"
                     resultMap="estudianteBecaResultado"/>
        <association property="idTipoBeca" column="idTipoBeca"
                     javaType="pe.marista.sigma.bean.CodigoBean"
                     resultMap="tipoBecaResultado"/>
        <association property="idTipoMotivoCondonacion" column="idTipoMotivoCondonacion"
                     javaType="pe.marista.sigma.bean.CodigoBean"
                     resultMap="tipoMotivoCondonacionResultado"/>
        <association property="idTipoStatusCtaCte" column="idTipoStatusCtaCte"
                     javaType="pe.marista.sigma.bean.CodigoBean"
                     resultMap="tipoStatusCtaCteResultado"/>
    </resultMap>
    <resultMap id="estudianteResultado" type="pe.marista.sigma.bean.EstudianteBean">
        <id property="idEstudiante" column="idEstudiante"/>
        <result property="seccion" column="seccion"/> 
        <association property="gradoHabilitado" column="idGradoHabilitado"
                     javaType="pe.marista.sigma.bean.GradoAcademicoBean"
                     resultMap="gradoHabilitadoResultado"/>        
    </resultMap>
    <resultMap id="gradoHabilitadoResultado" type="pe.marista.sigma.bean.GradoAcademicoBean">
        <id property="idGradoAcademico" column="idGradoHabilitado"/>
        <result property="nombre" column="nombreGraAca"/>
        <association property="nivelAcademicoBean" column="idNivelAcademicoHab"
                     javaType="pe.marista.sigma.bean.NivelAcademicoBean"
                     resultMap="nivelResultado"/>
    </resultMap> 
    <resultMap id="nivelResultado" type="pe.marista.sigma.bean.NivelAcademicoBean">
        <id property="idNivelAcademico" column="idNivelAcademicoHab"/>
        <result property="nombre" column="nomNA"/> 
    </resultMap>
    <!--idEstudiante-->
    <resultMap id="matriculaResultado" type="pe.marista.sigma.bean.MatriculaBean">
        <id property="idMatricula" column="idMatricula"/>
        <association property="gradoAcademicoBean" column="idGradoAcademico"
                     javaType="pe.marista.sigma.bean.GradoAcademicoBean"
                     resultMap="gradoAcademicoResultado"/>  
        <association property="programacionBean" column="idProgramacion"
                     javaType="pe.marista.sigma.bean.ProgramacionBean"
                     resultMap="programacionResultado"/>  
    </resultMap>
    <!--idGradoAcadémico-->
    <resultMap id="gradoAcademicoResultado" type="pe.marista.sigma.bean.GradoAcademicoBean">
        <id property="idGradoAcademico" column="idGradoAcademico"/>
        <result property="nombre" column="nombreGrado"/>
    </resultMap>
    <!--idProgramacion-->
    <resultMap id="programacionResultado" type="pe.marista.sigma.bean.ProgramacionBean">
        <id property="idProgramacion" column="idProgramacion"/>
        <result property="seccion" column="seccion"/>
    </resultMap>
    <!--idDocIngreso-->
    <resultMap id="docIngresoResultado" type="pe.marista.sigma.bean.DocIngresoBean">
        <id property="idDocIngreso" column="idDocIngreso"/>
        <result property="serie" column="serie"/> 
        <result property="nroDoc" column="nroDoc"/> 
        <result property="fechaPago" column="fechaPago"/> 
        <result property="codDiscente" column="codDiscente"/> 
        <result property="nombreDiscente" column="nombreDiscente"/> 
        <result property="anio" column="anio"/> 
        <result property="uniNeg" column="uniNeg"/> 
        <result property="montoPos1" column="montoPos1"/>
        <result property="montoPos2" column="montoPos2"/>
        <result property="serieNroDoc" column="serieNroDoc"/>
        <result property="tc" column="tc"/>
        <result property="montoEfectivoSol" column="montoEfectivoSol"/>
        <result property="montoEfectivoDol" column="montoEfectivoDol"/>  
        <result property="fechaInicio" column="fechaInicio"/>  
        <result property="FechaFin" column="FechaFin"/>  
        <result property="fechaPagoVista" column="fechaPagoVista"/>  
        <result property="tipoMoneda" column="tipoMoneda"/>  
        <result property="caja" column="caja"/>  
        <result property="montoPagado" column="montoPagado"/>  
        <result property="montoPagadoSol" column="montoPagadoSol"/>  
        <result property="montoPagadoDol" column="montoPagadoDol"/>  
        <result property="creaFechaStatus" column="creaFechaStatus"/>  
        <result property="creaStatus" column="creaStatus"/>  
        <result property="idCtaxCobrar" column="idCtaxCobrar"/>  
        <result property="obsAyuda" column="obsAyuda"/>  
        <result property="flgMasivo" column="flgMasivo"/>  
        <result property="flgAnulado" column="flgAnulado"/>  
        <result property="codigo" column="codigo"/>  
        <!-- Cambio Reporte -->
        <result property="grado" column="grado"/>  
        <result property="concepto" column="concepto"/>  
        <result property="anioRep" column="anioRep"/>  
        <result property="mesVista" column="mesVista"/>  
        <result property="mora" column="mora"/>  
        <result property="referenciaCuenta" column="referenciaCuenta"/>  
        
        <!-- CAMBIO DE REPORTE MASIVO --> 
        <result property="nomResPago" column="nomResPago" />
        <result property="vistaImpresion" column="vistaImpresion" />
        <result property="flgImpresion" column="flgImpresion" />
        <result property="vistaTipo" column="vistaTipo" />
        <association property="tipoCambioBean" column="idTC"
                     javaType="pe.marista.sigma.bean.TipoCambioBean"
                     resultMap="tipoCambioResultado"/>   
        <association property="cajaGenBean" column="idCajaGen"
                     javaType="pe.marista.sigma.bean.CajaGenBean"
                     resultMap="cajaGenResultado"/> 
        <association property="tipoStatusDocIng" column="idTipoStatusDocIng"
                     javaType="pe.marista.sigma.bean.CodigoBean"
                     resultMap="tipoStatusDocIngResultado"/>
        <association property="idTipoDoc" column="idTipoDoc"
                     javaType="pe.marista.sigma.bean.CodigoBean"
                     resultMap="tipoDocResultadoDocIng"/>
        <association property="idTipoModoPago" column="idTipoModoPago"
                     javaType="pe.marista.sigma.bean.CodigoBean"
                     resultMap="tipoModoPagoResultadoDocIng"/>
        <association property="idTipoLugarPago" column="idTipoLugarPago"
                     javaType="pe.marista.sigma.bean.CodigoBean"
                     resultMap="tipoLugarPagoResultadoDocIng"/>
       
    </resultMap>
     <!--idDocIngreso new full-->
    <resultMap id="docIngresoResultadoFull" type="pe.marista.sigma.bean.DocIngresoBean">
        <id property="idDocIngreso" column="idDocIngreso"/>       
        <result property="uniNeg" column="uniNeg"/>                       
        <result property="serie" column="serie"/> 
        <result property="nroDoc" column="nroDoc"/> 
        <result property="fechaPago" column="fechaPago"/> 
        <result property="codDiscente" column="codDiscente"/> 
        <result property="nombreDiscente" column="nombreDiscente"/> 
        <result property="anio" column="anio"/> 
        <result property="seccion" column="seccion"/>         
        <result property="idRespPago" column="idRespPago" />
        <result property="nomResPago" column="nomResPago" />
        <result property="direccion" column="direccion" />
        <result property="telefono" column="telefono" />
        <result property="obs" column="obs" />        
        <result property="fechaPago" column="fechaPago"/>  
        <result property="idEstudianteBeca" column="idEstudianteBeca"/>  
        <result property="beca" column="beca"/>               
        <result property="creaPor" column="creaPor"/>
        <result property="creaFecha" column="creaFecha"/>
        <result property="modiPor" column="modiPor"/>          
        <result property="montoPos1" column="montoPos1"/>
        <result property="montoPos2" column="montoPos2"/>
        <result property="montoEfectivoSol" column="montoEfectivoSol"/>
        <result property="montoEfectivoDol" column="montoEfectivoDol"/>            
        <result property="tc" column="tc"/>         
        <result property="creaFechaStatus" column="creaFechaStatus"/>  
        <result property="creaStatus" column="creaStatus"/>  
        <!--<result property="idCtaxCobrar" column="idCtaxCobrar"/>-->         
        <result property="flgMasivo" column="flgMasivo"/>  
        <result property="flgAnulado" column="flgAnulado"/>  
        <result property="idCajaGenAnulado" column="idCajaGenAnulado"/>  
        <result property="nombreCajaAnulado" column="nombreCajaAnulado"/>           
        <result property="idGradoAcademico" column="idGradoAcademicoDoc"/>
        <result property="nombreGraAca" column="nombreGraAcaDoc"/>
         
        <result property="flgCajaGenNull" column="flgCajaGenNull"/>
        <result property="flgCajaGenAnuladoNull" column="flgCajaGenAnuladoNull"/>
        <result property="flgFechaPagoNull" column="flgFechaPagoNull"/>
        <result property="flgFechaEstNull" column="flgFechaEstNull"/>
        <association property="cajaGenBean" column="idCajaGen"
                     javaType="pe.marista.sigma.bean.CajaGenBean"
                     resultMap="cajaGenResultado2"/>
        <association property="impresoraCajaBean" column="impresora"
                     javaType="pe.marista.sigma.bean.ImpresoraCajaBean"
                     resultMap="impresoraCajaResultado2"/>         
        <association property="tipoStatusDocIng" column="idTipoStatusDocIng"
                     javaType="pe.marista.sigma.bean.CodigoBean"
                     resultMap="tipoStatusDocIngResultado"/>
        <association property="idTipoDoc" column="idTipoDoc"
                     javaType="pe.marista.sigma.bean.CodigoBean"
                     resultMap="tipoDocResultadoDocIng"/>
        <association property="idTipoModoPago" column="idTipoModoPago"
                     javaType="pe.marista.sigma.bean.CodigoBean"
                     resultMap="tipoModoPagoResultadoDocIng"/>
        <association property="idTipoLugarPago" column="idTipoLugarPago"
                     javaType="pe.marista.sigma.bean.CodigoBean"
                     resultMap="tipoLugarPagoResultadoDocIng"/>        
        <association property="tipoCambioBean" column="idTC"
                     javaType="pe.marista.sigma.bean.TipoCambioBean"
                     resultMap="tipoCambioResultado"/>          
    </resultMap>
    <resultMap id="tipoStatusDocIngResultado" type="pe.marista.sigma.bean.CodigoBean">
        <id property="idCodigo" column="idTipoStatusDocIng"/>
        <result property="codigo" column="estadoDoc"/>
        <result property="codigo" column="codTipoStatusDocIng"/>
    </resultMap>
    <resultMap id="tipoDocResultadoDocIng" type="pe.marista.sigma.bean.CodigoBean">
        <id property="idCodigo" column="idTipoDoc"/>
        <result property="codigo" column="codTipoDoc"/>
        <result property="codigo" column="codigo"/>
    </resultMap>
    <resultMap id="tipoModoPagoResultadoDocIng" type="pe.marista.sigma.bean.CodigoBean">
        <id property="idCodigo" column="idTipoModoPago"/>
        <result property="codigo" column="modoPago"/>
        <result property="codigo" column="codTipoModoPago"/>
    </resultMap>
    <resultMap id="tipoLugarPagoResultadoDocIng" type="pe.marista.sigma.bean.CodigoBean">
        <id property="idCodigo" column="idTipoLugarPago"/>
        <result property="codigo" column="lugarPago"/>
        <result property="codigo" column="codTipoLugarPago"/>
    </resultMap>   
    <resultMap id="tipoCambioResultado" type="pe.marista.sigma.bean.TipoCambioBean">
        <id property="idTipoMoneda" column="idTC"/>
        <result property="tcVenta" column="tcVenta"/>
        <result property="tcCompra" column="tcCompra"/> 
    </resultMap>   
    <!--cr-->
    <resultMap id="centroResponsabilidadResultado" type="pe.marista.sigma.bean.CentroResponsabilidadBean">
        <id property="cr" column="cr"/>
        <result property="nombre" column="nombreCr"/>
    </resultMap>
    <!--cuenta-->
    <resultMap id="planContableDResultado" type="pe.marista.sigma.bean.PlanContableBean">
        <id property="cuenta" column="cuentaD"/>
        <result property="nombre" column="nombreCuentaD"/>
    </resultMap>
    <!--idTipoMoneda-->
    <resultMap id="tipoMonedaResultado" type="pe.marista.sigma.bean.CodigoBean">
        <id property="idCodigo" column="idTipoMoneda"/>
        <result property="codigo" column="codigoMoneda"/>
    </resultMap>
    <!-- EstudianteBeca-->
    <resultMap id="estudianteBecaResultado" type="pe.marista.sigma.bean.EstudianteBecaBean">
        <id property="idEstudianteBeca" column="idEstudianteBeca"/>
        <association property="becaBean" column="idBeca"
                     javaType="pe.marista.sigma.bean.BecaBean"
                     resultMap="becaResultado"/>
        <association property="cronogramaPagoBean" column="mesInicio"
                     javaType="pe.marista.sigma.bean.CronogramaPagoBean"
                     resultMap="cronogramaPagoResultado"/>
    </resultMap>
    <!-- Beca -->
    <resultMap id="becaResultado" type="pe.marista.sigma.bean.BecaBean">
        <id property="idBeca" column="idBeca"/>
        <result property="nombre" column="nombreBeca"/>
        <result property="porcentaje" column="porcentaje"/>
    </resultMap>
    <!-- Cronograma -->
    <resultMap id="cronogramaPagoResultado" type="pe.marista.sigma.bean.CronogramaPagoBean">
        <id property="mes" column="mesInicio"/>
    </resultMap>
    
    <!--idTipoMotivoBeca-->
    <resultMap id="tipoBecaResultado" type="pe.marista.sigma.bean.CodigoBean">
        <id property="idCodigo" column="idTipoBeca"/>
        <result property="codigo" column="codigoTipoBeca"/>
    </resultMap>
    
    <!--tipoMotivoCondonacionResultado-->    
    <resultMap id="tipoMotivoCondonacionResultado" type="pe.marista.sigma.bean.CodigoBean">
        <id property="idCodigo" column="idTipoMotivoCondonacion"/>
        <result property="codigo" column="codigoMotivoCondonacion"/>
    </resultMap>
    
    <!--idTipoStatusCtaCte-->
    <resultMap id="tipoStatusCtaCteResultado" type="pe.marista.sigma.bean.CodigoBean">
        <id property="idCodigo" column="idTipoStatusCtaCte"/>
        <result property="codigo" column="codigoStatusCtaCte"/>
    </resultMap>
      
    <sql id="consultaCamposConceptoUniNeg">
        Select  
        conUniNeg.uniNeg,
        conUniNeg.idConcepto,
        cat.idTipoConcepto,
        cat.nombre as catNombre,
        substring(con.nombre,8,30) as nombre,
        con.flgShowEstudiante,
        con.flgShowExAlumno,
        con.flgShowExterno,
        con.flgProgramacion,
        con.flgPrecio,
        con.cuentad as cuentad,
        plnD.nombre as nombreCuentaD,
        con.cuentah as cuentah,
        plnH.nombre as nombreCuentaH,
        conUniNeg.importe,
        conUniNeg.flgDsctoEstudiante,
        conUniNeg.flgDsctoExAlumno,
        conUniNeg.flgDsctoHijoEmpleado,
        conUniNeg.flgDsctoHijoExAlumno,
        conUniNeg.flgDsctoExterno,
        conUniNeg.flgDsctoBeca,
        conUniNeg.dsctoAlumno,
        conUniNeg.dsctoEmpleado,
        conUniNeg.dsctoExAlumno,
        conUniNeg.dsctoExterno,
        conUniNeg.status,
        conUniNeg.creaPor,
        conUniNeg.creaFecha
        From MT_ConceptoUniNeg conUniNeg
        Inner Join MT_Concepto con On conUniNeg.idConcepto=con.idConcepto
        Inner Join MT_TipoConcepto cat ON con.idTipoConcepto=cat.idTipoConcepto
        Left Join MT_PlanContable plnD ON con.cuentad = plnD.cuenta
        Left Join MT_PlanContable plnH ON con.cuentah = plnH.cuenta
    </sql>
    
    <resultMap id="conceptoUniNegResultado" type="pe.marista.sigma.bean.ConceptoUniNegBean">
        <id property="conceptoBean.idConcepto" column="idConcepto"/>
        <id property="unidadNegocioBean.uniNeg" column="uniNeg"/>
        <result property="importe" column="importe"/>
        <result property="flgDsctoEstudiante" column="flgDsctoEstudiante"/>
        <result property="flgDsctoExAlumno" column="flgDsctoExAlumno"/>
        <result property="flgDsctoHijoEmpleado" column="flgDsctoHijoEmpleado"/>
        <result property="flgDsctoHijoExAlumno" column="flgDsctoHijoExAlumno"/>
        <result property="flgDsctoExterno" column="flgDsctoExterno"/>
        <result property="flgDsctoBeca" column="flgDsctoBeca"/>
        <result property="dsctoAlumno" column="dsctoAlumno"/>
        <result property="dsctoEmpleado" column="dsctoEmpleado"/>
        <result property="dsctoExAlumno" column="dsctoExAlumno"/>
        <result property="dsctoExterno" column="dsctoExterno"/>
        <result property="status" column="status"/>
        <result property="creaPor" column="creaPor"/>
        <result property="creaFecha" column="creaFecha"/>
        <association property="conceptoBean" column="idConcepto"
                     javaType="pe.marista.sigma.bean.ConceptoBean"
                     resultMap="conceptoResultado"/>
        <association property="unidadNegocioBean" column="uniNeg"
                     javaType="pe.marista.sigma.bean.UnidadNegocioBean"
                     resultMap="unidadNegocioResultado"/>
    </resultMap>
    <resultMap id="conceptoResultado" type="pe.marista.sigma.bean.ConceptoBean">
        <id property="idConcepto" column="idConcepto"/>
        <result property="nombre" column="nombre"/>
        <result property="flgShowEstudiante" column="flgShowEstudiante"/>
        <result property="flgShowExAlumno" column="flgShowExAlumno"/>
        <result property="flgShowExterno" column="flgShowExterno"/>
        <result property="flgProgramacion" column="flgProgramacion"/>
        <result property="flgPrecio" column="flgPrecio"/>
        <association property="planContableCuentaDBean" column="cuentad"
                     javaType="pe.marista.sigma.bean.PlanContableBean"
                     resultMap="planContableDResultadoCON"/>
        <association property="planContableCuentaHBean" column="cuentah"
                     javaType="pe.marista.sigma.bean.PlanContableBean"
                     resultMap="planContableHResultado"/>
        <association property="tipoConceptoBean" column="idTipoConcepto"
                     javaType="pe.marista.sigma.bean.TipoConceptoBean"
                     resultMap="tipoConceptoResultado"/>
    </resultMap>
    <resultMap id="planContableDResultadoCON" type="pe.marista.sigma.bean.PlanContableBean">
        <id property="cuenta" column="cuentad"/>
        <result property="nombre" column="nombreCuentaD"/>
    </resultMap>
    <resultMap id="planContableHResultado" type="pe.marista.sigma.bean.PlanContableBean">
        <id property="cuenta" column="cuentah"/>
        <result property="nombre" column="nombreCuentaH"/>
    </resultMap>
    <resultMap id="tipoConceptoResultado" type="pe.marista.sigma.bean.TipoConceptoBean">
        <id property="idTipoConcepto" column="idTipoConcepto"/>
        <result property="nombre" column="catNombre"/>
    </resultMap>
    
    <select id="obtenerCuentaPorMatricula" resultMap="ctasXCobrarResultado" parameterType="String">
        <include refid="consultaCtasXCobrar"/> Where cta.idEstudiante = #{idPersona} order by cta.idCtasXCobrar
    </select>  
    <select id="obtenerTipoDiscente" resultType="pe.marista.sigma.bean.TipoDiscenteBean" parameterType="map">
        select flgAlu,flgExa,flgHem,flgHex,flgExt from dbo.TipoDiscente(#{idPersona},#{anio},#{uniNeg});
    </select>
    <select id="obtenerMontosAntiguaCajaGen" resultMap="docIngresoResultadoFull" parameterType="map">
        select sum(montoefectivosol) as montoEfectivoSol,sum(montoefectivodol) as montoEfectivoDol,
        sum(montopos1) as montoPos1,sum(montopos2) as montoPos2 from 
        MT_DocIngreso
        where idcajagen=#{idCajaGen}
    </select>
    
    <select id="buscarPersona" resultMap="personaResultado" parameterType="pe.marista.sigma.bean.PersonaBean">
        <include refid="consultaPersona"/>
        <where>
            per.uniNeg = #{unidadNegocioBean.uniNeg}
            <if test="nroDoc != null and nroDoc != ''">
                and upper(per.nroDoc) like concat('%',#{nroDoc},'%')
            </if>
            <if test="nombreFiltro != null and nombreFiltro != ''">
                and upper(CONCAT(per.apepat ,' ',per.apemat,' ',per.nombre)) like concat('%',#{nombreFiltro},'%')
            </if>
        </where>
    </select>
    
    <select id="obtenerConcepto" resultMap="conceptoUniNegResultado" parameterType="pe.marista.sigma.bean.PersonaBean">
        <include refid="consultaCamposConceptoUniNeg"/> Where conUniNeg.uniNeg=#{uniNegUsuario}
        <if test="filtro == 1 ">
            AND con.flgshowestudiante = 1  
            AND cat.idTipoConcepto ! = 101           
        </if>
        <if test="filtro == 2 ">
            AND con.flgshowexalumno = 1 
        </if>
        <if test="filtro == 3 ">
            AND con.flgshowexterno = 1 
        </if>
    </select>
  
    <select id="buscarPersonaPostulante" resultMap="personaResultado" parameterType="map">
        <include refid="consultaPersona"/> 
        Left Join MX_Estudiante est ON est.idestudiante = per.idPersona
        Left Join MO_Codigo cod2 ON est.idtipostatusest = cod2.idcodigo
        where cod2.codigo=#{parms.codigo} and  per.uniNeg = #{parms.uniNeg} and per.idPersona=#{parms.idPersona}
    </select>
    <select id="buscarPersonaInscPostulante" resultMap="personaResultado" parameterType="map">
        <include refid="consultaPersona"/> 
        Left Join MX_Estudiante est ON est.idestudiante = per.idPersona and est.unineg=per.unineg
        Inner Join MX_Admision adm ON adm.idEstudiante=est.idEstudiante  and adm.unineg=est.unineg
        Inner Join MO_Codigo cod2 On adm.idTipoStatusPostulante=cod2.idCodigo 
        where cod2.codigo=#{parms.codigo} and  adm.anio=#{parms.anio} and per.uniNeg = #{parms.uniNeg} and per.idPersona=#{parms.idPersona}
    </select>
    <select id="buscarPersonaMatriculado" resultMap="personaResultado" parameterType="map">
        <include refid="consultaPersona"/> 
        Left Join MX_Estudiante est ON est.idestudiante = per.idPersona and est.unineg=per.unineg
        Inner Join MX_Matricula mat On mat.idEstudiante=est.idEstudiante and mat.unineg=est.unineg
        left Join MT_CtasxCobrar cta ON cta.idestudiante = est.idestudiante and cta.unineg=est.unineg
        WHERE mat.uniNeg = #{parms.uniNeg} and mat.anio in (#{parms.anio},#{parms.anio}-1) and per.idPersona=#{parms.idPersona}
    </select>
    
    <sql id="consultaImpresoraCaja">    
        Select 
        distinct 
        imCa.uniNeg			as uniNeg,
        imCa.impresora                  as impresora,
        cjCaja.idCaja			as idCaja,
        imp.actual			as actual,
        cjCaja.usuario                  as usuario,
        isnull(imp.idcheque,0)          as idCheque  
        From MT_ImpresoraCaja imCa
        Inner Join MT_Impresora imp on imp.impresora = imCa.impresora and imCa.unineg=imp.unineg
        Inner Join MO_Codigo cod on cod.idcodigo = imp.idtipodoc
        Inner Join MT_CajeroCaja cjCaja on cjCaja.idcaja= imCa.idcaja and  cjCaja.unineg=imCa.unineg
        Inner Join MT_Caja caj	on caj.idcaja = cjCaja.idcaja and  caj.unineg=imCa.unineg
    </sql>
    
    <resultMap id="impresoraResultado" type="pe.marista.sigma.bean.ImpresoraBean">
        <id property="impresora" column="impresora"/>
        <id property="idTipoDoc.idCodigo" column="idTipoDoc"/>
        <id property="unidadNegocioBean.uniNeg" column="uniNeg"/> 
        <result property="serie" column="serie"/>    
        <result property="inicio" column="inicio"/>
        <result property="fin" column="fin"/>
        <result property="actual" column="actual"/>
        <association property="idTipoDoc" column="idTipoDoc"
                     javaType="pe.marista.sigma.bean.CodigoBean"
                     resultMap="tipoDocResultado"/>
        <association property="unidadNegocioBean" column="unineg"
                     javaType="pe.marista.sigma.bean.UnidadNegocioBean"
                     resultMap="unidadNegocioResultado"/>
        <association property="chequeBean" column="idCheque"
                     javaType="pe.marista.sigma.bean.ChequeBean"
                     resultMap="chequeResultado"/>
    </resultMap>  
    <resultMap id="chequeResultado" type="pe.marista.sigma.bean.ChequeBean">
        <id property="unidadNegocioBean.uniNeg" column="uniNegCheque"/>
        <id property="idCheque" column="idCheque"/> 
        <result property="nombre" column="nombreCheque"/> 
        <result property="inicio" column="inicio"/> 
        <result property="fin" column="fin"/> 
        <result property="actual" column="actual"/> 
        <result property="status" column="status"/> 
        <association property="unidadNegocioBean" column="uniNegCheque"
                     javaType="pe.marista.sigma.bean.UnidadNegocioBean"
                     resultMap="unidadNegocioResultadoCheque"/>
    </resultMap>
    <resultMap id="unidadNegocioResultadoCheque" type="pe.marista.sigma.bean.UnidadNegocioBean">
        <id property="uniNeg" column="uniNegCheque"/>
        <result property="nombreUniNeg" column="nombreUniNegCheque"/> 
    </resultMap> 
      
    <select id="obtenerImpresoraCajero" resultMap="impresoraResultado" parameterType="pe.marista.sigma.bean.CajeroCajaBean">
        <include refid="consultaImpresoraCaja"/> 
        Where cjCaja.usuario = #{usuarioBean.usuario} and imCa.uniNeg=#{unidadNegocioBean.uniNeg} and caj.hostip=#{cajaBean.hostIp}
        and imp.status=1 
    </select>
    <select id="obtenerImpresoraCajeroPensiones" resultMap="impresoraResultado" parameterType="pe.marista.sigma.bean.CajeroCajaBean">
        <include refid="consultaImpresoraCaja"/> 
        Where cjCaja.usuario = #{usuarioBean.usuario} and imCa.uniNeg=#{unidadNegocioBean.uniNeg} 
        <!--and caj.hostip=#{cajaBean.hostIp}-->
        and imp.impresora like '%RECIBOS' 
        <!--and imp.status=1 -->
    </select>
    <select id="obtenerImpresoraCajeroDocEgreso" resultMap="impresoraResultado" parameterType="pe.marista.sigma.bean.CajeroCajaBean">
        Select 
        distinct 
        imCa.uniNeg			as uniNeg,
        imCa.impresora                  as impresora,
        cjCaja.idCaja			as idCaja, 
        cjCaja.usuario                  as usuario  
        From MT_ImpresoraCaja imCa
        Inner Join MT_Impresora imp on imp.impresora = imCa.impresora and imCa.unineg=imp.unineg
        Inner Join MO_Codigo cod on cod.idcodigo = imp.idtipodoc
        Inner Join MT_CajeroCaja cjCaja on cjCaja.idcaja= imCa.idcaja and  cjCaja.unineg=imCa.unineg
        Inner Join MT_Caja caj	on caj.idcaja = cjCaja.idcaja and  caj.unineg=imCa.unineg
        Where cjCaja.usuario = #{usuarioBean.usuario} and imCa.uniNeg=#{unidadNegocioBean.uniNeg} and caj.hostip=#{cajaBean.hostIp}
        and imp.status=1
    </select>  
    <sql id="consultaDocumentoPorImpresora">    
        Select 
        distinct 
        imCa.uniNeg			as uniNeg,
        imCa.impresora                  as impresora,
        cjCaja.idCaja			as idCaja,
        imp.serie			as serie,
        imp.inicio			as inicio,
        imp.fin				as fin,
        imp.actual			as actual,
        imp.idtipodoc                   as idTipoDoc,
        cod.codigo			as nomTipoDoc,
        cjCaja.usuario                  as usuario,
        imCa.status                     as statusIC
        From MT_ImpresoraCaja imCa
        Inner Join MT_Impresora imp on imp.impresora = imCa.impresora and imp.unineg=imCa.unineg
        Inner Join MO_Codigo cod on cod.idcodigo = imp.idtipodoc
        Inner Join MT_CajeroCaja cjCaja on cjCaja.idcaja= imCa.idcaja
    </sql>    
    <resultMap id="impresoraCajaResultado" type="pe.marista.sigma.bean.ImpresoraCajaBean">        
        <id property="cajaBean.idCaja" column="idCaja"/>
        <id property="impresora.impresora" column="impresora"/>
        <id property="uniNeg.unidadNegocioBean.uniNeg" column="uniNeg"/>
        <id property="idTipoDoc.idTipoDoc.idCodigo" column="idTipoDoc"/>
        <result property="status" column="statusIC"/>
        <association property="uniNeg" column="uniNeg" 
                     javaType="pe.marista.sigma.bean.ImpresoraBean" 
                     resultMap="uniNegResultado"/>
        <association property="idTipoDoc" column="idTipoDoc" 
                     javaType="pe.marista.sigma.bean.ImpresoraBean" 
                     resultMap="idTipoDocResultado"/>
        <association property="impresora" column="impresora" 
                     javaType="pe.marista.sigma.bean.ImpresoraBean" 
                     resultMap="impresoraResultado"/>
        <association property="cajaBean" column="idCaja" 
                     javaType="pe.marista.sigma.bean.CajaBean" 
                     resultMap="cajaResultado"/>
    </resultMap>
    <resultMap id="impresoraCajaResultado2" type="pe.marista.sigma.bean.ImpresoraCajaBean">        
        <id property="cajaBean.idCaja" column="idCaja"/>
        <id property="impresora.impresora" column="impresora"/>  
    </resultMap>
    <resultMap id="uniNegResultado" type="pe.marista.sigma.bean.ImpresoraBean">
        <id property="unidadNegocioBean.uniNeg" column="uniNeg"/>
        <association property="unidadNegocioBean" column="uniNeg"
                     javaType="pe.marista.sigma.bean.UnidadNegocioBean"
                     resultMap="unidadNegocioResultado"/>
    </resultMap>
    <resultMap id="idTipoDocResultado" type="pe.marista.sigma.bean.ImpresoraBean">
        <id property="idTipoDoc.idCodigo" column="idTipoDoc"/>
        <association property="idTipoDoc" column="idTipoDoc"
                     javaType="pe.marista.sigma.bean.CodigoBean"
                     resultMap="tipoDocResultado"/>
    </resultMap>
    
    <resultMap id="tipoDocResultado" type="pe.marista.sigma.bean.CodigoBean">
        <id property="idCodigo" column="idTipoDoc"/>
        <result property="codigo" column="nomTipoDoc"/>
    </resultMap>
    
    <resultMap id="cajaResultado" type="pe.marista.sigma.bean.CajaBean">
        <id property="idCaja" column="idCaja"/>
        <result property="nombre" column="nombre"/>
        <result property="nombre" column="nombreCaja"/>
        <result property="hostIp" column="hostIp"/>
        <result property="hostName" column="hostName"/>
        <result property="mac" column="mac"/>
        <result property="creaPor" column="creaPor"/>
        <result property="creaFecha" column="creaFecha"  jdbcType="DATE"/>
        <result property="status" column="status"/>
        <association property="unidadNegocioBean" column="uniNeg"
                     javaType="pe.marista.sigma.bean.UnidadNegocioBean"
                     resultMap="unidadNegocioResultado"/>
    </resultMap>
        
    <select id="obtenerTipDocumentoPorImpresora" resultMap="tipoDocResultado" parameterType="map">
        <include refid="consultaDocumentoPorImpresora"/> 
        Where imCa.impresora = #{impresora} and cjCaja.usuario = #{usuario} and imCa.uniNeg=#{uniNeg} and imp.status=1 and  imCa.idCaja=#{idCaja} 
        order by cod.codigo desc
    </select>  
    <select id="obtenerTipDocumentoPorImpresoraPensiones" resultMap="tipoDocResultado" parameterType="map">
        <include refid="consultaDocumentoPorImpresora"/> 
        Where imCa.impresora = #{impresora} and cjCaja.usuario = #{usuario} and imCa.uniNeg=#{uniNeg} 
        <!--and imp.status=1 -->
        and  imCa.idCaja=#{idCaja} 
        order by cod.codigo desc
    </select>  
    <select id="obtenerTipDocumentoPorImpresoraComprobante" resultMap="tipoDocResultado" parameterType="map">
        <include refid="consultaDocumentoPorImpresora"/> 
        Where imCa.impresora = #{impresora} and cjCaja.usuario = #{usuario} and imCa.uniNeg=#{uniNeg} and imp.status=1 and  imCa.idCaja=#{idCaja} 
        <!-- and cod.codigo='Comprobante'-->
        order by cod.codigo  
    </select>  
    
    <select id="obtenerDetalleTipoDoc" resultMap="impresoraCajaResultado" parameterType="map">
        <include refid="consultaDocumentoPorImpresora"/> 
        Where imCa.impresora = #{impresora} and cjCaja.usuario = #{usuario} and imCa.uniNeg=#{uniNeg} and imp.idtipodoc=#{idTipoDoc} 
        and imCa.idCaja=#{idCaja}
    </select>  
    
    <insert id="insertarDocIngreso" parameterType="pe.marista.sigma.bean.DocIngresoBean">
        INSERT INTO MT_DocIngreso 
        (unineg,
        impresora,
        idtipodoc,
        idcaja,
        idcajagen,
        serie,
        nrodoc,
        iddiscente,
        discente,
        seccion,
        idgradoacademico,
        idresppago,
        resppago, 
        ruc,
        anio,
        direccion,
        telefono,
        obs,
        idtipolugarpago,
        idtipomodopago,
        fechapago,
        idestudiantebeca,
        idtipomoneda,
        status,
        chequeo,
        creapor,
        creafecha,
        montoPos1,
        montoPos2,
        montoEfectivoSol,
        montoEfectivoDol,
        idtipocambio,
        tc,
        idtipostatusdocing,
        flgMasivo
        )
        Values (
        #{unidadNegocioBean.uniNeg},
        #{impresoraCajaBean.impresora.impresora},
        #{impresoraCajaBean.idTipoDoc.idTipoDoc.idCodigo},
        #{impresoraCajaBean.cajaBean.idCaja},
        #{cajaGenBean.idCajaGen},
        #{impresoraCajaBean.impresora.serie},        
        #{impresoraCajaBean.impresora.actual}, 
        <if test="idDiscente.idPersona != null">
            #{idDiscente.idPersona},
            #{idDiscente.nombreCompleto},
        </if>
        <if test="idDiscente.idPersona == null and personalBean.idPersonal != null">
            #{personalBean.idPersonal},
            #{personalBean.nombreCompleto},
        </if>
        #{cuentasPorCobrarBean.estudianteBean.seccion},
        #{cuentasPorCobrarBean.estudianteBean.gradoHabilitado.idGradoAcademico},
        #{familiarBean.idPersona},
        #{familiarBean.nombreCompleto},
        #{ruc},
        #{anio},
        #{direccion},
        #{telefono},
        #{obs},
        #{idTipoLugarPago.idCodigo},
        #{idTipoModoPago.idCodigo},
        #{fechaPago},
        #{cuentasPorCobrarBean.estudianteBecaBean.idEstudianteBeca},
        #{idTipoMoneda.idCodigo},
        #{status},
        #{chequeo},        
        #{creaPor},
        #{creaFecha},
        
        #{montoPos1},
        #{montoPos2},
        #{montoEfectivoSol},
        #{montoEfectivoDol},
        #{tipoCambioBean.idTipoMoneda},
        #{tipoCambioBean.tcVenta},
        #{tipoStatusDocIng.idCodigo},
        #{flgMasivo}
        )
        <selectKey keyProperty="idDocIngreso" order="AFTER" resultType="Integer">
            SELECT max(idDocIngreso) FROM MT_DocIngreso  WHERE uniNeg = #{unidadNegocioBean.uniNeg}
        </selectKey>
    </insert> 
    <insert id="insertarDocIngresoDetalle" parameterType="pe.marista.sigma.bean.DetDocIngresoBean">
        INSERT INTO MT_DetDocIngreso (
        unineg
        ,iddocingreso
        ,idconcepto
        ,monto
        ,dscto
        ,dsctobeca
        ,montopagado
        ,idtipodscto
        ,idtipomotivodscto
        ,cuentad
        ,cuentah
        ,cr
        ,idctasxcobrar 
        ,creapor
        ,creafecha,montoSoles,montoDolares,mora,referencia,idprogramacion)
        Values (
        #{unidadNegocioBean.uniNeg},
        #{docIngresoBean.idDocIngreso},
        #{conceptoBean.idConcepto},
         convert(decimal(8,2),#{monto}),
        #{dscto},
        #{dsctoBeca},
         convert(decimal(8,2),#{montoPagado}),
        #{idTipoDscto.idCodigo},
        #{idTipoMotivoDscto.idCodigo},
        #{cuentaD.cuenta},
        #{cuentaH.cuenta},
        #{centroResponsabilidadBean.cr},
        #{cuentasPorCobrarBean.idCtasXCobrar},
        #{creaPor},
        #{creaFecha},#{montoSoles},#{montoDolares},#{mora},#{referencia},#{programacionBean.idProgramacion}
        )
    </insert>
    <update id="modificarPagoCtasXCobrar" parameterType="pe.marista.sigma.bean.CuentasPorCobrarBean">
        UPDATE MT_CtasxCobrar
        SET 
        iddocingreso = #{docIngresoBean.idDocIngreso},
        montopagado = #{montoPagado},
        fechapago = #{fechaPago},
        idtipostatusctacte = #{idTipoStatusCtaCte.idCodigo},
        deuda=0,
        flgRecGenerado=0
        Where unineg = #{unidadNegocioBean.uniNeg} 
        and idctasxcobrar =#{idCtasXCobrar} 
    </update>
    <update id="modificarImpresoraActual" parameterType="pe.marista.sigma.bean.ImpresoraBean">
        UPDATE MT_Impresora
        SET 
        actual = #{actual}
        WHERE  
        impresora = #{impresora}
        and unineg = #{unidadNegocioBean.uniNeg}
        and idTipoDoc = #{idTipoDoc.idCodigo}
    </update>
    
    <sql id="consultaCajaGen">
        SELECT
        cajGen.uniNeg
        ,uni.nombreUniNeg
        ,cajGen.idCajaGen
        ,cajGen.idCaja
        ,caj.nombre
        ,cajGen.usuario
        ,per.idPersonal
        ,per.nombre as nombrePersonal
        ,per.apePat
        ,per.apeMat
        ,cajGen.anio
        ,cajGen.idSuperviza
        ,cajGen.aperturaSol
        ,cajGen.aperturaDol
        ,cajGen.ingresoSol
        ,cajGen.ingresoDol
        ,cajGen.egresoSol
        ,cajGen.egresoDol
        ,cajGen.saldoSol
        ,cajGen.saldoDol
        ,cajGen.diferenciaSol
        ,cajGen.diferenciaDol
        ,cajGen.fecApertura
        ,cajGen.fecCierre
        ,cajGen.fecDeposito
        ,cajGen.rucBanco
        ,cajGen.numCuentaSol
        ,cajGen.numCuentaDol
        ,cajGen.numOperacionSol
        ,cajGen.numOperacionDol
        ,cajGen.montoDepositoSol
        ,cajGen.montoDepositoDol
        ,cajGen.creaPor
        ,cajGen.creaFecha
        ,cajGen.modipor
        FROM MT_CajaGen cajGen
        INNER JOIN MT_Caja caj ON caj.idcaja = cajGen.idcaja
        INNER JOIN MO_UnidadNegocio uni ON uni.uniNeg = cajGen.uniNeg
        INNER JOIN MM_Usuario usu ON usu.usuario = cajGen.usuario
        INNER JOIN MO_Personal per ON per.idpersonal = usu.idpersonal
    </sql>    
    <resultMap id="cajaGenResultado" type="pe.marista.sigma.bean.CajaGenBean">
        <id property="idCajaGen" column="idCajaGen"/>
        <result property="anio" column="anio"/>
        <result property="aperturaSol" column="aperturaSol"/>
        <result property="aperturaDol" column="aperturaDol"/>
        <result property="ingresoSol" column="ingresoSol"/>
        <result property="ingresoDol" column="ingresoDol"/>
        <result property="egresoSol" column="egresoSol"/>
        <result property="egresoDol" column="egresoDol"/>
        <result property="saldoSol" column="saldoSol"/>
        <result property="saldoDol" column="saldoDol"/>
        <result property="diferenciaSol" column="diferenciaSol"/>
        <result property="diferenciaDol" column="diferenciaDol"/>
        <result property="fecApertura" column="fecApertura"/>
        <result property="fecCierre" column="fecCierre"/>
        <result property="fecDeposito" column="fecDeposito"/>
        <result property="rucBanco" column="rucBanco"/>
        <result property="numCuentaSol" column="numCuentaSol"/>
        <result property="numCuentaDol" column="numCuentaDol"/>
        <result property="numOperacionSol" column="numOperacionSol"/>     
        <result property="numOperacionDol" column="numOperacionDol"/>        
        <result property="montoDepositoSol" column="montoDepositoSol"/>
        <result property="montoDepositoDol" column="montoDepositoDol"/>
        <result property="creaPor" column="creaPor"/>
        <result property="creaFecha" column="creaFecha"/>
        <result property="modiPor" column="modiPor"/>
        <association property="uniNeg" column="uniNeg"
                     javaType="pe.marista.sigma.bean.UnidadNegocioBean"
                     resultMap="unidadNegocioResultado"/>
        <association property="cajaBean" column="idCaja"
                     javaType="pe.marista.sigma.bean.CajaBean"
                     resultMap="cajaResultado"/>
        <association property="usuarioBean" column="usuario"
                     javaType="pe.marista.sigma.bean.UsuarioBean"
                     resultMap="usuarioResultado"/>
    </resultMap>
    <resultMap id="cajaGenResultado2" type="pe.marista.sigma.bean.CajaGenBean">
        <id property="idCajaGen" column="idCajaGen"/>
        <id property="fecApertura" column="fecApertura"/>
        <id property="fechaAperturaView" column="fechaAperturaView"/>
        <result property="anio" column="anio"/> 
        <association property="uniNeg" column="uniNeg"
                     javaType="pe.marista.sigma.bean.UnidadNegocioBean"
                     resultMap="unidadNegocioResultado"/> 
        <association property="cajaBean" column="idCaja"
                     javaType="pe.marista.sigma.bean.CajaBean"
                     resultMap="cajaResultado"/>
    </resultMap>
    <!--usuarioResultado-->
    <resultMap id="usuarioResultado" type="pe.marista.sigma.bean.UsuarioBean">
        <id property="usuario" column="usuario" />
        <association property="personalBean" column="idPersonal" 
                     javaType="pe.marista.sigma.bean.PersonalBean" 
                     resultMap="personalResultado"/>
    </resultMap>
    <resultMap id="personalResultado" type="pe.marista.sigma.bean.PersonalBean">
        <id property="idPersonal" column="idPersonal" />
        <result property="nombre" column="nombrePersonal" />
        <result property="apepat" column="apePat" />
        <result property="apemat" column="apeMat" />
    </resultMap>  
    <select id="obtenerCajaGeneral" resultMap="cajaGenResultado" parameterType="pe.marista.sigma.bean.CajaBean">
        <include refid="consultaCajaGen"/> Where cajGen.idCaja = #{idCaja} and cajGen.uniNeg=#{unidadNegocioBean.uniNeg}
    </select>   
    <select id="obtenerDocIngreso" resultType="pe.marista.sigma.bean.reporte.DocIngresoRepBean" parameterType="pe.marista.sigma.bean.DocIngresoBean">
        declare 
        @dscto decimal(8,2)=(select sum(isnull(dscto,0)) from MT_DetDocIngreso where  iddocingreso = #{idDocIngreso} and unineg =#{unidadNegocioBean.uniNeg} )
        select 
        distinct
        (case when isnull(@dscto,0)<![CDATA[ > ]]>0 then 1 else 0 end) as flgDscto
        ,upper(isnull(ent.nombrecomercial,(select upper(isnull(nombreUniNeg,'')) from MO_UnidadNegocio where unineg=#{unidadNegocioBean.uniNeg})))    as nombre
        ,ent.ruc                                                                                            as ruc
        ,ent.direccion                                                                                      as direccion
        ,isnull(dis.nombre,'')                                                                              as nomDistrito
        ,(case when ent.telefono is not null and ent.telefono!=' ' then 'Telfs.: '+ent.telefono else ' ' end) as telefono
        ,(case when ent.correo is not null and ent.correo!=' '  then 'E-mail: '+ent.correo else ' ' end) as correo
        ,doc.iddocingreso                                                                                   as idDocIngreso   
        ,upper(cod.codigo)                                                                                  as codigo 
        ,doc.serie                                                                                          as serie
        ,(doc.serie+' - '+right(replicate('0', 7) + rtrim(doc.nrodoc), 7))                                  as serieNroDoc
        ,right(replicate('0', 7) + rtrim(doc.nrodoc), 7)                                                    as nroDoc
        ,doc.iddiscente                                                                                     as idDiscente 
        ,doc.discente +(case when est.codigo is not null and est.codigo !=''  and est.unineg='SANJOC'
	 then ' - '+est.codigo+'' else ' '  end)                                                    as discente
        ,doc.ruc                                                                                            as rucDiscente         
        ,isnull(est.idEstudiante,'')                                                                        as codEstudiante                       
        ,isnull(est.seccion,'')                                                                             as seccion
        ,gra.idgradoacademico                                                                               as idGradoAcademico             
        ,isnull(PARSENAME(LTRIM(REPLACE(PARSENAME(REPLACE(gra2.nombre,niv2.nombre,''),1),'Pre-','')),1) ,'')  as nombreGrado
        ,isnull(niv2.nombre,'')                                                                              as nombreNivel                                                                                      
        ,doc.idresppago                                                                                     as idResPago
        ,doc.resppago                                                                                       as resPago
        ,per.nrodoc                                                                                         as dni
        ,doc.ruc                                                                                            as rucDoc
        ,doc.anio                                                                                           as anio        
        ,(CASE WHEN doc.fechapago IS NOT NULL THEN  CONVERT(VARCHAR(10), doc.fechapago, 103) + ' '  + convert(VARCHAR(8), doc.fechapago, 14) ELSE ' /  /' END) as  fechaPago
        ,lug.codigo                                                                                         as lugarPago
        ,mop.codigo                                                                                         as modoPago
        ,doc.idestudiantebeca                                                                               as idEstudianteBeca
        ,doc.tc                                                                                             as tc 
        ,caj.nombre                                                                                         as caja
        ,(case when doc.idtipomoneda=14901 
        then 
        (Select dbo.CantidadConLetra( (select sum(montoPagado)
        from MT_DetDocIngreso Where iddocingreso =#{idDocIngreso} and uniNeg=#{unidadNegocioBean.uniNeg} ))
        ) + ' '+'SOLES' 
        else (dbo.CantidadConLetra(CONVERT(float,(ROUND(((select sum(montoPagado)from MT_DetDocIngreso
        Where iddocingreso =#{idDocIngreso} and uniNeg=#{unidadNegocioBean.uniNeg}))<!--/doc.tc-->, 2))))) 
        +' ' +'DÓLARES AMERICANOS' end) as textoMonto 
        FROM MT_DocIngreso doc                                                                          
        LEFT JOIN MO_Codigo cod ON cod.idcodigo = doc.idtipodoc
        LEFT JOIN MT_Impresora imp ON imp.impresora = doc.impresora and imp.unineg=doc.unineg
        LEFT JOIN MX_Estudiante est ON est.idestudiante = doc.iddiscente and est.unineg=doc.unineg
        LEFT JOIN MX_Matricula ma ON est.idestudiante = ma.idestudiante  
        LEFT JOIN MX_GradoAcademico gra ON gra.idgradoacademico = est.idgradohabilitado
        LEFT JOIN MX_GradoAcademico gra2 ON gra2.idgradoacademico = ma.idgradoacademico
        LEFT JOIN MX_NivelAcademico niv ON niv.idnivelacademico = gra.idnivelacademico
        LEFT JOIN MX_NivelAcademico niv2 ON niv.idnivelacademico = gra2.idnivelacademico
        LEFT JOIN MO_UnidadNegocio uni ON uni.unineg = doc.unineg
        LEFT JOIN MO_Entidad ent ON ent.ruc = uni.RUC and uni.unineg=ent.unineg
        LEFT JOIN MO_Distrito dis ON dis.iddistrito = ent.iddistrito 
        LEFT JOIN MO_Codigo lug ON lug.idcodigo = doc.idtipolugarpago
        LEFT JOIN MO_Codigo mop ON mop.idcodigo = doc.idtipomodopago 
        LEFT JOIN MX_Persona per ON per.idpersona = doc.idresppago      and per.unineg=doc.unineg
        LEFT join MT_Caja caj on caj.idcaja=doc.idcaja and caj.unineg=doc.unineg
        where doc.iddocingreso = #{idDocIngreso} and doc.unineg =#{unidadNegocioBean.uniNeg} 
    </select>
    <select id="obtenerDocIngresoCuotaPorDiscente" resultType="pe.marista.sigma.bean.DocIngresoBean" resultMap="docIngresoResultado" parameterType="map" >
        select doc.iddocingreso  as idDocIngreso ,doc.unineg as uniNeg   
        from MT_DetDocIngreso  det
        inner join MT_DocIngreso doc on doc.iddocingreso=det.iddocingreso and doc.unineg=det.unineg
        where det.idconcepto in (select con.idconcepto from MT_ConceptoUniNeg cun
        inner join  MT_Concepto con on con.idconcepto = cun.idconcepto  
        where cun.unineg=#{uniNeg}  and con.nombre like concat('%',#{concepto},'%') and con.status=1 ) and doc.iddiscente=#{idDiscente} and doc.unineg=#{uniNeg} 
    </select>
    <select id="obtenerDocIngresoPorId" resultType="pe.marista.sigma.bean.DocIngresoBean" resultMap="docIngresoResultado" parameterType="map" >
        select 
        distinct
        doc.unineg                                                                                          as uniNeg
        ,doc.iddocingreso                                                                                   as idDocIngreso   
        ,upper(cod.codigo)                                                                                  as codigo
        ,doc.idcajagen                                                                                      as idCajaGen
        ,(doc.serie+' - '+right(replicate('0', 7) + rtrim(doc.nrodoc), 7))                                  as serieNroDoc
        ,doc.iddiscente                                                                                     as codDiscente 
        ,doc.obs                                                                                            as obs 
        ,doc.discente                                                                                       as nombreDiscente
        , (select convert(varchar,doc.fechapago,103))                                                       as fechaPagoVista 
        ,mop.codigo                                                                                         as modoPago
        ,doc.tc                                                                                             as tc
        ,caj.nombre                                                                                         as caja 
        ,sta.codigo                                                                                         as estadoDoc
        ,sta.idCodigo                                                                                       as idTipoStatusDocIng 
        , mon.codigo                                                                                        as tipoMoneda 
        ,isnull(montoefectivosol,0)                                                                         as montoEfectivoSol																			 
        ,isnull((montoefectivodol),0)							 	            as montoefectivodol
        ,isnull(montopos1,0)                                                                                as montoPos1
        ,isnull(montopos2,0)										    as montoPos2
        ,(select sum(isnull(montoefectivosol,0)+isnull(montopos1,0)+isnull(montopos2,0))
        from MT_DocIngreso ddoc where ddoc.iddocingreso=doc.iddocingreso 
        and ddoc.unineg =#{uniNeg})                                                       as montoPagadoSol
        ,(select sum(montoefectivodol)
        from MT_DocIngreso ddoc where ddoc.iddocingreso=doc.iddocingreso 
        and ddoc.unineg =#{uniNeg})                                                       as montoPagadoDol
        FROM MT_DocIngreso doc                                                                          
        LEFT JOIN MO_Codigo cod ON cod.idcodigo = doc.idtipodoc
        LEFT JOIN MT_Impresora imp ON imp.impresora = doc.impresora and imp.unineg=doc.unineg 
        LEFT JOIN MO_UnidadNegocio uni ON uni.unineg = doc.unineg 
        LEFT JOIN MO_Codigo mop ON mop.idcodigo = doc.idtipomodopago
        LEFT JOIN MX_Persona per ON per.idpersona = doc.idresppago and per.unineg=doc.unineg     
        LEFT join MT_Caja caj on caj.idcaja=doc.idcaja and caj.unineg=doc.unineg 
        left join MO_Codigo sta on sta.idcodigo=doc.idtipostatusdocing 
        left join MO_Codigo mon on mon.idcodigo=doc.idtipomoneda  
        where doc.iddocingreso = #{idDocIngreso} and doc.unineg =#{uniNeg} 
    </select>
    
    <select id="obtenerFormatoDocIngreso" resultType="pe.marista.sigma.bean.reporte.DocIngresoRepBean" parameterType="pe.marista.sigma.bean.DocIngresoBean">
        select
        upper(isnull(ent.nombrecomercial,(select upper(isnull(nombreUniNeg,'')) from MO_UnidadNegocio where unineg=#{unidadNegocioBean.uniNeg}))) as nombre
        ,ent.direccion                                                                                      as direccion
        ,dis.nombre                                                                                         as nomDistrito
        ,doc.discente
        ,C.anio AS anio
        ,upper(ddoc.referencia) as concepto,
        <!--
        ,(
        case
        when c.mes=2 then UPPER(con.nombre)+' - '+ convert(varchar,C.anio)
        when c.mes=3 then UPPER(con.nombre)+' - ' + 'MARZO' + ' '+ convert(varchar,C.anio)
        when c.mes=4 then UPPER(con.nombre)+' - ' + 'ABRIL' +' '+ convert(varchar,C.anio)
        when c.mes=5 then UPPER(con.nombre)+' - ' + 'MAYO' + ' '+ convert(varchar,C.anio)
        when c.mes=6 then UPPER(con.nombre)+' - ' + 'JUNIO' +  ' '+convert(varchar,C.anio)
        when c.mes=7 then UPPER(con.nombre)+' - ' + 'JULIO' +  ' '+convert(varchar,C.anio)
        when c.mes=8 then UPPER(con.nombre)+' - ' + 'AGOSTO' +  ' '+ convert(varchar,C.anio)
        when c.mes=9 then UPPER(con.nombre)+' - ' + 'SETIEMBRE' +  ' '+ convert(varchar,C.anio)
        when c.mes=10 then UPPER(con.nombre)+' - ' + 'OCTUBRE' +  ' '+convert(varchar,C.anio)
        when c.mes=11 then  UPPER(con.nombre)+' - ' + 'NOVIEMBRE' + ' '+ convert(varchar,C.anio)
        when c.mes=12 then UPPER(con.nombre)+' - ' + 'DICIEMBRE' +  ' '+convert(varchar,C.anio)
        END
        ) AS concepto,
        
        -->
        (select convert(varchar,doc.fechapago,103)) as fecha,
        ddoc.montopagado as montoPagado
        <!--
        (case 
        when doc.idtipomoneda=14901 
        then (ddoc.montopagado)
        else ( (CONVERT(float,(ROUND((ddoc.montopagado)/D.tc, 2))))) 
        end
        ) as montoTot  ,
        (case when cod.idcodigo=14901 then 'S/. ' 
        else '$') as moneda
        -->  
        , concat(doc.serie,' - ',right(replicate('0', 7) + rtrim(doc.nrodoc), 7)) as serieNroDoc
        from MT_DetDocIngreso ddoc
        inner join MT_DocIngreso doc on doc.iddocingreso=ddoc.iddocingreso and ddoc.unineg=doc.unineg
        inner join MT_CtasxCobrar c on c.idctasxcobrar=ddoc.idctasxcobrar and ddoc.unineg=c.unineg
        INNER JOIN MT_Concepto con ON con.idconcepto = ddoc.idconcepto
        LEFT JOIN MO_UnidadNegocio uni ON uni.unineg = doc.unineg
        LEFT JOIN MO_Entidad ent ON ent.ruc = uni.RUC and uni.unineg=ent.unineg
        LEFT JOIN MO_Distrito dis ON dis.iddistrito = ent.iddistrito 
        where doc.unineg=#{unidadNegocioBean.uniNeg}  and convert(varchar,doc.iddocingreso) in (#{ids})
    </select>
    <select id="obtenerFormatoDocIngresoFor" resultType="pe.marista.sigma.bean.reporte.DocIngresoRepBean"
            parameterType="map">
        select
        upper(isnull(ent.nombrecomercial,(select upper(isnull(nombreUniNeg,'')) from MO_UnidadNegocio where unineg=#{uniNeg}))) as nombre
        ,ent.direccion                                                                                      as direccion
        ,dis.nombre                                                                                         as nomDistrito
        ,doc.discente
        ,C.anio AS anio
        ,upper(ddoc.referencia) as concepto,
         
        (select convert(varchar,doc.fechapago,103)) as fecha,
        ddoc.montopagado as montoPagado 
        
        , concat(doc.serie,' - ',right(replicate('0', 7) + rtrim(doc.nrodoc), 7)) as serieNroDoc
        from MT_DetDocIngreso ddoc
        inner join MT_DocIngreso doc on doc.iddocingreso=ddoc.iddocingreso and ddoc.unineg=doc.unineg
        inner join MT_CtasxCobrar c on c.idctasxcobrar=ddoc.idctasxcobrar and ddoc.unineg=c.unineg
        INNER JOIN MT_Concepto con ON con.idconcepto = ddoc.idconcepto
        LEFT JOIN MO_UnidadNegocio uni ON uni.unineg = doc.unineg
        LEFT JOIN MO_Entidad ent ON ent.ruc = uni.RUC and uni.unineg=ent.unineg
        LEFT JOIN MO_Distrito dis ON dis.iddistrito = ent.iddistrito 
        where doc.unineg=#{uniNeg}  and  doc.iddocingreso  in
        <foreach item="item" index="index" collection="list" 
                 open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>
    
    <select id="obtenerDetalleDocIngreso" resultType="pe.marista.sigma.bean.reporte.DetDocIngresoRepBean" parameterType="map">
        select
        doc.idDocIngreso            as idDocIngreso,
        con.nombre                  as nombre,
        doc.cuentad                 as cuentaD,
        doc.montoPagado             as montoPagado
        from MT_DetDocIngreso doc
        INNER JOIN MT_Concepto con ON con.idconcepto = doc.idconcepto
        where doc.iddocingreso = #{idDocIngreso} and uniNeg=#{uniNeg}
    </select> 
    <select id="obtenerFormatoDetalleDocIngreso" resultType="pe.marista.sigma.bean.reporte.DetDocIngresoRepBean" parameterType="map">
        SELECT doc.idDocIngreso             as idDocIngreso,
        upper(tc.nombre)			    as tipo,
        <!--con.nombre                          as nombre, -->
        doc.referencia                          as nombre, 
        doc.cuentad                         as cuentaD,
        (case 
        when d.idtipomoneda=14901 then doc.montoPagado 
        else(select (CONVERT(float,(ROUND(doc.montopagado<!--/D.tc-->, 2)))))
        end
        ) as montoPagado,
        right(replicate('0', 2) + rtrim(count(*)), 2) AS cantidad,          
        (case 
        when d.idtipomoneda=14901 then count(*)*doc.montoPagado
        else count(*)* (select (CONVERT(float,(ROUND(doc.montopagado<!--/D.tc-->, 2)))))
        end
        ) as importe,         
        (case 
        when d.idtipomoneda=14901 
        then (select sum(montoPagado)from MT_DetDocIngreso Where iddocingreso =#{idDocIngreso} and uniNeg=#{uniNeg} )
        else ( (CONVERT(float,(ROUND(((select sum(montoPagado)from MT_DetDocIngreso Where iddocingreso =#{idDocIngreso} 
        and uniNeg=#{uniNeg}))<!--/D.tc-->, 2))))) 
        end
        ) as montoTot  ,
        (case when cod.idcodigo=14901 then 'TOTAL S/. ' 
        else 'TOTAL $ ' END) as moneda
        <!-- (Select dbo.CantidadConLetra( (select sum(montoPagado)from MT_DetDocIngreso Where iddocingreso =#{idDocIngreso} and uniNeg=#{uniNeg} ))) as textoMonto -->
        from MT_DetDocIngreso doc  
        inner join MT_DocIngreso d on d.iddocingreso=doc.iddocingreso and d.unineg=doc.unineg
        left  join mo_codigo cod on cod.idcodigo=d.idtipomoneda
        INNER JOIN MT_Concepto con ON con.idconcepto = doc.idconcepto 
        INNER JOIN MT_TipoConcepto tc on tc.idTipoConcepto=con.idtipoconcepto 
        where doc.iddocingreso = #{idDocIngreso} and doc.uniNeg=#{uniNeg}
        GROUP BY doc.idDocIngreso,tc.nombre,idtipomoneda, doc.referencia, doc.cuentad ,doc.montoPagado ,tc,cod.idcodigo
    </select> 
    <select id="obtenerFormatoDetalleDocIngresoConDscto" resultType="pe.marista.sigma.bean.reporte.DetDocIngresoRepBean" parameterType="map">
        DECLARE @cuenta int,@idDocIng int ,@uniNeg varchar(6)
        set @cuenta=741111
        set @idDocIng=#{idDocIngreso}
        set @uniNeg=#{uniNeg}
        DECLARE 
        @nombreCta varchar(100)=(select nombre from MT_PlanContable where cuenta=@cuenta),
        @montoDscto decimal(8,2)=(select sum(dscto) from MT_DetDocIngreso where iddocingreso=@idDocIng and unineg=@uniNeg),
        @montoPagado decimal(8,2)=(select sum(montoPagado)from MT_DetDocIngreso where iddocingreso=@idDocIng and unineg=@uniNeg)
        SELECT doc.idDocIngreso             as idDocIngreso,
        upper(tc.nombre)			    as tipo,       
        doc.referencia                          as nombre, 
        doc.cuentad                         as cuentaD,       
        right(replicate('0', 2) + rtrim(count(*)), 2) AS cantidad,         
        
        (case 
        when d.idtipomoneda=14901 then CONVERT(varchar, CAST(isnull(doc.monto,0) AS money), 1)
        else(CONVERT(varchar, CAST(isnull((CONVERT(float,(ROUND(doc.monto, 2)))),0) AS money), 1))
        end
        ) as strMontoPagado,
		 

        (case 
        when d.idtipomoneda=14901 then CONVERT(varchar, CAST((count(*)*doc.monto) AS money), 1)
        else CONVERT(varchar, CAST(isnull( count(*)* ((CONVERT(float,(ROUND(doc.monto, 2))))),0) AS money), 1)
        end
        ) as strImporte,
         
        (case 
        when d.idtipomoneda=14901 
        then (select sum(montoPagado)from MT_DetDocIngreso Where iddocingreso =@idDocIng and uniNeg=@uniNeg)
        else ( (CONVERT(float,(ROUND((@montoPagado), 2))))) 
        end
        ) as montoTot  ,
        (case when cod.idcodigo=14901 then 'TOTAL S/. ' 
        else 'TOTAL $ ' END) as moneda 
        from MT_DetDocIngreso doc  
        inner join MT_DocIngreso d on d.iddocingreso=doc.iddocingreso and d.unineg=doc.unineg
        left  join mo_codigo cod on cod.idcodigo=d.idtipomoneda
        INNER JOIN MT_Concepto con ON con.idconcepto = doc.idconcepto 
        INNER JOIN MT_TipoConcepto tc on tc.idTipoConcepto=con.idtipoconcepto 
        where doc.iddocingreso = @idDocIng  and doc.uniNeg=@uniNeg
        GROUP BY doc.idDocIngreso,tc.nombre,idtipomoneda, doc.referencia, doc.cuentad ,doc.monto ,tc,cod.idcodigo
        
        <if test="flgDscto == 1"> 
            UNION ALL	 
            SELECT  top 1
            doc.idDocIngreso             as idDocIngreso,
            'DESCUENTO'			    as tipo, 
            ''                         as nombre, 
            @cuenta                         as cuentaD,       
            '01' AS cantidad,          
            '' as strMontoPagado,
            ('-'+CONVERT(varchar, CAST(isnull(@montoDscto,0) AS money), 1)) as strImporte,
            (case 
            when d.idtipomoneda=14901 
            then (@montoPagado)
            else ( (CONVERT(float,(ROUND((@montoPagado), 2))))) 
            end
            ) as montoTot  ,
            (case when cod.idcodigo=14901 then 'TOTAL S/. ' 
            else 'TOTAL $ ' END) as moneda 
            from MT_DetDocIngreso doc  
            inner join MT_DocIngreso d on d.iddocingreso=doc.iddocingreso and d.unineg=doc.unineg
            left  join mo_codigo cod on cod.idcodigo=d.idtipomoneda
            INNER JOIN MT_Concepto con ON con.idconcepto = doc.idconcepto 
            INNER JOIN MT_TipoConcepto tc on tc.idTipoConcepto=con.idtipoconcepto 
            where doc.iddocingreso = @idDocIng  and doc.uniNeg=@uniNeg
            GROUP BY doc.idDocIngreso,tc.nombre,idtipomoneda, doc.referencia, doc.cuentad  ,tc,cod.idcodigo
        </if>
    </select> 
    
    <select id="obtenerDetDocIngresoBeanPorId" resultMap="detDocIngresoBeanRes" parameterType="pe.marista.sigma.bean.DetDocIngresoBean">
        select
        detdoc.idDetDocIngreso
        ,doc.idDocIngreso            
        ,con.nombre                  
        ,detDoc.cuentaD               
        ,detDoc.cuentaH                 
        ,detDoc.montoPagado             
        ,cta.idCtasXCobrar				as idCtasXCobrar
        ,cta.idEstudiante				as idEstudiante	
        ,cta.uniNeg					as uniNeg 
        ,cta.idConcepto					as idConcepto
        ,con.nombre					as nombreConcepto
        ,cta.idDocIngreso				as idDocIngreso 
        ,cta.anio					as anio	
        ,cta.mes					as mes  
        ,cta.idEstudiante				as idEstudiante	
        ,doc.tc as tc   
        FROM MT_DetDocIngreso detDoc 
        inner JOIN MT_CtasxCobrar cta on detDoc.idctasxcobrar=cta.idctasxcobrar
        inner JOIN MX_Estudiante stu on stu.idestudiante = cta.idestudiante 
        inner JOIN MT_Concepto con ON cta.idconcepto = con.idconcepto
        inner JOIN MT_DocIngreso doc ON cta.iddocingreso = doc.iddocingreso 
        WHERE docE.uniNeg=#{unidadNegocioBean.uniNeg} and cta.idCtasXCobrar=#{cuentasPorCobrarBean.idCtasXCobrar} and doc.idDocIngreso =#{cuentasPorCobrarBean.docIngresoBean.idDocIngreso}
    </select> 
    <!-- detalle -->
    <resultMap id="detDocIngresoBeanRes" type="pe.marista.sigma.bean.DetDocIngresoBean">
        <id property="uniNegDet" column="uniNegDet"/>
        <id property="idDetDocIngreso" column="idDetDocIngreso"/>
        <result property="monto" column="monto"/>
        <result property="montoPagado" column="montoPagado"/>
        <result property="dscto" column="dscto"/>
        <result property="fechaInicio" column="fechaInicio"/>
        <result property="idDicente" column="idDicente"/>
        <result property="montoSoles" column="montoSoles"/>
        <result property="montoDolares" column="montoDolares"/>
        <result property="mora" column="mora"/>
        <result property="modiPor" column="modiPor"/>
        <result property="creaPor" column="creaPor"/>
        <result property="referencia" column="creaFecha"/>
        <result property="creaFecha" column="creaFecha"/>
        <association property="cuentasPorCobrarBean" column="idCtasXCobrar"
                     javaType="pe.marista.sigma.bean.CuentasPorCobrarBean"
                     resultMap="ctasXCobrarResultado"/>  
        <association property="programacionBean" column="idProgramacion"
                     javaType="pe.marista.sigma.bean.ProgramacionBean"
                     resultMap="programacionResultadoDocIng"/>
        <!--<association property="conceptoUniNegBean" column="idConcepto"
        javaType="pe.marista.sigma.bean.ConceptoBean"
        resultMap="conceptoUniNegResultado"/>-->
        <association property="conceptoBean" column="idConcepto"
                     javaType="pe.marista.sigma.bean.ConceptoBean"
                     resultMap="conceptoResultado"/>
        <association property="docIngresoBean" column="idDocIngreso"
                     javaType="pe.marista.sigma.bean.DocIngresoBean"
                     resultMap="docIngresoResultado"/>
        <association property="idTipoDscto" column="idTipoDscto"
                     javaType="pe.marista.sigma.bean.CodigoBean"
                     resultMap="tipoDsctoResultado"/> 
        <association property="centroResponsabilidadBean" column="cr"
                     javaType="pe.marista.sigma.bean.CentroResponsabilidadBean"
                     resultMap="centroResponsabilidadResultado"/>

    </resultMap>
    <!-- detalle -->
    <resultMap id="detDocIngresoBeanRes2" type="pe.marista.sigma.bean.DetDocIngresoBean">
        <id property="uniNegDet" column="uniNegDet"/>
        <id property="idDetDocIngreso" column="idDetDocIngreso"/>
        <result property="idCtasXCobrar" column="idCtasXCobrar"/>
        <result property="monto" column="monto"/>
        <result property="dscto" column="dscto"/>
        <result property="dsctoBeca" column="dsctoBeca"/>
        <result property="montoPagado" column="montoPagado"/>
        <result property="fechaInicio" column="fechaInicio"/>
        <result property="idDicente" column="idDicente"/>
        <result property="montoSoles" column="montoSoles"/>
        <result property="montoDolares" column="montoDolares"/>
        <result property="mora" column="mora"/>
        <result property="modiPor" column="modiPor"/>
        <result property="creaPor" column="creaPor"/>
        <result property="referencia" column="referencia"/>
        <result property="creaFecha" column="creaFecha"/> 
        <association property="programacionBean" column="idProgramacion"
                     javaType="pe.marista.sigma.bean.ProgramacionBean"
                     resultMap="programacionResultadoDocIng"/> 
        <association property="conceptoBean" column="idConcepto"
                     javaType="pe.marista.sigma.bean.ConceptoBean"
                     resultMap="conceptoResultado"/>
        <association property="docIngresoBean" column="idDocIngreso"
                     javaType="pe.marista.sigma.bean.DocIngresoBean"
                     resultMap="docIngresoResultadoFull"/>
        <association property="idTipoDscto" column="idTipoDscto"
                     javaType="pe.marista.sigma.bean.CodigoBean"
                     resultMap="tipoDsctoResultado"/> 
        <association property="centroResponsabilidadBean" column="cr"
                     javaType="pe.marista.sigma.bean.CentroResponsabilidadBean"
                     resultMap="centroResponsabilidadResultado"/>
        <association property="cuentaD" column="cuentaD"
                     javaType="pe.marista.sigma.bean.PlanContableBean"
                     resultMap="planContableDResultado"/>
        <association property="cuentaH" column="cuentaH"
                     javaType="pe.marista.sigma.bean.PlanContableBean"
                     resultMap="planContableHResultado"/>

    </resultMap>
    <resultMap id="programacionResultadoDocIng" type="pe.marista.sigma.bean.ProgramacionBean">
        <id property="uniNeg" column="uniNegPro"/>
        <id property="idProgramacion" column="idProgramacion"/>
        <result property="anio" column="anio"/>
        <result property="precio" column="precio"/>
    </resultMap>   
    <resultMap id="tipoDsctoResultado" type="pe.marista.sigma.bean.CodigoBean">
        <id property="idCodigo" column="idTipoDscto"/>
        <result property="codigo" column="codTipoDesc"/>
    </resultMap>
    <select id="obtenerFiltroDocIngreso" resultMap="docIngresoResultado" parameterType="pe.marista.sigma.bean.DocIngresoBean">
        declare @unineg varchar(6),@fechaInicio date,@fechaFin date 
        set @unineg=#{unidadNegocioBean.uniNeg}
        set @fechaInicio=convert(date,#{fechaInicio})
        set @fechaFin=convert(date,#{fechaFin})
         
        select distinct 
        doc.iddocingreso                                                                                   as idDocIngreso   
        ,doc.idcajagen                                                                                     as idCajaGen
        ,doc.uniNeg                                                                                         as uniNeg																						 
        ,cod.idCodigo                                                                                       as idTipoDoc
        ,cod.codigo                                                                                         as codTipoDoc
        ,doc.serie                                                                                          as serie
        ,right(replicate('0', 7) + rtrim(doc.nrodoc), 7)                                                    as nroDoc
        ,doc.iddiscente                                                                                     as codDiscente 
        ,doc.discente                                                                                       as nombreDiscente 
        ,doc.anio                                                                                           as anio
        ,(doc.serie+' - '+right(replicate('0', 7) + rtrim(doc.nrodoc), 7))                                  as serieNroDoc
        , doc.fechapago                                                                                     as fechaPago 
        ,lug.idcodigo                                                                                       as idTipoLugarPago
        ,lug.codigo                                                                                         as lugarPago
        ,mop.codigo                                                                                         as modoPago 
        ,mop.idcodigo                                                                                       as idTipoModoPago 
        ,doc.tc                                                                                             as tc
        ,caj.nombre                                                                                         as caja
        ,isnull(montoefectivosol,0)                                                                         as montoEfectivoSol																			 
        ,isnull((montoefectivodol),0)							 	            as montoefectivodol
        ,isnull(montopos1,0)                                                                                as montoPos1
        ,isnull(montopos2,0)										    as montoPos2
        ,(select isnull(sum(isnull(montopagado,0)),0) from MT_DetDocIngreso ddoc where 
        ddoc.iddocingreso=doc.iddocingreso and ddoc.unineg =@unineg)                    as montoPagado 
        ,sta.idcodigo                                                                                       as idTipoStatusDocIng
        ,sta.codigo                                                                                         as estadoDoc
        ,convert(varchar,doc.fechapago,103)                                                                 as fechaPagoVista
        , mon.codigo                                                                                        as tipoMoneda
        ,(select sum(isnull(montoefectivosol,0)+isnull(montopos1,0)+isnull(montopos2,0))
        from MT_DocIngreso ddoc where ddoc.iddocingreso=doc.iddocingreso 
        and ddoc.unineg =@unineg)                                                       as montoPagadoSol
        ,(select sum(montoefectivodol)
        from MT_DocIngreso ddoc where ddoc.iddocingreso=doc.iddocingreso 
        and ddoc.unineg =@unineg)                                                       as montoPagadoDol
        FROM MT_DocIngreso doc        
        INNER JOIN MT_DetDocIngreso det on det.iddocingreso=doc.iddocingreso and doc.unineg=det.unineg   
        LEFT join MT_Concepto con  on con.idconcepto = det.idconcepto                                                                     
        LEFT JOIN MT_Impresora imp ON imp.impresora = doc.impresora and imp.unineg=doc.unineg
        LEFT join MT_CajaGen gen on gen.idcajagen = doc.idcajagen and gen.unineg=doc.unineg
        LEFT JOIN MX_Estudiante est ON est.idestudiante = doc.iddiscente and est.unineg=doc.unineg 
        LEFT JOIN MO_UnidadNegocio uni ON uni.unineg = doc.unineg  
        LEFT join MT_Caja caj on caj.idcaja=doc.idcaja and caj.unineg=doc.unineg 
        LEFT JOIN MO_Codigo cod ON cod.idcodigo = doc.idtipodoc
        LEFT JOIN MO_Codigo lug ON lug.idcodigo = doc.idtipolugarpago
        LEFT JOIN MO_Codigo mop ON mop.idcodigo = doc.idtipomodopago 
        LEFT join MO_Codigo sta on sta.idcodigo=doc.idtipostatusdocing 
        LEFT join MO_Codigo mon on mon.idcodigo=doc.idtipomoneda 
        <where>
            doc.uniNeg = @unineg and sta.codigo is not null 
            <if test="tipoStatusDocIng != null and tipoStatusDocIng != ''">
                <if test="tipoStatusDocIng.codigo != 'Banco' and idTipoLugarPago.idCodigo == null ">
                    and doc.idcajagen is not null 
                </if>
            </if> 
            <if test="tipoStatusDocIng.idCodigo != null and tipoStatusDocIng.idCodigo != 0">
                and sta.idCodigo = #{tipoStatusDocIng.idCodigo}
            </if>
            <if test="idTipoDoc.idCodigo != null and idTipoDoc.idCodigo != 0">
                and cod.idCodigo = #{idTipoDoc.idCodigo}
            </if>
            <if test="idTipoModoPago.idCodigo != null and idTipoModoPago.idCodigo != 0">
                and mop.idCodigo = #{idTipoModoPago.idCodigo}
            </if>
            <if test="idTipoLugarPago.idCodigo != null and idTipoLugarPago.idCodigo != 0">
                and lug.idCodigo = #{idTipoLugarPago.idCodigo}
            </if>
            <if test="anio != null and anio != 0">
                and doc.anio = #{anio}
            </if>
            <if test="serie != null and serie != ''">
                and doc.serie = #{serie}
            </if>
            <if test="nroDoc != null and nroDoc != ''">
                and doc.nroDoc = #{nroDoc} 
            </if>
            <if test="nombreDiscente != null and nombreDiscente != ''">
                and upper(doc.discente) like concat('%',#{nombreDiscente},'%') 
            </if>
            <if test="codDiscente != null and codDiscente != ''">
                and  doc.iddiscente =#{codDiscente} 
            </if> 
            <if test="fechaInicio != null" >
                <![CDATA[ 
                and    convert(date,doc.fechaPago)  >= @fechaInicio
                ]]>
            </if>  
            <if test="fechaFin != null" >
                <![CDATA[
                and    convert(date,doc.fechaPago)  <= @fechaFin
                ]]>
            </if> 
        </where>
        UNION ALL
        
        select distinct 
        doc.iddocingreso                                                                                   as idDocIngreso   
        ,doc.idcajagenanulado                                                                             as idCajaGen
        ,doc.uniNeg                                                                                         as uniNeg																						 
        ,cod.idCodigo                                                                                       as idTipoDoc
        ,cod.codigo                                                                                         as codTipoDoc
        ,doc.serie                                                                                          as serie
        ,right(replicate('0', 7) + rtrim(doc.nrodoc), 7)                                                    as nroDoc
        ,doc.iddiscente                                                                                     as codDiscente 
        ,doc.discente                                                                                       as nombreDiscente 
        ,doc.anio                                                                                           as anio
        ,(doc.serie+' - '+right(replicate('0', 7) + rtrim(doc.nrodoc), 7))                                  as serieNroDoc
        ,doc.creaFechaStatus                                                                               as fechaPago 
        ,lug.idcodigo                                                                                       as idTipoLugarPago
        ,lug.codigo                                                                                         as lugarPago
        ,mop.codigo                                                                                         as modoPago 
        ,mop.idcodigo                                                                                       as idTipoModoPago 
        ,doc.tc                                                                                             as tc
        ,caj.nombre                                                                                         as caja
        ,isnull(0,0)                                                                                        as montoEfectivoSol																			 
        ,isnull((0),0)                                                                                      as montoefectivodol
        ,isnull(0,0)                                                                                        as montoPos1
        ,isnull(0,0)                                                                                        as montoPos2
        ,(0)                                                                                                as montoPagado 
        ,sta.idcodigo                                                                                       as idTipoStatusDocIng
        ,'Anulado'                                                                                          as estadoDoc
        <!--, (select convert(varchar,doc.fechapago,103))                                                       -->
        ,convert(varchar,doc.creaFechaStatus,103)                                                           as fechaPagoVista
        , mon.codigo                                                                                        as tipoMoneda
        ,(0)                                                       as montoPagadoSol
        ,(0)                                                       as montoPagadoDol
        FROM MT_DocIngreso doc        
        INNER JOIN MT_DetDocIngreso det on det.iddocingreso=doc.iddocingreso and doc.unineg=det.unineg   
        LEFT join MT_Concepto con  on con.idconcepto = det.idconcepto                                                                     
        LEFT JOIN MT_Impresora imp ON imp.impresora = doc.impresora and imp.unineg=doc.unineg
        LEFT join MT_CajaGen gen on gen.idcajagen = doc.idcajagen and gen.unineg=doc.unineg
        LEFT JOIN MX_Estudiante est ON est.idestudiante = doc.iddiscente and est.unineg=doc.unineg 
        LEFT JOIN MO_UnidadNegocio uni ON uni.unineg = doc.unineg  
        LEFT join MT_Caja caj on caj.idcaja=doc.idcaja and caj.unineg=doc.unineg 
        LEFT JOIN MO_Codigo cod ON cod.idcodigo = doc.idtipodoc
        LEFT JOIN MO_Codigo lug ON lug.idcodigo = doc.idtipolugarpago
        LEFT JOIN MO_Codigo mop ON mop.idcodigo = doc.idtipomodopago 
        LEFT join MO_Codigo sta on sta.idcodigo=doc.idtipostatusdocing 
        LEFT join MO_Codigo mon on mon.idcodigo=doc.idtipomoneda 
        <where>
            doc.uniNeg = @unineg and isnull(flganulado,0) =1 
            <!-- <if test="tipoStatusDocIng != null and tipoStatusDocIng != ''">
                <if test="tipoStatusDocIng.codigo != 'Banco'">
            -->
            and doc.idcajagenanulado is not null 
            <!-- </if>
            </if>-->
            <if test="tipoStatusDocIng.idCodigo != null and tipoStatusDocIng.idCodigo != 0">
                and sta.idCodigo = #{tipoStatusDocIng.idCodigo}
            </if>
            <if test="idTipoDoc.idCodigo != null and idTipoDoc.idCodigo != 0">
                and cod.idCodigo = #{idTipoDoc.idCodigo}
            </if>
            <if test="idTipoModoPago.idCodigo != null and idTipoModoPago.idCodigo != 0">
                and mop.idCodigo = #{idTipoModoPago.idCodigo}
            </if>
            <if test="idTipoLugarPago.idCodigo != null and idTipoLugarPago.idCodigo != 0">
                and lug.idCodigo = #{idTipoLugarPago.idCodigo}
            </if>
            <if test="anio != null and anio != 0">
                and doc.anio = #{anio}
            </if>
            <if test="serie != null and serie != ''">
                and doc.serie = #{serie}
            </if>
            <if test="nroDoc != null and nroDoc != ''">
                and doc.nroDoc = #{nroDoc} 
            </if>
            <if test="nombreDiscente != null and nombreDiscente != ''">
                and upper(doc.discente) like concat('%',#{nombreDiscente},'%') 
            </if>
            <if test="codDiscente != null and codDiscente != ''">
                and  doc.iddiscente =#{codDiscente} 
            </if> 
            <if test="fechaInicio != null" >
                <![CDATA[ 
                and     convert(date,doc.creaFechaStatus)   >= @fechaInicio
                ]]>
            </if>  
            <if test="fechaFin != null" >
                <![CDATA[
                and     convert(date,doc.creaFechaStatus)   <= @fechaFin
                ]]>
            </if> 
        </where>
        order by 12
    </select> 
    <select id="obtenerFiltroDetDocIngreso" resultType="pe.marista.sigma.bean.reporte.DetDocIngresoRepBean" parameterType="pe.marista.sigma.bean.reporte.DetDocIngresoRepBean">
        declare @unineg varchar(6),@fechaInicio date,@fechaFin date, @cuenta int
        set @unineg=#{uniNeg}
        set @fechaInicio=convert(date,#{fechaInicio})
        set @fechaFin=convert(date,#{fechaFin})
        set @cuenta  =#{cuenta}
        Declare @sumTotalSol money = (select SUM(isnull(montosoles,0)) 
        From MT_DetDocIngreso d 
        Inner JOIN MT_DocIngreso dc on d.iddocingreso=dc.iddocingreso and dc.unineg=d.unineg left join MT_Concepto c  on c.idconcepto = d.idconcepto  
        left  join MT_TipoConcepto t on t.idTipoConcepto=c.idtipoconcepto
        LEFT join MO_Codigo est on est.idcodigo=dc.idtipostatusdocing 
        <where>
            dc.uniNeg = @unineg <!--and dc.idcajagen is not null 
            and (case when dc.creaStatus is null then dc.idcajagen else dc.idcajagenanulado end) is not null-->
            <if test="estadoDocIng != null and estadoDocIng != ''">
                <if test="estadoDocIng  != 'Anulado'">
                    <!--    and dc.idcajagen is not null -->
                    and dc.idcajagen is not null 
                </if>
            </if>
            <if test="cuenta != null and cuenta != 0"> 
                and (d.cuentah=#{cuenta} or d.cuentad=#{cuenta})
            </if>
            <if test="idTipoConcepto != null and idTipoConcepto != 0">
                and t.idtipoconcepto=#{idTipoConcepto}
            </if>
            <if test="idConcepto != null and idConcepto != 0">
                and c.idconcepto=#{idConcepto}
            </if>
            <if test="referencia != null and referencia != ''">
                and d.referencia like concat('%',#{referencia},'%') 
            </if> 
            <if test="discente != null and discente != ''">
                and upper(dc.discente) like concat('%',#{discente},'%') 
            </if>
            <if test="estadoDocIng != null and estadoDocIng != ''">
                and upper(est.codigo) = #{estadoDocIng} 
            </if>  
            <if test="fechaInicio != null" >
                
                <![CDATA[  
                and     convert(date,dc.fechaPago)    >= @fechaInicio
                ]]>
            </if>  
            <if test="fechaFin != null" >
                
                <![CDATA[
                and     convert(date,dc.fechaPago)   <= @fechaFin
                ]]>
            </if>   
        </where> ),
        @sumTotalDol money = (select SUM(isnull(montodolares,0)) 
        from MT_DetDocIngreso d 
        inner JOIN MT_DocIngreso dc on d.iddocingreso=dc.iddocingreso 
        and dc.unineg=d.unineg left join MT_Concepto c  on c.idconcepto = d.idconcepto  left  join 
        MT_TipoConcepto t on t.idTipoConcepto=c.idtipoconcepto 
        LEFT join MO_Codigo est on est.idcodigo=dc.idtipostatusdocing 
        <where>
            dc.uniNeg = @unineg <!--and dc.idcajagen is not null  
            and (case when dc.creaStatus is null then dc.idcajagen else dc.idcajagenanulado end) is not null--> 
            <if test="estadoDocIng != null and estadoDocIng != ''">
                <if test="estadoDocIng  != 'Anulado'">
                    <!--  and dc.idcajagen is not null or  dc.idcajagen is null-->
                    and dc.idcajagen is not null 
                </if>
            </if>
            <if test="cuenta != null and cuenta != 0"> 
                and (d.cuentah=#{cuenta} or d.cuentad=#{cuenta})
            </if>            
            <if test="idTipoConcepto != null and idTipoConcepto != 0">
                and t.idtipoconcepto=#{idTipoConcepto}
            </if>
            <if test="idConcepto != null and idConcepto != 0">
                and c.idconcepto=#{idConcepto}
            </if>
            <if test="referencia != null and referencia != ''">
                and d.referencia like concat('%',#{referencia},'%') 
            </if> 
            <if test="discente != null and discente != ''">
                and upper(dc.discente) like concat('%',#{discente},'%') 
            </if> 
            <if test="estadoDocIng != null and estadoDocIng != ''">
                and upper(est.codigo) = #{estadoDocIng} 
            </if> 
            <if test="fechaInicio != null" >
                
                <![CDATA[  
                and    convert(date,dc.fechaPago)   >= @fechaInicio
                ]]>
            </if>  
            <if test="fechaFin != null" >
                
                <![CDATA[
                and    convert(date,dc.fechaPago)    <= @fechaFin
                ]]>
            </if>    
        </where> 
        )

        select distinct det.iddetdocingreso,isnull(doc.montopos1,0) as montoPos1,isnull(doc.montopos2,0) as montoPos2,isnull(doc.montoefectivosol,0) as montoEfectivo,(case when ((doc.montoefectivosol is null or doc.montoefectivosol=0) and (montoefectivodol is null or montoefectivodol=0) )
        and (montopos1>0 or montopos2>0) then 'POS'
        when (doc.montopos1=0 or doc.montopos2=0 or montopos1 is null or montopos2 is null) and (montoefectivosol>0 or montoefectivodol>0 )then'Efectivo' 
        when (montoefectivosol>0 and montopos1>0) or (montoefectivosol>0 and montopos2>0) or
        (montoefectivodol >0 and montopos1>0) or (montoefectivodol>0 and montopos2>0) then 'POS / Efectivo'
        when flganulado=1 then 'Anulado'
        end) as modoPagoVista,
        upper(uni.nombreUniNeg)  as nombreUniNeg,	 
        (case when tipDoc.codigo = 'Recibo' then 'REC.' when tipDoc.codigo = 'Factura' then 'FAC.' 
        when tipDoc.codigo = 'Boleta' then 'BOL.' else '-' end)  
        +' '+(doc.serie+' - '+right(replicate('0', 7) + rtrim(doc.nrodoc), 7))  as serieNroDoc  
        ,doc.discente + case when  GRA.codigo is not null then  ' ('+
        ((case 
        when GRA.codigo= 'PRE-INICIAL(3)' then 'P3'
        when GRA.codigo= 'PRE-INICIAL(4)' then 'P4' 
        when GRA.codigo= 'INICIAL(5)'	  then '00'
        when GRA.codigo= 'PRIMERO'		  then '01'
        when GRA.codigo= 'SEGUNDO'		  then '02'
        when GRA.codigo= 'TERCERO'		  then '03'
        when GRA.codigo= 'CUARTO'         then '04'
        when GRA.codigo= 'QUINTO'         then '05'
        when GRA.codigo= 'SEXTO'          then '06'
        when GRA.codigo= 'SETIMO'         then '07'
        when GRA.codigo= 'OCTAVO'         then '08'
        when GRA.codigo= 'NOVENO'         then '09'
        when GRA.codigo= 'DECIMO'         then '10'
        when GRA.codigo= 'DECIMO-BACH'    then '10'
        when GRA.codigo= 'UNDECIMO'       then '11'		
        when GRA.codigo= 'UNDECIMO-BACH'  then '11'
        END ) ) + isnull(m.seccion,'')+')'     else ' '  end                      as discente 
        ,(case when doc.creaStatus is null then  convert(varchar,doc.fechapago,103)  else  convert(varchar,creaFechaStatus,103) end)  as fechaVista 

        ,isnull(det.referencia,'')  as referencia
        ,(case when tcon.idTipoConcepto in (100,101) then det.cuentad else det.cuentah end) as cuenta
        ,isnull(det.montosoles,0)                                                         as montoSoles
        ,isnull(det.montodolares,0)                                                    as montoDolares
        ,tcon.nombre                                                            as nomTipoConcepto
        ,con.nombre                                                             as nomConcepto
        ,sta.codigo                                                             as estadoDocIng
        ,(case when @cuenta is null then '' else 'Cuenta: ('+convert(varchar,@cuenta)+') '+(select top 1 nombre from MT_PlanContable where cuenta=@cuenta)end) nomCuenta   
        ,@sumTotalSol as sumTotSoles
        ,@sumTotalDol as sumTotDolares,
        isnull(det.dscto,0.00) as montoDscto,
        isnull(det.dsctobeca,0.00) as dsctoBeca,
        isnull(det.monto,0.00) as monto,
        isnull(det.mora,0.00) as mora,
        (case when doc.creaStatus is null then convert(date,doc.fechapago) else convert(date,creaFechaStatus) end) as fechaReal
        FROM MT_DetDocIngreso det                                         
        inner JOIN MT_DocIngreso doc on det.iddocingreso=doc.iddocingreso and doc.unineg=det.unineg   
        left join MT_Concepto con  on con.idconcepto = det.idconcepto   
        left join MT_TipoConcepto tcon on tcon.idTipoConcepto=con.idtipoconcepto     
        LEFT join MO_Codigo sta on sta.idcodigo=doc.idtipostatusdocing 
        LEFT JOIN MO_Codigo tipDoc ON tipDoc.idcodigo = doc.idtipodoc   
        LEFT JOIN MO_UnidadNegocio uni ON uni.unineg = doc.unineg     
        
        left join MX_Matricula m on m.idestudiante=doc.iddiscente and m.unineg=doc.unineg and m.anio=ISNULL(DOC.ANIO,YEAR(GETDATE()))
        left join MX_GradoAcademico gra on gra.idgradoacademico=m.idgradoacademico     
        <where>
            det.unineg=@unineg 
            <!--<if test="estadoDocIng != null and estadoDocIng != ''">
            <if test="estadoDocIng != 'Anulado'">-->
            <!--and doc.idcajagen is not null -->
            and doc.idcajagen is not null 
            <!--   </if>
            </if>-->
            and sta.codigo is not null 
            <if test="cuenta != null and cuenta != 0"> 
                and (det.cuentah=#{cuenta} or det.cuentad=#{cuenta})
            </if>
            <if test="idTipoConcepto != null and idTipoConcepto != 0">
                and tcon.idtipoconcepto=#{idTipoConcepto}
            </if>
            <if test="idConcepto != null and idConcepto != 0">
                and con.idconcepto=#{idConcepto}
            </if>
            <if test="referencia != null and referencia != ''">
                and det.referencia like concat('%',#{referencia},'%') 
            </if> 
            <if test="discente != null and discente != ''">
                and upper(doc.discente) like concat('%',#{discente},'%') 
            </if> 
            <if test="estadoDocIng != null and estadoDocIng != ''">
                and upper(sta.codigo) = #{estadoDocIng} 
            </if> 
            <if test="fechaInicio != null" >
                
                <![CDATA[  
                and   convert(date,doc.fechaPago)   >= @fechaInicio
                ]]>
            </if>  
            <if test="fechaFin != null" >
                
                <![CDATA[
                and  convert(date,doc.fechaPago)     <= @fechaFin
                ]]>
            </if>  
        </where>
        
        union all
        
        select distinct det.iddetdocingreso, isnull(doc.montopos1,0) as montoPos1,isnull(doc.montopos2,0) as montoPos2,isnull(doc.montoefectivosol,0) as montoEfectivo, (case when ((doc.montoefectivosol is null or doc.montoefectivosol=0) and (montoefectivodol is null or montoefectivodol=0) ) 
        and (montopos1>0 or montopos2>0) then 'POS'
        when (doc.montopos1=0 or doc.montopos2=0 or montopos1 is null or montopos2 is null) and (montoefectivosol>0 or montoefectivodol>0 )then'Efectivo' 
        when (montoefectivosol>0 and montopos1>0) or (montoefectivosol>0 and montopos2>0) or
        (montoefectivodol >0 and montopos1>0) or (montoefectivodol>0 and montopos2>0) then 'POS / Efectivo'
        when flganulado=1 then 'Anulado'
        end) as modoPagoVista,
        upper(uni.nombreUniNeg)  as nombreUniNeg,	 
        (case when tipDoc.codigo = 'Recibo' then 'REC.' when tipDoc.codigo = 'Factura' then 'FAC.' 
        when tipDoc.codigo = 'Boleta' then 'BOL.' else '-' end)  
        +' '+(doc.serie+' - '+right(replicate('0', 7) + rtrim(doc.nrodoc), 7))  as serieNroDoc  
        ,doc.discente + case when  GRA.codigo is not null then  ' ('+
        ((case 
        when GRA.codigo= 'PRE-INICIAL(3)' then 'P3'
        when GRA.codigo= 'PRE-INICIAL(4)' then 'P4' 
        when GRA.codigo= 'INICIAL(5)'	  then '00'
        when GRA.codigo= 'PRIMERO'		  then '01'
        when GRA.codigo= 'SEGUNDO'		  then '02'
        when GRA.codigo= 'TERCERO'		  then '03'
        when GRA.codigo= 'CUARTO'         then '04'
        when GRA.codigo= 'QUINTO'         then '05'
        when GRA.codigo= 'SEXTO'          then '06'
        when GRA.codigo= 'SETIMO'         then '07'
        when GRA.codigo= 'OCTAVO'         then '08'
        when GRA.codigo= 'NOVENO'         then '09'
        when GRA.codigo= 'DECIMO'         then '10'
        when GRA.codigo= 'DECIMO-BACH'    then '10'
        when GRA.codigo= 'UNDECIMO'       then '11'		
        when GRA.codigo= 'UNDECIMO-BACH'  then '11'
        END )) + isnull(m.seccion,'')+')'     else ' '  end                    as discente                                                     
        
        ,(case when doc.creaStatus is null then  convert(varchar,doc.fechapago,103)  else  convert(varchar,creaFechaStatus,103) end)  as fechaVista 

        ,'--ANULADO-- '+det.referencia                                       as referencia
        ,(case when tcon.idTipoConcepto in (100,101) then det.cuentad else det.cuentah end) as cuenta
        ,isnull(0,0)                                                         as montoSoles
        ,isnull(0,0)                                                         as montoDolares
        ,tcon.nombre                                                            as nomTipoConcepto
        ,con.nombre                                                             as nomConcepto
        ,'Anulado'                                                             as estadoDocIng
        ,(case when @cuenta is null then '' else 'Cuenta: ('+convert(varchar,@cuenta)+') '+(select top 1 nombre from MT_PlanContable where cuenta=@cuenta)end) nomCuenta   
        ,@sumTotalSol as sumTotSoles
        ,@sumTotalDol as sumTotDolares,
        isnull(det.dscto,0.00) as montoDscto,
        isnull(det.dsctobeca,0.00) as dsctoBeca,
        isnull(det.monto,0.00) as monto,
        isnull(det.mora,0.00) as mora,
        (case when doc.creaStatus is null then convert(date,doc.fechapago) else convert(date,creaFechaStatus) end) as fechaReal
        FROM MT_DetDocIngreso det                                         
        inner JOIN MT_DocIngreso doc on det.iddocingreso=doc.iddocingreso and doc.unineg=det.unineg   
        left join MT_Concepto con  on con.idconcepto = det.idconcepto   
        left join MT_TipoConcepto tcon on tcon.idTipoConcepto=con.idtipoconcepto     
        LEFT join MO_Codigo sta on sta.idcodigo=doc.idtipostatusdocing 
        LEFT JOIN MO_Codigo tipDoc ON tipDoc.idcodigo = doc.idtipodoc   
        LEFT JOIN MO_UnidadNegocio uni ON uni.unineg = doc.unineg     
        
        left join MX_Matricula m on m.idestudiante=doc.iddiscente and m.unineg=doc.unineg and m.anio=ISNULL(DOC.ANIO,YEAR(GETDATE()))
        left join MX_GradoAcademico gra on gra.idgradoacademico=m.idgradoacademico     
        <where>
            det.unineg=@unineg   and isnull(flganulado,0) =1 
            <!-- <if test="estadoDocIng != null and estadoDocIng != ''">
            <if test="estadoDocIng.codigo != 'Banco'">-->
            <!--and doc.idcajagenanulado is not null -->
            and doc.idcajagenanulado is not null 
            <!--</if>
            </if>-->
            <if test="cuenta != null and cuenta != 0"> 
                and (det.cuentah=#{cuenta} or det.cuentad=#{cuenta})
            </if>
            <if test="idTipoConcepto != null and idTipoConcepto != 0">
                and tcon.idtipoconcepto=#{idTipoConcepto}
            </if>
            <if test="idConcepto != null and idConcepto != 0">
                and con.idconcepto=#{idConcepto}
            </if>
            <if test="referencia != null and referencia != ''">
                and det.referencia like concat('%',#{referencia},'%') 
            </if> 
            <if test="discente != null and discente != ''">
                and upper(doc.discente) like concat('%',#{discente},'%') 
            </if> 
            <if test="estadoDocIng != null and estadoDocIng != ''">
                and upper(sta.codigo) = #{estadoDocIng} 
            </if> 
            <if test="fechaInicio != null" >
                
                <![CDATA[  
                and   convert(date,doc.creaFechaStatus)  >= @fechaInicio
                ]]>
            </if>  
            <if test="fechaFin != null" > 
                <![CDATA[
                and   convert(date,doc.creaFechaStatus)   <= @fechaFin
                ]]>
            </if>  
        </where>
        order by 18
    </select> 
    <select id="obtenerFiltroDetPagoMatricula" resultType="pe.marista.sigma.bean.reporte.DetDocIngresoRepBean" parameterType="pe.marista.sigma.bean.reporte.DetDocIngresoRepBean">
        declare @unineg varchar(6) 
        set @unineg='champs'
        select distinct 
        upper(uni.nombreUniNeg)  as nombreUniNeg,	 
        (case when tipDoc.codigo = 'Recibo' then 'REC.' when tipDoc.codigo = 'Factura' then 'FAC.' 
        when tipDoc.codigo = 'Boleta' then 'BOL.' else '-' end)  
        +' '+(doc.serie+' - '+right(replicate('0', 7) + rtrim(doc.nrodoc), 7))  as serieNroDoc  
        ,upper(doc.discente)                                                         as discente          
        ,(case when doc.creaStatus is null then  convert(varchar,doc.fechapago,103)  else  convert(varchar,creaFechaStatus,103) end)  as fechaVista 
        ,isnull(det.referencia,'')  as referencia
        ,(case when tcon.idTipoConcepto in (100,101) then det.cuentad else det.cuentah end) as cuenta
        ,isnull(det.montosoles,0)                                                         as montoSoles
        ,isnull(det.montodolares,0)                                                    as montoDolares
        ,tcon.nombre                                                            as nomTipoConcepto
        ,con.nombre                                                             as nomConcepto
        ,sta.codigo                                                             as estadoDocIng
        ,substring(lug.codigo,1,1) as lugar
        FROM MT_DetDocIngreso det                                         
        inner JOIN MT_DocIngreso doc on det.iddocingreso=doc.iddocingreso and doc.unineg=det.unineg   
        left join MT_Concepto con  on con.idconcepto = det.idconcepto   
        left join MT_TipoConcepto tcon on tcon.idTipoConcepto=con.idtipoconcepto           
        LEFT JOIN MO_Codigo tipDoc ON tipDoc.idcodigo = doc.idtipodoc   
        left join MO_Codigo lug on lug.idcodigo=doc.idtipolugarpago
        LEFT JOIN MO_UnidadNegocio uni ON uni.unineg = doc.unineg  
        left join MT_CtasxCobrar c on det.idctasxcobrar=c.idctasxcobrar and c.unineg=doc.unineg 
        LEFT join MO_Codigo sta on sta.idcodigo=c.idtipostatusctacte      
        where
        det.unineg=@unineg  and isnull(sta.codigo,'')='pagado'          
        and tcon.idtipoconcepto in (100)        
        <if test="discente != null and discente != ''">
            and upper(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(doc.discente,'á','a'),'é','e'),'í','i'),'ó','o'),'ú','u'))
            like concat('%',#{discente},'%')  
        </if>     
        and doc.anio =year(getdate())
        order by 4
    </select> 
    <update id="cambiarEstadoDocIngreso" parameterType="pe.marista.sigma.bean.DocIngresoBean">
        UPDATE MT_DocIngreso
        SET 
        discente=#{nombreDiscente},
        idtipostatusdocing=#{tipoStatusDocIng.idCodigo},
        <!--creaFechaStatus=getDate(),-->
        <!--creaFechaStatus=isnull(convert(datetime,#{fechaPago}),getDate()),-->
        creaFechaStatus=isnull(convert(datetime,fechaPago),getDate()),
        <!--creaFechaStatus= getDate() ,-->
        creaStatus=#{creaStatus},
        montoefectivosol=#{montoEfectivoSol},
        montoefectivodol=#{montoEfectivoDol},
        montopos1=#{montoPos1},
        montopos2=#{montoPos2},
        <!--
        idcajagen=null,
        idcaja=null,
        -->
        idcajagen=null,
        idcajagenanulado=#{cajaGenBean.idCajaGen},
        flganulado=1,
        obs=  #{obs} 
        where  iddocingreso = #{idDocIngreso} and uniNeg=#{unidadNegocioBean.uniNeg}
    </update>
    <update id="cambiarDatBasicosDocIngreso" parameterType="pe.marista.sigma.bean.DocIngresoBean">
        UPDATE MT_DocIngreso
        SET 
        discente=#{nombreDiscente}, 
        obs=  #{obs} 
        where  iddocingreso = #{idDocIngreso} and uniNeg=#{unidadNegocioBean.uniNeg}
    </update>
    <update id="cambiarDatBasicosDocIngresoBecaTotal" parameterType="pe.marista.sigma.bean.DocIngresoBean">
        UPDATE MT_DocIngreso
        SET  
        idtipolugarpago=19301,
        idtipomodopago=15803,
        fechaPago=#{fechaPago},
        idestudiantebeca=#{cuentasPorCobrarBean.estudianteBecaBean.idEstudianteBeca},
        montoefectivosol=0.00,
        idtipostatusdocing=20601
        where  iddocingreso = #{idDocIngreso} and uniNeg=#{unidadNegocioBean.uniNeg}
    </update>
    <update id="cambiarDatBasicosDocIngresoBecaToCambio" parameterType="pe.marista.sigma.bean.DocIngresoBean">
        UPDATE MT_DocIngreso
        SET 
        idtipolugarpago=NULL,
        idtipomodopago=NULL,
        fechaPago=NULL,
        idestudiantebeca=#{cuentasPorCobrarBean.estudianteBecaBean.idEstudianteBeca},
        montoefectivosol=0.00,
        idtipostatusdocing=20604
        where  iddocingreso = #{idDocIngreso} and uniNeg=#{unidadNegocioBean.uniNeg}
    </update>
    <update id="cambiarDatBasicosDocIngresoBeca" parameterType="pe.marista.sigma.bean.DocIngresoBean">
        UPDATE MT_DocIngreso
        SET   
        idestudiantebeca=#{cuentasPorCobrarBean.estudianteBecaBean.idEstudianteBeca}
        where  iddocingreso = #{idDocIngreso} and uniNeg=#{unidadNegocioBean.uniNeg}
    </update>
    <update id="cambiarGradoAcademicoEnDocIng" parameterType="pe.marista.sigma.bean.DocIngresoBean">
        UPDATE MT_DocIngreso
        SET 
        idgradoacademico=#{cuentasPorCobrarBean.matriculaBean.gradoAcademicoBean.idGradoAcademico}
        ,modiPor=#{modiPor}
        where  iddocingreso = #{idDocIngreso} and uniNeg=#{unidadNegocioBean.uniNeg}
    </update>
    <update id="anularDetDocIngresoPorIdDocIng" parameterType="pe.marista.sigma.bean.DocIngresoBean">
        UPDATE MT_DetDocIngreso
        SET  
        montopagado=0.0,
        montosoles=0.0,
        montodolares=0.0,
        mora=0.0,
        modiPor=#{modiPor} 
        where  iddocingreso = #{idDocIngreso} and uniNeg=#{unidadNegocioBean.uniNeg}
    </update>
    <select id="validarSerieNroDoc" resultMap="docIngresoResultado" parameterType="map">
        select idDocingreso, uniNeg from mt_docingreso
        where serie=#{serie} and nroDoc=convert(int,#{nroDoc}) and impresora=#{impresora} and unineg=#{uniNeg} 
    </select> 
    <update id="modificarDocIngresoPension" parameterType="pe.marista.sigma.bean.DocIngresoBean">
        UPDATE MT_DocIngreso
        set
        impresora=#{impresoraCajaBean.impresora.impresora}, 
        idcaja=#{impresoraCajaBean.cajaBean.idCaja},
        idcajagen=#{cajaGenBean.idCajaGen},  
        obs=#{obs},
        idtipolugarpago=#{idTipoLugarPago.idCodigo},
        idtipomodopago=#{idTipoModoPago.idCodigo},
        <!--fechapago=#{fechaPago}, -->
        fechapago=getDate(), 
        modipor=#{modiPor}, 
        montoPos1= #{montoPos1},
        montoPos2=#{montoPos2},
        montoEfectivoSol=#{montoEfectivoSol},
        montoEfectivoDol=#{montoEfectivoDol},
        idtipocambio= #{tipoCambioBean.idTipoMoneda},
        tc=#{tipoCambioBean.tcVenta},
        idtipostatusdocing =#{tipoStatusDocIng.idCodigo},
        flgMasivo=#{flgMasivo}       
        where  iddocingreso = (select distinct iddocingreso from MT_detDocIngreso where idctasxcobrar=#{idCtaxCobrar})
        and uniNeg=#{unidadNegocioBean.uniNeg} 
    </update>
    <update id="modificarDocIngresoRetificacion" parameterType="pe.marista.sigma.bean.DocIngresoBean">
        UPDATE MT_DocIngreso
        set 
        idtipolugarpago=#{idTipoLugarPago.idCodigo},
        idtipomodopago=#{idTipoModoPago.idCodigo},
        fechapago=#{fechaPago}, 
        modipor=#{modiPor},  
        montoEfectivoSol=#{montoEfectivoSol},  
        idtipostatusdocing =#{tipoStatusDocIng.idCodigo} 
        where  iddocingreso = (select distinct iddocingreso from MT_detDocIngreso where idctasxcobrar=#{cuentasPorCobrarBean.idCtasXCobrar})
        and uniNeg=#{unidadNegocioBean.uniNeg} 
    </update> 
    <update id="modificarDetDocIngresoPension" parameterType="pe.marista.sigma.bean.DetDocIngresoBean">
        UPDATE MT_DetDocIngreso
        set 
        monto=#{monto}
        ,dscto=#{dscto}
        ,dsctobeca=#{dsctoBeca}
        ,montopagado=#{montoPagado}
        ,idtipodscto=#{idTipoDscto.idCodigo}
        ,idtipomotivodscto =#{idTipoMotivoDscto.idCodigo}
        ,cr= #{centroResponsabilidadBean.cr}
        ,idctasxcobrar=#{cuentasPorCobrarBean.idCtasXCobrar}
        ,modipor=#{modiPor} 
        ,montoSoles=#{montoSoles}
        ,montoDolares=#{montoDolares}
        ,mora=#{mora}
        ,referencia=#{referencia}  
        where  iddocingreso = (select distinct iddocingreso from MT_detDocIngreso where idctasxcobrar=#{cuentasPorCobrarBean.idCtasXCobrar} and uniNeg=#{unidadNegocioBean.uniNeg} )
        and uniNeg=#{unidadNegocioBean.uniNeg}
    </update>
    <update id="modificarDetDocIngresoRetificacion" parameterType="pe.marista.sigma.bean.DetDocIngresoBean">
        UPDATE MT_DetDocIngreso
        set  
        montopagado=#{montoPagado} 
        ,modipor=#{modiPor} 
        ,montoSoles=#{montoSoles} 
        ,mora=#{mora} 
        where  iddocingreso = (select distinct iddocingreso from MT_detDocIngreso where idctasxcobrar=#{cuentasPorCobrarBean.idCtasXCobrar} and uniNeg=#{unidadNegocioBean.uniNeg} )
        and uniNeg=#{unidadNegocioBean.uniNeg}
    </update>
    <update id="modificarDetDocIngresoPensionAnulacion" parameterType="pe.marista.sigma.bean.DocIngresoBean">
        UPDATE MT_DetDocIngreso
        set  
        montopagado=0
        ,modipor=#{modiPor} 
        ,montoSoles=0
        ,montoDolares=0
        ,mora=0
        where  iddocingreso = #{idDocIngreso} and uniNeg=#{unidadNegocioBean.uniNeg}
    </update>
    <update id="modificarConceptoCambioGrado" parameterType="pe.marista.sigma.bean.DocIngresoBean">
        DECLARE @idGrado INTEGER,@uniNeg varchar(6) ,@id Integer
        SET @idGrado=#{idGradoAcademico}
        set @uniNeg=#{uniNeg} 
        set @id =#{idDocIngreso} 
        UPDATE MT_DetDocIngreso
        set  
        idConcepto =(case when @IDGRADO=23 then 10001 
        when @IDGRADO=24 then 10002
        when @IDGRADO=25 then 10003
        when @IDGRADO=1 then 10004
        when @IDGRADO=2 then 10005
        when @IDGRADO=3 then 10006
        when @IDGRADO=4 then 10007
        when @IDGRADO=5 then 10008
        when @IDGRADO=6 then 10009
        when @IDGRADO=7 then 10010
        when @IDGRADO=8 then 10011
        when @IDGRADO=9 then 10012
        when @IDGRADO=10 then 10013
        when @IDGRADO=11 then 10015
        end) 
        where  iddocingreso = @id and uniNeg=@uniNeg
    </update>
    <select  id="obtenerDocIngresoPorCtaCobrar" parameterType="map" resultType="Integer">
        select distinct iddocingreso from MT_detDocIngreso where idctasxcobrar=#{idCtaXCobrar} and uniNeg=#{uniNeg}
    </select>

    <!--Masivo-->
    <!--select id="obtenerDocIngreso" resultMap="docIngresoResultado" parameterType="map">
        select 
        doc.iddocingreso,
        det.iddetdocingreso,
        cta.idctasxcobrar,
        doc.uniNeg,
        doc.idDiscente,
        doc.anio,
        cta.mes
        from MT_DocIngreso doc
        Inner Join MT_DetDocIngreso det On doc.iddocingreso=det.iddocingreso
        Inner Join MT_CtasxCobrar cta ON det.idctasxcobrar=cta.idctasxcobrar
        <where>
            doc.unineg = #{uniNeg} and doc.iddiscente = #{idDiscente} and doc.anio = #{anio} and cta.mes = #{mes}
        </where>
    </select-->
    <select  id="obtenerRecDocIngresoFor" parameterType="map" resultType="pe.marista.sigma.bean.reporte.DocIngresoRepBean">
        declare @distrito varchar(200) = (select nombre from MO_Distrito where iddistrito=(select iddistrito from MO_Entidad where ruc=(select ruc from MO_UnidadNegocio  where unineg=#{uniNeg})))
        select 
        'Fecha de emisión: '+(select  
        @distrito
        +', '+(select convert(varchar,datepart(day,(case when convert(date,c.fechapago) <![CDATA[ <=  ]]>  convert(date,c.fechavenc) then c.fechapago else c.fechavenc end  ))))
        +' de '+(select convert(varchar,DATENAME(month,(case when convert(date,c.fechapago) <![CDATA[ <=  ]]>  convert(date,c.fechavenc) then c.fechapago else c.fechavenc end  ))))
        +' del '+(select convert(varchar,DATENAME(year,(case when convert(date,c.fechapago) <![CDATA[ <=  ]]>  convert(date,c.fechavenc) then c.fechapago else c.fechavenc end  ))))
        from MT_DocIngreso d
        inner join mt_ctasxcobrar c on d.iddocingreso=c.iddocingreso and c.unineg=d.unineg
        where d.iddocingreso=doc.iddocingreso
        ) as fecha
        ,(select convert(varchar,doc.fechapago,103)) as fechaStr 
        ,CONCAT(ISNULL(doc.serie,''),'-',ISNULL(doc.nrodoc,''),'/',est.codigo) as qr
        ,(CASE WHEN doc.fechapago IS NOT NULL THEN 'OP: '+ REPLACE(convert(VARCHAR(8), doc.fechapago, 14),':','') ELSE '' END)       as numOperacion
        ,upper(isnull(ent.nombrecomercial,(select upper(isnull(nombreUniNeg,'')) from MO_UnidadNegocio where unineg=#{uniNeg}))) as nombre
        ,ent.direccion											     as direccion
        ,dis.nombre                                                                                          as nomDistrito
        ,(case when ent.telefono is not null and ent.telefono!=' ' then 'Telfs.: '+ent.telefono else ' ' end) as telefono
        ,(case when ent.correo is not null and ent.correo!=' '  then 'E-mail: '+ent.correo else ' ' end) as correo
        ,'R.U.C '+ent.ruc										     as ruc
        ,UPPER(cod.codigo)										     as tipoDoc																					   
        , concat(doc.serie,' - ',right(replicate('0', 7) + rtrim(doc.nrodoc), 7))			     as serieNroDoc    
        ,(case when isnull(ddoc.montopagado,0)>0 AND isnull(doc.flgmasivo,'') IN ('B','C','G') then 'CANCELADO'  else '' end) as infoRecibo
        ,UPPER(doc.idRespPago)              								     AS idResPago
        ,(case when c.mes=2 then ' ' else isnull(doc.respPago,'')  end)                                                                          as resPago
        
        ,UPPER(doc.discente)										    as discente
		
        ,est.codigo                                                                                         as codEstudiante	
        ,isnull(niv2.nombre,'')                                                                              as nombreNivel      
        ,(case when c.mes=2 then isnull(PARSENAME(LTRIM(REPLACE(PARSENAME(REPLACE(gra2.nombre,niv2.nombre,''),1),'Pre-','')),1) ,'') else
        isnull(PARSENAME(LTRIM(REPLACE(PARSENAME(REPLACE(gra2.nombre,niv2.nombre,''),1),'Pre-','')),1) ,'')+ ' '+isnull('- '+mat.seccion,' ') end)  as nombreGrado                                                                
        
        ,(case when ddoc.dsctobeca <![CDATA[ >  ]]> 0 then ' ' else 'X' end ) as pagante 
        ,(case when ddoc.dsctobeca <![CDATA[ >  ]]> 0 then 'X' else ' ' end )  as becado
        
        ,(case when codLug.codigo='Colegio' then 'X' else ' ' end ) as colegio
        ,(case when codLug.codigo='Banco' then 'X' else ' ' end ) as banco
		
        ,(
        case
        when c.mes=2 then 'MATRÍCULA'
        when c.mes=3 then  'MARZO' 
        when c.mes=4 then   'ABRIL' 
        when c.mes=5 then   'MAYO'  
        when c.mes=6 then 'JUNIO' 
        when c.mes=7 then  'JULIO' 
        when c.mes=8 then   'AGOSTO'  
        when c.mes=9 then   'SEPTIEMBRE'  
        when c.mes=10 then   'OCTUBRE'  
        when c.mes=11 then   'NOVIEMBRE'  
        when c.mes=12 then 'DICIEMBRE'  
        END
        ) AS correspondientea 
        ,(select convert(varchar,C.fechaVenc ,103))	  as  fechaVenc 
        ,(case when c.idestudiantebeca is not null or c.dsctobeca <![CDATA[ > ]]>0 
        then isnull(beca.nombre,'')
        else '-'   
        end) as tipoBeca,
        (CASE WHEN isnull(DDOC.MORA,0) <![CDATA[ > ]]> 0 THEN 1 ELSE 0 END) AS mora,
        (CASE WHEN isnull(DDOC.dsctobeca,0) <![CDATA[ > ]]> 0 THEN 1 ELSE 0 END) AS beca,
        (CASE WHEN isnull(DDOC.dscto,0) <![CDATA[ > ]]> 0 THEN 1 ELSE 0 END) AS dscto,
        doc.idDocIngreso,
        doc.anio as anio,
        (CONVERT(varchar, CAST((ddoc.montopagado)AS money), 1)) as montoPagadoVista,
        upper(ddoc.referencia) as nomConcepto 
        ,(
        case
        when c.mes=2 then 'NOTA: EL GRADO ES REFERENCIAL, ESTA SUJETO A LOS RESULTADOS FINALES DEL AÑO '+convert(varchar,c.anio-1)
        else ' '
        end ) as referencial ,
        isnull(convert(varchar,c.fechapago,103),'-') as fechaPago 
        from MT_DetDocIngreso ddoc 
        LEFT join MT_DocIngreso doc on doc.iddocingreso=ddoc.iddocingreso and ddoc.unineg=doc.unineg
        LEFT join MT_CtasxCobrar c on c.idctasxcobrar=ddoc.idctasxcobrar and ddoc.unineg=c.unineg
        LEFT join MX_Estudiante est on est.idestudiante=doc.iddiscente and est.unineg=doc.unineg
        LEFT join MX_Persona p on est.idestudiante = p.idpersona and est.unineg = p.unineg
        LEFT join mo_Codigo cod on cod.idcodigo = doc.idtipodoc
        LEFT join mo_Codigo codLug on doc.idtipolugarpago = codLug.idcodigo  
        LEFT JOIN MO_UnidadNegocio uni ON uni.unineg = doc.unineg
        LEFT JOIN MO_Entidad ent ON ent.ruc = uni.RUC and uni.unineg=ent.unineg
        LEFT JOIN MO_Distrito dis ON dis.iddistrito = ent.iddistrito
        LEFT JOIN MX_GradoAcademico gra ON gra.idgradoacademico = est.idgradohabilitado
        LEFT JOIN MX_NivelAcademico niv ON niv.idnivelacademico = gra.idnivelacademico
        LEFT JOIN MX_EstudianteBeca estBe on estBe.idestudiantebeca=c.idestudiantebeca
        left Join MT_Beca beca on estBe.idbeca=beca.idbeca
        left join mx_matricula mat on mat.idmatricula=c.idmatricula and c.unineg=mat.unineg
        LEFT JOIN MX_GradoAcademico gra2 ON gra2.idgradoacademico = mat.idgradoacademico
        LEFT JOIN MX_NivelAcademico niv2 ON niv2.idnivelacademico = gra2.idnivelacademico
        where doc.unineg=#{uniNeg}  and  doc.iddocingreso  in
        <foreach item="item" index="index" collection="list" 
                 open="(" separator="," close=")">
            #{item}
        </foreach>
        <!--order by c.fechapago,niv.idNivelAcademico desc,gra.idGradoAcademico,est.seccion,p.apepat,p.apemat -->
        order by niv2.idnivelacademico desc,gra2.idgradoacademico, mat.seccion,p.apepat,p.apemat,p.nombre 
    </select>
    <select  id="obtenerRecDocIngresoForSinOrderBy" parameterType="map" resultType="pe.marista.sigma.bean.reporte.DocIngresoRepBean">
        declare @distrito varchar(200) = (select nombre from MO_Distrito where iddistrito=(select iddistrito from MO_Entidad where ruc=(select ruc from MO_UnidadNegocio  where unineg=#{uniNeg})))
        select 
        'Fecha de emisión: '+isnull((select  
        @distrito
        +', '+(select convert(varchar,datepart(day,(case when convert(date,c.fechapago) <![CDATA[ <=  ]]>  convert(date,c.fechavenc) then c.fechapago else c.fechavenc end  ))))
        +' de '+(select convert(varchar,DATENAME(month,(case when convert(date,c.fechapago) <![CDATA[ <=  ]]>  convert(date,c.fechavenc) then c.fechapago else c.fechavenc end  ))))
        +' del '+(select convert(varchar,DATENAME(year,(case when convert(date,c.fechapago) <![CDATA[ <=  ]]>  convert(date,c.fechavenc) then c.fechapago else c.fechavenc end  ))))
        from MT_DocIngreso d
        inner join mt_ctasxcobrar c on d.iddocingreso=c.iddocingreso and c.unineg=d.unineg
        where d.iddocingreso=doc.iddocingreso),
        (select  
        @distrito
        +', '+(select convert(varchar,datepart(day,getdate())))
        +' de '+(select convert(varchar,DATENAME(month,getdate())))
        +' del '+(select convert(varchar,DATENAME(year,getdate())))
        from MT_DocIngreso d
        inner join mt_ctasxcobrar c on d.iddocingreso=c.iddocingreso and c.unineg=d.unineg
        where d.iddocingreso=doc.iddocingreso
        )
        ) as fecha
        ,(select convert(varchar,doc.fechapago,103)) as fechaStr 
        ,CONCAT(ISNULL(doc.serie,''),'-',ISNULL(doc.nrodoc,''),'/',est.codigo) as qr
        ,(CASE WHEN doc.fechapago IS NOT NULL THEN 'OP: '+ REPLACE(convert(VARCHAR(8), doc.fechapago, 14),':','') ELSE '' END)       as numOperacion,
        isnull(convert(varchar,c.fechapago,103),'-') as fechaPago 
        ,upper(isnull(ent.nombrecomercial,(select upper(isnull(nombreUniNeg,'')) from MO_UnidadNegocio where unineg=#{uniNeg}))) as nombre
        ,ent.direccion											     as direccion
        ,dis.nombre                                                                                          as nomDistrito
        ,(case when ent.telefono is not null and ent.telefono!=' ' then 'Telfs.: '+ent.telefono else ' ' end) as telefono
        ,(case when ent.correo is not null and ent.correo!=' '  then 'E-mail: '+ent.correo else ' ' end) as correo
        ,'R.U.C '+ent.ruc										     as ruc
        ,UPPER(cod.codigo)										     as tipoDoc																					   
        , concat(doc.serie,' - ',right(replicate('0', 7) + rtrim(doc.nrodoc), 7))			     as serieNroDoc    
        ,(case when isnull(ddoc.montopagado,0)>0 AND isnull(doc.flgmasivo,'') IN ('B','C','G') then 'CANCELADO'  else '' end) as infoRecibo
        ,UPPER(doc.idRespPago)              								     AS idResPago
        ,(case when c.mes=2 then ' ' else isnull(doc.respPago,'')  end)                                    as resPago
        ,c.mes as mes
        ,UPPER(doc.discente)										    as discente
		
        ,est.codigo                                                                                         as codEstudiante	
        ,isnull(niv2.nombre,'')                                                                              as nombreNivel      
        ,(case when c.mes=2 then isnull(PARSENAME(LTRIM(REPLACE(PARSENAME(REPLACE(gra2.nombre,niv2.nombre,''),1),'Pre-','')),1) ,'') else
        isnull(PARSENAME(LTRIM(REPLACE(PARSENAME(REPLACE(gra2.nombre,niv2.nombre,''),1),'Pre-','')),1) ,'')+ ' '+isnull('- '+mat.seccion,' ') end) as nombreGrado                                                                
        
        ,(case when ddoc.dsctobeca <![CDATA[ >  ]]> 0 then ' ' else 'X' end ) as pagante 
        ,(case when ddoc.dsctobeca <![CDATA[ >  ]]> 0 then 'X' else ' ' end )  as becado
        
        ,(case when codLug.codigo='Colegio' then 'X' else ' ' end ) as colegio
        ,(case when codLug.codigo='Banco' then 'X' else ' ' end ) as banco
		
        ,(
        case
        when c.mes=2 then 'MATRÍCULA'
        when c.mes=3 then  'MARZO' 
        when c.mes=4 then   'ABRIL' 
        when c.mes=5 then   'MAYO'  
        when c.mes=6 then 'JUNIO' 
        when c.mes=7 then  'JULIO' 
        when c.mes=8 then   'AGOSTO'  
        when c.mes=9 then   'SEPTIEMBRE'  
        when c.mes=10 then   'OCTUBRE'  
        when c.mes=11 then   'NOVIEMBRE'  
        when c.mes=12 then 'DICIEMBRE'  
        END
        ) AS correspondientea  
        ,isnull((select convert(varchar,C.fechaVenc ,103)),'-')	  as  fechaVenc 
        ,(case when c.idestudiantebeca is not null or c.dsctobeca <![CDATA[ > ]]>0 
        then isnull(beca.nombre,'')
        else '-'   
        end) as tipoBeca,
        (CASE WHEN isnull(DDOC.MORA,0) <![CDATA[ > ]]> 0 THEN 1 ELSE 0 END) AS mora,
        (CASE WHEN isnull(DDOC.dsctobeca,0) <![CDATA[ > ]]> 0 THEN 1 ELSE 0 END) AS beca,
        (CASE WHEN isnull(DDOC.dscto,0) <![CDATA[ > ]]> 0 THEN 1 ELSE 0 END) AS dscto,
        doc.idDocIngreso,
        doc.anio as anio,
        (CONVERT(varchar, CAST((ddoc.montopagado)AS money), 1)) as montoPagadoVista,
        upper(ddoc.referencia) as nomConcepto
        ,doc.idrecibosmora as idRecibosMora,c.mes,est.idestudiante as idEstudiante
        ,(
        case
        when c.mes=2 then 'NOTA: EL GRADO ES REFERENCIAL, ESTA SUJETO A LOS RESULTADOS FINALES DEL AÑO '+convert(varchar,c.anio-1)
        else ' '
        end ) as referencial 
        from MT_DetDocIngreso ddoc 
        LEFT join MT_DocIngreso doc on doc.iddocingreso=ddoc.iddocingreso and ddoc.unineg=doc.unineg
        LEFT join MT_CtasxCobrar c on c.idctasxcobrar=ddoc.idctasxcobrar and ddoc.unineg=c.unineg
        LEFT join MX_Estudiante est on est.idestudiante=doc.iddiscente and est.unineg=doc.unineg
        LEFT join MX_Persona p on est.idestudiante = p.idpersona and est.unineg = p.unineg
        LEFT join mo_Codigo cod on cod.idcodigo = doc.idtipodoc
        LEFT join mo_Codigo codLug on doc.idtipolugarpago = codLug.idcodigo  
        LEFT JOIN MO_UnidadNegocio uni ON uni.unineg = doc.unineg
        LEFT JOIN MO_Entidad ent ON ent.ruc = uni.RUC and uni.unineg=ent.unineg
        LEFT JOIN MO_Distrito dis ON dis.iddistrito = ent.iddistrito
        LEFT JOIN MX_GradoAcademico gra ON gra.idgradoacademico = est.idgradohabilitado
        LEFT JOIN MX_NivelAcademico niv ON niv.idnivelacademico = gra.idnivelacademico
        LEFT JOIN MX_EstudianteBeca estBe on estBe.idestudiantebeca=c.idestudiantebeca
        left Join MT_Beca beca on estBe.idbeca=beca.idbeca
        left join mx_matricula mat on mat.idmatricula=c.idmatricula and c.unineg=mat.unineg
        LEFT JOIN MX_GradoAcademico gra2 ON gra2.idgradoacademico = mat.idgradoacademico
        LEFT JOIN MX_NivelAcademico niv2 ON niv2.idnivelacademico = gra2.idnivelacademico
        where doc.unineg=#{uniNeg}  and  doc.iddocingreso  in
        <foreach item="item" index="index" collection="list" 
                 open="(" separator="," close=")">
            #{item}
        </foreach> 
        <if test="orden == 1" >
            order by niv2.idnivelacademico desc,gra2.idgradoacademico, mat.seccion,p.apepat,p.apemat, p.nombre
        </if> 
        <if test="orden == 2" >
            order by c.fechapago 
        </if> 
        <if test="orden == 3" >
            order by c.fechapago desc
        </if> 
        <if test="orden == 4" >
            order by doc.nrodoc
        </if>        
        <if test="orden == 5" >
            order by p.apepat,p.apemat, p.nombre asc
        </if>        
    </select>
    <select  id="obtenerRecDocIngresoForForSimple" parameterType="map" resultType="pe.marista.sigma.bean.reporte.DocIngresoRepBean">
        select   
        upper(isnull(ent.nombrecomercial,(select upper(isnull(nombreUniNeg,'')) from MO_UnidadNegocio where unineg=#{uniNeg}))) as nombre  
        ,ent.direccion											     as direccion
        ,dis.nombre                                                                                          as nomDistrito
        ,(case when ent.telefono is not null and ent.telefono!=' ' then 'Telfs.: '+ent.telefono else ' ' end) as telefono
        ,(case when ent.correo is not null and ent.correo!=' '  then 'E-mail: '+ent.correo else ' ' end) as correo     
        ,upper(ddoc.referencia) as nomConcepto
        ,UPPER(rtrim(ltrim(doc.discente)))							           as discente
        ,(select convert(varchar,doc.fechapago,103)) as fechaStr           				
        ,(CONVERT(varchar, CAST((isnull(c.monto,0)-isnull(c.dsctobeca,0))AS money), 1)) as montoPensionVista        
        ,(CONVERT(varchar, CAST((isnull(c.mora,0)-isnull(c.dscto,0))AS money), 1))	as moraVista        
        ,(CONVERT(varchar, CAST((ddoc.montopagado)AS money), 1))			as montoPagadoVista 
        ,concat(doc.serie,' - ',right(replicate('0', 7) + rtrim(doc.nrodoc), 7))     as serieNroDoc 
        ,'(PENSIONES AÑO '+ CONVERT(VARCHAR(4),ISNULL(C.ANIO,MAT.ANIO))+')'   as infoRecibo 
        from MT_DetDocIngreso ddoc 
        LEFT join MT_DocIngreso doc on doc.iddocingreso=ddoc.iddocingreso and ddoc.unineg=doc.unineg
        LEFT join MT_CtasxCobrar c on c.idctasxcobrar=ddoc.idctasxcobrar and ddoc.unineg=c.unineg 
          
        LEFT JOIN MO_UnidadNegocio uni ON uni.unineg = doc.unineg
        LEFT JOIN MO_Entidad ent ON ent.ruc = uni.RUC and uni.unineg=ent.unineg
        LEFT JOIN MO_Distrito dis ON dis.iddistrito = ent.iddistrito
        left join mx_matricula mat on mat.idmatricula=c.idmatricula and c.unineg=mat.unineg  
        where doc.unineg=#{uniNeg}  and  doc.iddocingreso  in
        <foreach item="item" index="index" collection="list" 
                 open="(" separator="," close=")">
            #{item}
        </foreach> 
        order by c.anio, c.mes,doc.discente
    </select>
    <select  id="obtenerRecDocIngresoForSinOrderByUnico" parameterType="map" resultType="pe.marista.sigma.bean.reporte.DocIngresoRepBean">
        declare @distrito varchar(200) = (select nombre from MO_Distrito where iddistrito=(select iddistrito from MO_Entidad where ruc=(select ruc from MO_UnidadNegocio  where unineg=#{uniNeg})))
        select 
        'Fecha de emisión: '+(select  
        @distrito
        +', '+(select convert(varchar,datepart(day,(case when convert(date,c.fechapago) <![CDATA[ <=  ]]>  convert(date,c.fechavenc) then c.fechapago else c.fechavenc end  ))))
        +' de '+(select convert(varchar,DATENAME(month,(case when convert(date,c.fechapago) <![CDATA[ <=  ]]>  convert(date,c.fechavenc) then c.fechapago else c.fechavenc end  ))))
        +' del '+(select convert(varchar,DATENAME(year,(case when convert(date,c.fechapago) <![CDATA[ <=  ]]>  convert(date,c.fechavenc) then c.fechapago else c.fechavenc end  ))))
        from MT_DocIngreso d
        inner join mt_ctasxcobrar c on d.iddocingreso=c.iddocingreso and c.unineg=d.unineg
        where d.iddocingreso=doc.iddocingreso
        ) as fecha
        ,(select convert(varchar,doc.fechapago,103)) as fechaStr 
        ,CONCAT(ISNULL(doc.serie,''),'-',ISNULL(doc.nrodoc,''),'/',est.codigo) as qr
        ,(CASE WHEN doc.fechapago IS NOT NULL THEN 'OP: '+ REPLACE(convert(VARCHAR(8), doc.fechapago, 14),':','') ELSE '' END)       as numOperacion,
        isnull(convert(varchar,c.fechapago,103),'-') as fechaPago 
        ,upper(isnull(ent.nombrecomercial,(select upper(isnull(nombreUniNeg,'')) from MO_UnidadNegocio where unineg=#{uniNeg}))) as nombre
        ,ent.direccion											     as direccion
        ,dis.nombre                                                                                          as nomDistrito
        ,(case when ent.telefono is not null and ent.telefono!=' ' then 'Telfs.: '+ent.telefono else ' ' end) as telefono
        ,(case when ent.correo is not null and ent.correo!=' '  then 'E-mail: '+ent.correo else ' ' end) as correo
        ,'R.U.C '+ent.ruc										     as ruc
        ,UPPER(cod.codigo)										     as tipoDoc																					   
        , concat(doc.serie,' - ',right(replicate('0', 7) + rtrim(doc.nrodoc), 7))			     as serieNroDoc    
        ,(case when isnull(ddoc.montopagado,0)>0 AND isnull(doc.flgmasivo,'') IN ('B','C','G') then 'CANCELADO'  else '' end) as infoRecibo
        ,UPPER(doc.idRespPago)              								     AS idResPago
        ,(case when c.mes=2 then ' ' else isnull(doc.respPago,'')  end)                                    as resPago
        ,c.mes as mes
        ,UPPER(doc.discente)										    as discente
		
        ,est.codigo                                                                                         as codEstudiante	
        ,isnull(niv2.nombre,'')                                                                              as nombreNivel      
        ,(case when c.mes=2 then isnull(PARSENAME(LTRIM(REPLACE(PARSENAME(REPLACE(gra2.nombre,niv2.nombre,''),1),'Pre-','')),1) ,'') else
        isnull(PARSENAME(LTRIM(REPLACE(PARSENAME(REPLACE(gra2.nombre,niv2.nombre,''),1),'Pre-','')),1) ,'')+ ' '+isnull('- '+mat.seccion,' ') end) as nombreGrado                                                                
        
        ,(case when ddoc.dsctobeca <![CDATA[ >  ]]> 0 then ' ' else 'X' end ) as pagante 
        ,(case when ddoc.dsctobeca <![CDATA[ >  ]]> 0 then 'X' else ' ' end )  as becado
        
        ,(case when codLug.codigo='Colegio' then 'X' else ' ' end ) as colegio
        ,(case when codLug.codigo='Banco' then 'X' else ' ' end ) as banco
		
        ,(
        case
        when c.mes=2 then 'MATRÍCULA'
        when c.mes=3 then  'MARZO' 
        when c.mes=4 then   'ABRIL' 
        when c.mes=5 then   'MAYO'  
        when c.mes=6 then 'JUNIO' 
        when c.mes=7 then  'JULIO' 
        when c.mes=8 then   'AGOSTO'  
        when c.mes=9 then   'SEPTIEMBRE'  
        when c.mes=10 then   'OCTUBRE'  
        when c.mes=11 then   'NOVIEMBRE'  
        when c.mes=12 then 'DICIEMBRE'  
        END
        ) AS correspondientea  
        ,(select convert(varchar,C.fechaVenc ,103))	  as  fechaVenc 
        ,(case when c.idestudiantebeca is not null or c.dsctobeca <![CDATA[ > ]]>0 
        then isnull(beca.nombre,'')
        else '-'   
        end) as tipoBeca,
        (CASE WHEN isnull(DDOC.MORA,0) <![CDATA[ > ]]> 0 THEN 1 ELSE 0 END) AS mora,
        (CASE WHEN isnull(DDOC.dsctobeca,0) <![CDATA[ > ]]> 0 THEN 1 ELSE 0 END) AS beca,
        (CASE WHEN isnull(DDOC.dscto,0) <![CDATA[ > ]]> 0 THEN 1 ELSE 0 END) AS dscto,
        doc.idDocIngreso,
        doc.anio as anio,
        (CONVERT(varchar, CAST((ddoc.montopagado)AS money), 1)) as montoPagadoVista,
        upper(ddoc.referencia) as nomConcepto
        ,doc.idrecibosmora as idRecibosMora,c.mes,est.idestudiante as idEstudiante
        ,(
        case
        when c.mes=2 then 'NOTA: EL GRADO ES REFERENCIAL, ESTA SUJETO A LOS RESULTADOS FINALES DEL AÑO '+convert(varchar,c.anio-1)
        else ' '
        end ) as referencial 
        from MT_DetDocIngreso ddoc 
        LEFT join MT_DocIngreso doc on doc.iddocingreso=ddoc.iddocingreso and ddoc.unineg=doc.unineg
        LEFT join MT_CtasxCobrar c on c.idctasxcobrar=ddoc.idctasxcobrar and ddoc.unineg=c.unineg
        LEFT join MX_Estudiante est on est.idestudiante=doc.iddiscente and est.unineg=doc.unineg
        LEFT join MX_Persona p on est.idestudiante = p.idpersona and est.unineg = p.unineg
        LEFT join mo_Codigo cod on cod.idcodigo = doc.idtipodoc
        LEFT join mo_Codigo codLug on doc.idtipolugarpago = codLug.idcodigo  
        LEFT JOIN MO_UnidadNegocio uni ON uni.unineg = doc.unineg
        LEFT JOIN MO_Entidad ent ON ent.ruc = uni.RUC and uni.unineg=ent.unineg
        LEFT JOIN MO_Distrito dis ON dis.iddistrito = ent.iddistrito
        LEFT JOIN MX_GradoAcademico gra ON gra.idgradoacademico = est.idgradohabilitado
        LEFT JOIN MX_NivelAcademico niv ON niv.idnivelacademico = gra.idnivelacademico
        LEFT JOIN MX_EstudianteBeca estBe on estBe.idestudiantebeca=c.idestudiantebeca
        left Join MT_Beca beca on estBe.idbeca=beca.idbeca
        left join mx_matricula mat on mat.idmatricula=c.idmatricula and c.unineg=mat.unineg
        LEFT JOIN MX_GradoAcademico gra2 ON gra2.idgradoacademico = mat.idgradoacademico
        LEFT JOIN MX_NivelAcademico niv2 ON niv2.idnivelacademico = gra2.idnivelacademico
        where doc.unineg=#{uniNeg}  and  doc.iddocingreso =#{ids}
        
        <if test="orden == 1" >
            order by niv2.idnivelacademico desc,gra2.idgradoacademico, mat.seccion,p.apepat,p.apemat, p.nombre
        </if> 
        <if test="orden == 2" >
            order by c.fechapago 
        </if> 
        <if test="orden == 3" >
            order by c.fechapago desc
        </if> 
        <if test="orden == 4" >
            order by doc.nrodoc
        </if>        
        <if test="orden == 5" >
            order by p.apepat,p.apemat, p.nombre asc
        </if>        
    </select>
     
    <select  id="obtenerFormatoDocIngresoPension" parameterType="map" resultType="Integer">
        SELECT TOP 1 (CASE WHEN flgMasivo in ('C','B') THEN 1 ELSE 0 END) AS flgMasivo FROM MT_DocIngreso   
        where unineg=#{uniNeg}  and iddocingreso  in
        <foreach item="item" index="index" collection="list" 
                 open="(" separator="," close=")">
            #{item}
        </foreach> 
    </select>     
    <select id="obtenerRecDetDocIngreso" resultType="pe.marista.sigma.bean.reporte.DetDocIngresoRepBean" parameterType="map">
        Select
        CONCAT(ISNULL(doc.serie,''),'-',ISNULL(doc.nrodoc,''),'/',est.codigo) as qr,
        CON.cuentad AS cuentaD,
        upper(ddoc.referencia) as nomConcepto,   
        (CONVERT(varchar, CAST((ddoc.monto) AS money), 1)) as montoVista,
        (case when ddoc.montopagado is null or ddoc.montopagado=0.00  then  (CONVERT(varchar, CAST((ddoc.monto-isnull(ddoc.dsctobeca,0)) AS money), 1))
        when ddoc.montopagado is not null or ddoc.montopagado>0 then
        (CONVERT(varchar, CAST((ddoc.montopagado <if test="mora == 0"> - isnull(ddoc.mora,0) + isnull(ddoc.dscto,0) </if>) AS money), 1)) end)as montoPagadoVista, 
        (Select dbo.CantidadConLetra(DDOC.montopagado <if test="mora == 0"> - isnull(ddoc.mora,0) + isnull(ddoc.dscto,0)</if>)+ ' ' +
        (case when isnull(doc.idtipomoneda,14901)=14901 then 'SOLES' ELSE 'DÓLARES AMERICANOS' end )) AS textoMonto
        ,(CASE WHEN doc.fechapago IS NOT NULL THEN  'OP: '+REPLACE(convert(VARCHAR(8), doc.fechapago, 14),':','') ELSE '' END)       as numOperacion,
        isnull(convert(varchar,c.fechapago,103),'-') as fechaPago 
        ,(
        case
        when c.mes=2 then 'NOTA: EL GRADO ES REFERENCIAL, ESTA SUJETO A LOS RESULTADOS FINALES DEL AÑO '+convert(varchar,c.anio-1)
        else ' '
        end ) as referencial 
        from MT_DetDocIngreso ddoc
        inner join MT_DocIngreso doc on doc.iddocingreso=ddoc.iddocingreso and ddoc.unineg=doc.unineg
        LEFT join MX_Estudiante est on est.idestudiante=doc.iddiscente and est.unineg=doc.unineg
        inner join MT_CtasxCobrar c on c.idctasxcobrar=ddoc.idctasxcobrar and ddoc.unineg=c.unineg
        INNER JOIN MT_Concepto con ON con.idconcepto = ddoc.idconcepto
        LEFT JOIN MO_UnidadNegocio uni ON uni.unineg = doc.unineg  
        where doc.unineg=#{uniNeg}  and  doc.iddocingreso  in (#{idDocIngreso})
        <if test="beca == 1"> 
            union all
            select 
            CONCAT(ISNULL(doc.serie,''),'-',ISNULL(doc.nrodoc,''),'/',est.codigo) as qr,
            741112 as cuenta,
            (select top 1 upper(nombre) from MT_Concepto where cuentah =741112) as concepto, 
            '-'+(CONVERT(varchar, CAST((ddoc.dsctobeca)AS money), 1)) as montoVista, 
            (case when ddoc.montopagado is null or ddoc.montopagado=0.00  then  (CONVERT(varchar, CAST((ddoc.monto-isnull(ddoc.dsctobeca,0)) AS money), 1))
            when ddoc.montopagado is not null then
            (CONVERT(varchar, CAST((ddoc.montopagado <if test="mora == 0"> - isnull(ddoc.mora,0) + isnull(ddoc.dscto,0) </if>) AS money), 1)) end)as montoPagadoVista, 
            (Select dbo.CantidadConLetra(DDOC.montopagado <if test="mora == 0"> - isnull(ddoc.mora,0) + isnull(ddoc.dscto,0) </if>)+ ' ' +
            (case when isnull(doc.idtipomoneda,14901)=14901 then 'SOLES' ELSE 'DÓLARES AMERICANOS' end )) AS textoMonto
            ,(CASE WHEN doc.fechapago IS NOT NULL THEN  'OP: '+REPLACE(convert(VARCHAR(8), doc.fechapago, 14),':','') ELSE '' END)       as numOperacion,
            isnull(convert(varchar,c.fechapago,103),'-') as fechaPago 
            ,(
            case
            when c.mes=2 then 'NOTA: EL GRADO ES REFERENCIAL, ESTA SUJETO A LOS RESULTADOS FINALES DEL AÑO '+convert(varchar,c.anio-1)
            else ' '
            end ) as referencial 
            from MT_DetDocIngreso ddoc
            inner join MT_DocIngreso doc on doc.iddocingreso=ddoc.iddocingreso and ddoc.unineg=doc.unineg
            LEFT join MX_Estudiante est on est.idestudiante=doc.iddiscente and est.unineg=doc.unineg
            inner join MT_CtasxCobrar c on c.idctasxcobrar=ddoc.idctasxcobrar and ddoc.unineg=c.unineg
            INNER JOIN MT_Concepto con ON con.idconcepto = ddoc.idconcepto
            LEFT JOIN MO_UnidadNegocio uni ON uni.unineg = doc.unineg  
            where doc.unineg=#{uniNeg}  and  doc.iddocingreso  in (#{idDocIngreso})
        </if>
        <if test="mora == 1"> 
            union all            
            select 
            CONCAT(ISNULL(doc.serie,''),'-',ISNULL(doc.nrodoc,''),'/',est.codigo) as qr,
            772211 as cuenta, 
            (select nombre from MT_PlanContable where cuenta=772211) as concepto,
            (CONVERT(varchar, CAST((ddoc.mora)AS money), 1)) as montoVista, 
            (case when ddoc.montopagado is null or ddoc.montopagado=0.00  then  (CONVERT(varchar, CAST((ddoc.monto-isnull(ddoc.dsctobeca,0)) AS money), 1))
            when ddoc.montopagado is not null then (CONVERT(varchar, CAST((ddoc.montopagado)AS money), 1)) end)as montoPagadoVista, 
            (Select dbo.CantidadConLetra(DDOC.montopagado)+ ' ' +
            (case when isnull(doc.idtipomoneda,14901)=14901 then 'SOLES' ELSE 'DÓLARES AMERICANOS' end )) AS textoMonto
            ,(CASE WHEN doc.fechapago IS NOT NULL THEN  'OP: '+REPLACE(convert(VARCHAR(8), doc.fechapago, 14),':','') ELSE '' END)       as numOperacion,
            isnull(convert(varchar,c.fechapago,103),'-') as fechaPago  
            ,(
            case
            when c.mes=2 then 'NOTA: EL GRADO ES REFERENCIAL, ESTA SUJETO A LOS RESULTADOS FINALES DEL AÑO '+convert(varchar,c.anio-1)
            else ' '
            end ) as referencial 
            from MT_DetDocIngreso ddoc
            inner join MT_DocIngreso doc on doc.iddocingreso=ddoc.iddocingreso and ddoc.unineg=doc.unineg
            LEFT join MX_Estudiante est on est.idestudiante=doc.iddiscente and est.unineg=doc.unineg
            inner join MT_CtasxCobrar c on c.idctasxcobrar=ddoc.idctasxcobrar and ddoc.unineg=c.unineg
            INNER JOIN MT_Concepto con ON con.idconcepto = ddoc.idconcepto
            LEFT JOIN MO_UnidadNegocio uni ON uni.unineg = doc.unineg  
            where doc.unineg=#{uniNeg}  and  doc.iddocingreso  in (#{idDocIngreso})
        </if>
        <if test="dscto == 1"> 
            union all
            select 
            CONCAT(ISNULL(doc.serie,''),'-',ISNULL(doc.nrodoc,''),'/',est.codigo) as qr,
            772211 as cuenta, 
            (select 'DSCTO '+nombre from MT_PlanContable where cuenta=772211) as concepto,
            '-'+(CONVERT(varchar, CAST((ddoc.dscto)AS money), 1)) as montoVista, 
            (case when ddoc.montopagado is null or ddoc.montopagado=0.00  then  (CONVERT(varchar, CAST((ddoc.monto-isnull(ddoc.dsctobeca,0)) AS money), 1))
            when ddoc.montopagado is not null then
            (CONVERT(varchar, CAST((ddoc.montopagado <if test="mora == 0"> - isnull(ddoc.mora,0) - isnull(ddoc.dscto,0) </if>) AS money), 1)) end)as montoPagadoVista, 
            (Select dbo.CantidadConLetra(DDOC.montopagado <if test="mora == 0"> -isnull(ddoc.mora,0) - isnull(ddoc.dscto,0) </if>)+ ' ' +
            (case when isnull(doc.idtipomoneda,14901)=14901 then 'SOLES' ELSE 'DÓLARES AMERICANOS' end )) AS textoMonto
            ,(CASE WHEN doc.fechapago IS NOT NULL THEN  'OP: '+REPLACE(convert(VARCHAR(8), doc.fechapago, 14),':','') ELSE '' END)       as numOperacion,
            isnull(convert(varchar,c.fechapago,103),'-') as fechaPago 
            ,(
            case
            when c.mes=2 then 'NOTA: EL GRADO ES REFERENCIAL, ESTA SUJETO A LOS RESULTADOS FINALES DEL AÑO '+convert(varchar,c.anio-1)
            else ' '
            end ) as referencial 
            from MT_DetDocIngreso ddoc
            inner join MT_DocIngreso doc on doc.iddocingreso=ddoc.iddocingreso and ddoc.unineg=doc.unineg
            LEFT join MX_Estudiante est on est.idestudiante=doc.iddiscente and est.unineg=doc.unineg
            inner join MT_CtasxCobrar c on c.idctasxcobrar=ddoc.idctasxcobrar and ddoc.unineg=c.unineg
            INNER JOIN MT_Concepto con ON con.idconcepto = ddoc.idconcepto
            LEFT JOIN MO_UnidadNegocio uni ON uni.unineg = doc.unineg  
            where doc.unineg=#{uniNeg}  and  doc.iddocingreso  in (#{idDocIngreso})
        </if>
    </select>
    <select id="obtenerRecDetDocIngresoMora" resultType="pe.marista.sigma.bean.reporte.DetDocIngresoRepBean" parameterType="map">
        select 
        CONCAT(ISNULL(doc.serie,''),'-',ISNULL(doc.nrodoc,''),'/',est.codigo) as qr,
        772211 as cuentaD, 
        (select nombre from MT_PlanContable where cuenta=772211) as nomConcepto,
        (CONVERT(varchar, CAST((ddoc.mora)AS money), 1)) as montoVista, 
        (CONVERT(varchar, CAST((ddoc.mora)AS money), 1)) as montoPagadoVista, 
        (Select dbo.CantidadConLetra(DDOC.mora)+ ' ' +
        (case when isnull(doc.idtipomoneda,14901)=14901 then 'SOLES' ELSE 'DÓLARES AMERICANOS' end )) AS textoMonto
        ,(CASE WHEN doc.fechapago IS NOT NULL THEN  'OP: '+REPLACE(convert(VARCHAR(8), doc.fechapago, 14),':','') ELSE '' END)       as numOperacion,
        isnull(convert(varchar,c.fechapago,103),'-') as fechaPago 
        from MT_DetDocIngreso ddoc
        inner join MT_DocIngreso doc on doc.iddocingreso=ddoc.iddocingreso and ddoc.unineg=doc.unineg
        LEFT join MX_Estudiante est on est.idestudiante=doc.iddiscente and est.unineg=doc.unineg
        inner join MT_CtasxCobrar c on c.idctasxcobrar=ddoc.idctasxcobrar and ddoc.unineg=c.unineg
        INNER JOIN MT_Concepto con ON con.idconcepto = ddoc.idconcepto
        LEFT JOIN MO_UnidadNegocio uni ON uni.unineg = doc.unineg  
        where doc.unineg=#{uniNeg}  and  doc.iddocingreso  in (#{idDocIngreso})
    </select>
    
    <select id="obtenerReporteMasivo" resultType="pe.marista.sigma.bean.reporte.ReciboPensionRepBean" parameterType="map">
        select
        doc.respPago,
        doc.respPago as respPagoCop,

        doc.idRespPago,
        doc.idRespPago as idRespPagoCop,

        isnull(doc.discente,'') as discente,
        isnull(doc.discente,'') as discenteCop,

        isnull(doc.idDiscente,0) as idDiscente, 
        isnull(doc.idDiscente,0) as idDiscenteCop, 

        isnull(doc.idtipolugarpago,0) as tipoLugarPago,
        isnull(doc.idtipolugarpago,0) as tipoLugarPagoCop,

        (case
        when gra.idgradoacademico = 1 then concat('1',(select UPPER(m.seccion) from MX_Matricula m where m.unineg = doc.unineg and m.anio = doc.anio and m.idestudiante = doc.iddiscente))
        when gra.idgradoacademico = 2 then concat('2',(select UPPER(m.seccion) from MX_Matricula m where m.unineg = doc.unineg and m.anio = doc.anio and m.idestudiante = doc.iddiscente))
        when gra.idgradoacademico = 3 then concat('3',(select UPPER(m.seccion) from MX_Matricula m where m.unineg = doc.unineg and m.anio = doc.anio and m.idestudiante = doc.iddiscente))
        when gra.idgradoacademico = 4 then concat('4',(select UPPER(m.seccion) from MX_Matricula m where m.unineg = doc.unineg and m.anio = doc.anio and m.idestudiante = doc.iddiscente))
        when gra.idgradoacademico = 5 then concat('5',(select UPPER(m.seccion) from MX_Matricula m where m.unineg = doc.unineg and m.anio = doc.anio and m.idestudiante = doc.iddiscente))
        when gra.idgradoacademico = 6 then concat('6',(select UPPER(m.seccion) from MX_Matricula m where m.unineg = doc.unineg and m.anio = doc.anio and m.idestudiante = doc.iddiscente))
        when gra.idgradoacademico = 7 then concat('7',(select UPPER(m.seccion) from MX_Matricula m where m.unineg = doc.unineg and m.anio = doc.anio and m.idestudiante = doc.iddiscente))
        when gra.idgradoacademico = 8 then concat('8',(select UPPER(m.seccion) from MX_Matricula m where m.unineg = doc.unineg and m.anio = doc.anio and m.idestudiante = doc.iddiscente))
        when gra.idgradoacademico = 9 then concat('9',(select UPPER(m.seccion) from MX_Matricula m where m.unineg = doc.unineg and m.anio = doc.anio and m.idestudiante = doc.iddiscente))
        when gra.idgradoacademico = 10 then concat('10',(select UPPER(m.seccion) from MX_Matricula m where m.unineg = doc.unineg and m.anio = doc.anio and m.idestudiante = doc.iddiscente))
        when gra.idgradoacademico = 11 then concat('11',(select UPPER(m.seccion) from MX_Matricula m where m.unineg = doc.unineg and m.anio = doc.anio and m.idestudiante = doc.iddiscente))
        when gra.idgradoacademico = 23 then concat('3',(select UPPER(m.seccion) from MX_Matricula m where m.unineg = doc.unineg and m.anio = doc.anio and m.idestudiante = doc.iddiscente))
        when gra.idgradoacademico = 24 then concat('4',(select UPPER(m.seccion) from MX_Matricula m where m.unineg = doc.unineg and m.anio = doc.anio and m.idestudiante = doc.iddiscente))
        when gra.idgradoacademico = 25 then concat('5',(select UPPER(m.seccion) from MX_Matricula m where m.unineg = doc.unineg and m.anio = doc.anio and m.idestudiante = doc.iddiscente))
        end) as grado,
        (case
        when gra.idgradoacademico = 1 then concat('1',(select UPPER(m.seccion) from MX_Matricula m where m.unineg = doc.unineg and m.anio = doc.anio and m.idestudiante = doc.iddiscente))
        when gra.idgradoacademico = 2 then concat('2',(select UPPER(m.seccion) from MX_Matricula m where m.unineg = doc.unineg and m.anio = doc.anio and m.idestudiante = doc.iddiscente))
        when gra.idgradoacademico = 3 then concat('3',(select UPPER(m.seccion) from MX_Matricula m where m.unineg = doc.unineg and m.anio = doc.anio and m.idestudiante = doc.iddiscente))
        when gra.idgradoacademico = 4 then concat('4',(select UPPER(m.seccion) from MX_Matricula m where m.unineg = doc.unineg and m.anio = doc.anio and m.idestudiante = doc.iddiscente))
        when gra.idgradoacademico = 5 then concat('5',(select UPPER(m.seccion) from MX_Matricula m where m.unineg = doc.unineg and m.anio = doc.anio and m.idestudiante = doc.iddiscente))
        when gra.idgradoacademico = 6 then concat('6',(select UPPER(m.seccion) from MX_Matricula m where m.unineg = doc.unineg and m.anio = doc.anio and m.idestudiante = doc.iddiscente))
        when gra.idgradoacademico = 7 then concat('7',(select UPPER(m.seccion) from MX_Matricula m where m.unineg = doc.unineg and m.anio = doc.anio and m.idestudiante = doc.iddiscente))
        when gra.idgradoacademico = 8 then concat('8',(select UPPER(m.seccion) from MX_Matricula m where m.unineg = doc.unineg and m.anio = doc.anio and m.idestudiante = doc.iddiscente))
        when gra.idgradoacademico = 9 then concat('9',(select UPPER(m.seccion) from MX_Matricula m where m.unineg = doc.unineg and m.anio = doc.anio and m.idestudiante = doc.iddiscente))
        when gra.idgradoacademico = 10 then concat('10',(select UPPER(m.seccion) from MX_Matricula m where m.unineg = doc.unineg and m.anio = doc.anio and m.idestudiante = doc.iddiscente))
        when gra.idgradoacademico = 11 then concat('11',(select UPPER(m.seccion) from MX_Matricula m where m.unineg = doc.unineg and m.anio = doc.anio and m.idestudiante = doc.iddiscente))
        when gra.idgradoacademico = 23 then concat('3',(select UPPER(m.seccion) from MX_Matricula m where m.unineg = doc.unineg and m.anio = doc.anio and m.idestudiante = doc.iddiscente))
        when gra.idgradoacademico = 24 then concat('4',(select UPPER(m.seccion) from MX_Matricula m where m.unineg = doc.unineg and m.anio = doc.anio and m.idestudiante = doc.iddiscente))
        when gra.idgradoacademico = 25 then concat('5',(select UPPER(m.seccion) from MX_Matricula m where m.unineg = doc.unineg and m.anio = doc.anio and m.idestudiante = doc.iddiscente))
        end) as gradoCop,

        isnull(UPPER(niv.nombre),'') as nivel,
        isnull(UPPER(niv.nombre),'') as nivelCop,

        isnull(UPPER(doc.seccion),'') as seccion,
        isnull(UPPER(doc.seccion),'') as seccionCop,

        isnull(cod.codigo,'') as tipoBeca,
        isnull(cod.codigo,'') as tipoBecaCop,

        isnull(cta.fechaVenc,'') as fechaVenc,
        isnull(cta.fechaVenc,'') as fechaVencCop,

        isnull(convert(varchar,cta.fechaVenc,105),'') as vencimiento,
        isnull(convert(varchar,cta.fechaVenc,105),'') as vencimientoCop,

        isnull(conUni.idConcepto,0) as idConcepto,
        isnull(conUni.idConcepto,0) as idConceptoCop,

        isnull(tipCon.nombre,'') as tipoConcepto,
        isnull(tipCon.nombre,'') as tipoConceptoCop,

        isnull(det.cuentad,0) as cuentad, 
        isnull(det.cuentad,0) as cuentadCop, 

        isnull(CONCAT(UPPER(con.nombre),' / ',CONVERT(varchar,doc.anio)),'') as nombreConcepto,
        isnull(CONCAT(UPPER(con.nombre),' / ',CONVERT(varchar,doc.anio)),'') as nombreConceptoCop,

        isnull((CONVERT(varchar, CAST((det.monto)AS money), 1)),'') as monto,
        isnull((CONVERT(varchar, CAST((det.monto)AS money), 1)),'') as montoCop,

        isnull(doc.serie,'') as serie,
        isnull(doc.serie,'') as serieCop,

        isnull(doc.nroDoc,'') as nroDoc,
        isnull(doc.nroDoc,'') as nroDocCop,

        isnull(concat(doc.serie,' - ',right(replicate('0', 7) + rtrim(doc.nrodoc), 7)),'') as serieNroDoc, 
        isnull(concat(doc.serie,' - ',right(replicate('0', 7) + rtrim(doc.nrodoc), 7)),'') as serieNroDocCop, 

        isnull(doc.creafecha,'') as fechaEmision,
        isnull(doc.creafecha,'') as fechaEmisionCop,

        isnull(upper(replace(convert(varchar,doc.creafecha,107),',',' de')),'') as emision,
        isnull(upper(replace(convert(varchar,doc.creafecha,107),',',' de')),'') as emisionCop,

        isnull(dis.nombre,'') as distrito,
        isnull(dis.nombre,'') as distritoCop,

        isnull(est.codigo,'') as codigoColegio, 
        isnull(est.codigo,'') as codigoColegioCop, 

        (case
        when cta.mes=2 then 'MATRÍCULA'
        when cta.mes=3 then  'MARZO'
        when cta.mes=4 then   'ABRIL'
        when cta.mes=5 then   'MAYO'
        when cta.mes=6 then 'JUNIO'
        when cta.mes=7 then  'JULIO'
        when cta.mes=8 then   'AGOSTO'
        when cta.mes=9 then   'SEPTIEMBRE'
        when cta.mes=10 then   'OCTUBRE'
        when cta.mes=11 then   'NOVIEMBRE'
        when cta.mes=12 then 'DICIEMBRE'
        END) AS correspondientea,
        (case
        when cta.mes=2 then 'MATRÍCULA'
        when cta.mes=3 then  'MARZO'
        when cta.mes=4 then   'ABRIL'
        when cta.mes=5 then   'MAYO'
        when cta.mes=6 then 'JUNIO'
        when cta.mes=7 then  'JULIO'
        when cta.mes=8 then   'AGOSTO'
        when cta.mes=9 then   'SEPTIEMBRE'
        when cta.mes=10 then   'OCTUBRE'
        when cta.mes=11 then   'NOVIEMBRE'
        when cta.mes=12 then 'DICIEMBRE'
        END) AS correspondienteaCop,

        isnull(b.nombre,'') as nombreBeca,
        isnull(b.nombre,'') as nombreBecaCop,

        isnull((CONVERT(varchar, CAST((isnull(cta.dsctoBeca,0))AS money), 1)),'') as dsctoBeca,
        isnull((CONVERT(varchar, CAST((isnull(cta.dsctoBeca,0))AS money), 1)),'') as dsctoBecaCop,

        (CONVERT(varchar, CAST((
        (case 
        when det.monto-cta.dsctoBeca is not null then det.monto-cta.dsctoBeca
        else det.monto 
        end))AS money), 1)) as montoTotal,
        (CONVERT(varchar, CAST((
        (case 
        when det.monto-cta.dsctoBeca is not null then det.monto-cta.dsctoBeca
        else det.monto 
        end))AS money), 1)) as montoTotalCop,

        741112 as cuentaDsctoBeca,
        741112 as cuentaDsctoBecaCop,

        (select top 1 upper(nombre) from MT_Concepto where cuentah =741112) as labelDsctoBeca,
        (select top 1 upper(nombre) from MT_Concepto where cuentah =741112) as labelDsctoBecaCop
        
        from MT_DocIngreso doc
        Left Join MX_EstudianteBeca bec On doc.idestudiantebeca=bec.idestudiantebeca and doc.unineg=bec.unineg
        Left Join MT_Beca b On b.idbeca=bec.idbeca
        Left Join MO_Codigo cod On bec.idtipomotivobeca=cod.idcodigo
        Left Join MT_DetDocIngreso det ON doc.iddocingreso=det.iddocingreso and doc.unineg=det.unineg
        Left Join MT_CtasxCobrar cta On det.idctasxcobrar=cta.idctasxcobrar and det.unineg=cta.unineg
        Left jOin MT_ConceptoUniNeg conUni On cta.idconcepto=conUni.idconcepto and cta.unineg=conUni.unineg
        Left Join MT_Concepto con On con.idconcepto=conUni.idconcepto
        Left Join MT_TipoConcepto tipCon On con.idtipoconcepto=tipCon.idTipoConcepto
        Inner Join MO_UnidadNegocio uni On doc.unineg=uni.unineg
        Inner Join MO_Distrito dis On uni.iddistrito=dis.iddistrito
        Inner Join MX_Estudiante est On doc.iddiscente=est.idEstudiante and doc.unineg=est.unineg
        Left Join MX_GradoAcademico gra On doc.idgradoacademico=gra.idgradoacademico
        Left join MX_NivelAcademico niv On gra.idnivelacademico=niv.idnivelacademico
        where doc.unineg = #{uniNeg} 
        <if test="flgMas != 3" >
            and doc.flgMasivo = #{flgMasivo} 
        </if>
        <if test="flgMas == 3" >
            and doc.flgMasivo in ('b','g')
        </if>
        and doc.anio = #{anio} and cta.mes = #{mes} 
        and est.idestudiante in
        <foreach item="idEstudiante" index="index" collection="listaEstudiantes" 
                 open="(" separator="," close=")">
            #{idEstudiante}
        </foreach> 
    </select>
     
    <!-- Reporte Banco -->
    <select id="obtenerFiltroDocIngresoBanco" resultMap="docIngresoResultado" parameterType="pe.marista.sigma.bean.DocIngresoBean">
        select distinct 
        doc.iddocingreso                                                                                   as idDocIngreso   
        ,doc.idcajagen                                                                                      as idCajaGen
        ,doc.uniNeg                                                                                         as uniNeg																						 
        ,cod.idCodigo                                                                                       as idTipoDoc
        ,cod.codigo                                                                                         as codTipoDoc
        ,doc.serie                                                                                          as serie
        ,right(replicate('0', 7) + rtrim(doc.nrodoc), 7)                                                    as nroDoc
        ,doc.iddiscente                                                                                     as codDiscente 
        ,doc.discente                                                                                       as nombreDiscente 
        ,doc.anio                                                                                           as anio
        ,(doc.serie+' - '+right(replicate('0', 7) + rtrim(doc.nrodoc), 7))                                  as serieNroDoc
        ,doc.fechapago                                                                                      as fechaPago
        ,lug.idcodigo                                                                                       as idTipoLugarPago
        ,lug.codigo                                                                                         as lugarPago
        ,mop.codigo                                                                                         as modoPago 
        ,mop.idcodigo                                                                                       as idTipoModoPago 
        ,isnull(montoefectivosol,0)                                                                         as tc
        ,caj.nombre                                                                                         as caja
        ,isnull(montoefectivosol,0)                                                                         as montoEfectivoSol																			 
        ,isnull((montoefectivodol),0)							 	            as montoefectivodol
        ,isnull(montopos1,0)                                                                                as montoPos1
        ,isnull(montopos2,0)										    as montoPos2
        ,(select sum(montopagado) from MT_DetDocIngreso ddoc where 
        ddoc.iddocingreso=doc.iddocingreso and ddoc.unineg =#{unidadNegocioBean.uniNeg})                    as montoPagado 
        ,sta.idcodigo                                                                                       as idTipoStatusDocIng
        ,sta.codigo                                                                                         as estadoDoc
        , (select convert(varchar,doc.fechapago,103))                                                       as fechaPagoVista
        , mon.codigo                                                                                        as tipoMoneda
        ,(select sum(isnull(montoefectivosol,0)+isnull(montopos1,0)+isnull(montopos2,0))
        from MT_DocIngreso ddoc where ddoc.iddocingreso=doc.iddocingreso 
        and ddoc.unineg =#{unidadNegocioBean.uniNeg})                                                       as montoPagadoSol
        ,(select sum(montoefectivodol)
        from MT_DocIngreso ddoc where ddoc.iddocingreso=doc.iddocingreso 
        and ddoc.unineg =#{unidadNegocioBean.uniNeg})                                                       as montoPagadoDol
        ,cta.mora,cta.fechapago,con.idconcepto,con.nombre as concepto
        ,mat.seccion
        ,(case
        when mat.idgradoacademico = 1 then CONCAT('P','1',mat.seccion)
        when mat.idgradoacademico = 2 then CONCAT('P','2',mat.seccion)
        when mat.idgradoacademico = 3 then CONCAT('P','3',mat.seccion)
        when mat.idgradoacademico = 4 then CONCAT('P','4',mat.seccion)
        when mat.idgradoacademico = 5 then CONCAT('P','5',mat.seccion)
        when mat.idgradoacademico = 6 then CONCAT('P','6',mat.seccion)

        when mat.idgradoacademico = 7 then CONCAT('S','1',mat.seccion)
        when mat.idgradoacademico = 8 then CONCAT('S','2',mat.seccion)
        when mat.idgradoacademico = 9 then CONCAT('S','3',mat.seccion)
        when mat.idgradoacademico = 10 then CONCAT('S','4',mat.seccion)
        when mat.idgradoacademico = 11 then CONCAT('S','5',mat.seccion)

        when mat.idgradoacademico = 23 then CONCAT('I','3',mat.seccion)
        when mat.idgradoacademico = 24 then CONCAT('I','4',mat.seccion)
        when mat.idgradoacademico = 25 then CONCAT('I','5',mat.seccion)
        end) as grado
        ,mat.anio as anioRep
        ,(case 
        when doc.flgmasivo is null then 'O'
        when doc.flgmasivo is not null then 'C'
        end) as flgmasivo,
        est.codigo as codigo,
        (case
        when month(cta.fechapago) = 2 then 'MATRICULA'
        when month(cta.fechapago) = 3 then 'MARZO'
        when month(cta.fechapago) = 4 then 'ABRIL'
        when month(cta.fechapago) = 5 then 'MAYO'
        when month(cta.fechapago) = 6 then 'JUNIO'
        when month(cta.fechapago) = 7 then 'JULIO'
        when month(cta.fechapago) = 8 then 'AGOSTO'
        when month(cta.fechapago) = 9 then 'SETIEMBRE'
        when month(cta.fechapago) = 10 then 'OCTUBRE'
        when month(cta.fechapago) = 11 then 'NOVIEMBRE'
        when month(cta.fechapago) = 12 then 'DICIEMBRE'
        end) as mesVista
        FROM MT_DocIngreso doc        
        INNER JOIN MT_DetDocIngreso det on det.iddocingreso=doc.iddocingreso and doc.unineg=det.unineg  
        inner join MT_CtasxCobrar cta on doc.iddocingreso = cta.iddocingreso and cta.unineg = doc.unineg  
        inner join MX_Matricula mat on cta.idmatricula = mat.idmatricula and mat.unineg = cta.unineg 
        <if test="idTipoLugarPago.idCodigo != null and idTipoLugarPago.idCodigo == 19302">
            inner join MT_ProcesoBanco pb on cta.idprocesobanco = pb.idprocesobanco
        </if>
        LEFT join MT_Concepto con  on con.idconcepto = det.idconcepto                                                                     
        LEFT JOIN MT_Impresora imp ON imp.impresora = doc.impresora and imp.unineg=doc.unineg
        left join MT_CajaGen gen on gen.idcajagen = doc.idcajagen and gen.unineg=doc.unineg
        LEFT JOIN MX_Estudiante est ON est.idestudiante = doc.iddiscente and est.unineg=doc.unineg 
        LEFT JOIN MO_UnidadNegocio uni ON uni.unineg = doc.unineg  
        LEFT join MT_Caja caj on caj.idcaja=doc.idcaja and caj.unineg=doc.unineg 
        LEFT JOIN MO_Codigo cod ON cod.idcodigo = doc.idtipodoc
        LEFT JOIN MO_Codigo lug ON lug.idcodigo = doc.idtipolugarpago
        LEFT JOIN MO_Codigo mop ON mop.idcodigo = doc.idtipomodopago 
        LEFT join MO_Codigo sta on sta.idcodigo=doc.idtipostatusdocing 
        LEFT join MO_Codigo mon on mon.idcodigo=doc.idtipomoneda 
        <where>
            doc.uniNeg = #{unidadNegocioBean.uniNeg} 
            <if test="idTipoLugarPago.idCodigo != null and idTipoLugarPago.idCodigo != 0">
                and doc.idtipolugarpago = #{idTipoLugarPago.idCodigo} 
            </if>
            <if test="idTipoLugarPago.idCodigo != null and idTipoLugarPago.idCodigo == 19301">
                and doc.idcajagen is not null and SUBSTRING(CONVERT(varchar,con.idconcepto),1,3) in (100,101)
            </if>
            <if test="idTipoLugarPago.idCodigo != null and idTipoLugarPago.idCodigo == 19302">
                and cta.idprocesobanco is not null
            </if>
            <if test="tipoStatusDocIng.idCodigo != null and tipoStatusDocIng.idCodigo != 0">
                and sta.idCodigo = #{tipoStatusDocIng.idCodigo}
            </if>
            <if test="idTipoDoc.idCodigo != null and idTipoDoc.idCodigo != 0">
                and cod.idCodigo = #{idTipoDoc.idCodigo}
            </if>
            <if test="idTipoModoPago.idCodigo != null and idTipoModoPago.idCodigo != 0">
                and mop.idCodigo = #{idTipoModoPago.idCodigo}
            </if>
            <if test="idTipoLugarPago.idCodigo != null and idTipoLugarPago.idCodigo != 0">
                and lug.idCodigo = #{idTipoLugarPago.idCodigo}
            </if>    
            <if test="nombreDiscente != null and nombreDiscente != ''">
                and upper(doc.discente) like concat('%',#{nombreDiscente},'%') 
            </if>
            <if test="codDiscente != null and codDiscente != ''">
                and  doc.iddiscente =#{codDiscente} 
            </if>
            <if test="fechaInicio != null" >
                <![CDATA[ 
                and  (case when doc.creaStatus is null then  doc.fechaPago  else  doc.creaFechaStatus  end) >= #{fechaInicio}
                ]]>
            </if>  
            <if test="fechaFin != null" >
                <![CDATA[
                and  (case when doc.creaStatus is null then  doc.fechaPago  else  doc.creaFechaStatus  end)  <= #{fechaFin}
                ]]>
            </if> 
            order by doc.fechaPago
        </where> 
    </select>  
    <!-- ===================== -->
    <update id="modificarEstadoImpreso" parameterType="pe.marista.sigma.bean.DocIngresoBean" >
        declare @iddoc Integer = #{idDocIngreso}
        declare @unineg char(6) = #{unidadNegocioBean.uniNeg}
        if(select flgmasivo from MT_DocIngreso where unineg = @unineg and iddocingreso = @iddoc) is null
        begin
        update MT_DocIngreso set flgmasivo = 'g' where unineg = @unineg and iddocingreso = @iddoc
        end
    </update>
    
    <select id="obtenerNumAnulados" parameterType="pe.marista.sigma.bean.DocIngresoBean" resultType="Integer" >
        select count(*) from MT_DocIngreso doc
        where doc.unineg = #{unidadNegocioBean.uniNeg} and doc.serie = '002' 
        and doc.nrodoc <![CDATA[ >= ]]> convert(Integer,#{nroDocIni}) and doc.nrodoc <![CDATA[ <= ]]> convert(Integer,#{nroDocFin}) 
    </select>
    
    <select id="eliminarRecibo" parameterType="map" resultType="Object" >
        exec PRO_GENDOCANULADOS
        @@unineg = #{uniNeg,javaType=String,jdbcType=VARCHAR,mode=IN},
        @@nroDocIni = #{nroDocIni,javaType=Integer,jdbcType=INTEGER,mode=IN},
        @@nroDocFin = #{nroDocFin,javaType=Integer,jdbcType=INTEGER,mode=IN},
        @@nroRecIni = #{nroRecIni,javaType=Integer,jdbcType=INTEGER,mode=IN},
        @@anio = #{anio,javaType=Integer,jdbcType=INTEGER,mode=IN},
        @@mes = #{mes,javaType=Integer,jdbcType=INTEGER,mode=IN},
        @@creaPor = #{creaPor,javaType=String,jdbcType=VARCHAR,mode=IN}
    </select>
    <select id="obtenerDocIngresosSinNroDoc" parameterType="map" resultMap="docIngresoResultado" >
        select c.mes,d.iddocingreso as idDocIngreso
        from MT_DocIngreso d
        inner join MT_CtasxCobrar c on c.iddocingreso=d.iddocingreso
        inner join MX_Estudiante e on e.idestudiante=d.iddiscente
        inner join MX_Persona p on p.idpersona=e.idestudiante
        inner join MX_GradoAcademico g on g.idgradoacademico=d.idgradoacademico
        inner join MX_NivelAcademico n on n.idnivelacademico=g.idnivelacademico 
        where c.unineg=#{uniNeg} and c.anio=#{anio}
        and d.nrodoc is null
        order by c.mes, n.idNivelAcademico desc,g.idGradoAcademico,p.apepat,p.apemat asc	
    </select>
    <update id="ponerNroDoc" parameterType="pe.marista.sigma.bean.DocIngresoBean">
        UPDATE MT_DocIngreso
        SET
        serie=#{impresoraCajaBean.impresora.serie},
        nroDoc=#{impresoraCajaBean.impresora.actual},
        impresora=#{impresoraCajaBean.impresora.impresora}
        where unineg=#{unidadNegocioBean.uniNeg} and idDocIngreso=#{idDocIngreso}
    </update>
    <select id="obtenerRecibos" parameterType="pe.marista.sigma.bean.MatriculaBean" resultMap="docIngresoResultado" >
        select 
        doc.serie,
        doc.nrodoc,
        doc.flgmasivo,
        (doc.serie+' - '+right(replicate('0', 7) + rtrim(doc.nrodoc), 7)) as serieNroDoc,
        det.monto,
        isnull(det.mora,0) as mora,
        (det.monto + isnull(det.mora,0)) as montoEfectivoSol,
        con.nombre as concepto,
        (case
        when cta.mes = 2 then 'MATRICULA'
        when cta.mes = 3 then 'MARZO'
        when cta.mes = 4 then 'ABRIL'
        when cta.mes = 5 then 'MAYO'
        when cta.mes = 6 then 'JUNIO'
        when cta.mes = 7 then 'JULIO'
        when cta.mes = 8 then 'AGOSTO'
        when cta.mes = 9 then 'SETIEMBRE'
        when cta.mes = 10 then 'OCTUBRE'
        when cta.mes = 11 then 'NOVIEMBRE'
        when cta.mes = 12 then 'DICIEMBRE'
        end) as mesVista,
        cta.anio,ISNULL(cta.mora,0) as mora
        from MT_DocIngreso doc 
        inner join MT_DetDocIngreso det on doc.iddocingreso = det.iddocingreso and doc.unineg = det.unineg
        inner join MT_CtasxCobrar cta on doc.iddocingreso = cta.iddocingreso and cta.unineg = doc.unineg
        inner join MT_ConceptoUniNeg cu on cu.idconcepto = det.idconcepto and cu.unineg = det.unineg
        inner join MT_Concepto con on cu.idconcepto = con.idconcepto
        where doc.unineg = #{unidadNegocioBean.uniNeg} and doc.iddiscente = #{estudianteBean.idEstudiante} 
        <if test="flgMasivo != null and flgMasivo != ''" >
            and doc.flgmasivo = #{flgMasivo}
        </if>
        <if test="flgMasivo == null" >
            and doc.flgmasivo in ('b','g')
        </if>  
        order by doc.serie,doc.nrodoc
    </select>
    
    <select id="obtenerReporteMasivoIng" resultType="pe.marista.sigma.bean.reporte.DocIngresoRepBean" parameterType="map">
        Declare @anio int,@mes int
        set @anio=2017 set @mes=4<!--mes de la fecha pago-->
        select  c.iddocingreso as idDocIngreso, c.unineg as uniNeg,niv.idnivelacademico,gra.idgradoacademico, d.seccion,p.apepat,p.apemat, p.nombre  
        from MT_CtasxCobrar c
        inner join MT_DocIngreso d on c.iddocingreso=d.iddocingreso

        left join MX_Matricula m on c.idmatricula = m.idmatricula and c.unineg = m.unineg and m.anio = c.anio
        left join MX_Estudiante est on m.idestudiante = est.idestudiante and m.unineg = est.unineg
        left join MX_Persona p on est.idestudiante = p.idpersona and est.unineg = p.unineg 
        LEFT JOIN MX_GradoAcademico gra ON gra.idgradoacademico = est.idgradohabilitado
        LEFT JOIN MX_NivelAcademico niv ON niv.idnivelacademico = gra.idnivelacademico

        where c.anio=@anio  
        and year(c.fechapago)=@anio 
        and month(c.fechapago)=@mes
        and d.idtipolugarpago in (19301,19302)
        and convert(date,c.fechapago) <![CDATA[ > ]]>convert(date,c.fechavenc)  
        and mes!=2
        and c.unineg='champs'
        order by niv.idnivelacademico desc,gra.idgradoacademico, d.seccion,p.apepat,p.apemat, p.nombre

    </select>
    
    <select id="obtenerRecDetDocIngresoMas" resultType="pe.marista.sigma.bean.reporte.DetDocIngresoRepBean" parameterType="map">
        Select
        CONCAT(doc.serie,'-',doc.nrodoc,'/',es.codigo) as qr,
        CON.cuentad AS cuentaD,
        upper(ddoc.referencia) as nomConcepto,   
        (CONVERT(varchar, CAST((ddoc.monto)AS money), 1)) as montoVista, 
        <if test="infoMonto == 1" > 
            <!-- (CONVERT(varchar, CAST((ddoc.montopagado)AS money), 1)) as montoPagadoVista, -->
            (CONVERT(varchar, CAST((ddoc.monto - isnull(ddoc.dsctobeca,0))AS money), 1)) as montoPagadoVista, 
        </if>
        <if test="infoMonto == 0" > 
            (CONVERT(varchar, CAST((ddoc.montopagado)AS money), 1)) as montoPagadoVista,     
        </if>
        <if test="infoMonto == 1" >
            (Select dbo.CantidadConLetra((ddoc.monto - isnull(ddoc.dsctobeca,0)))+ ' ' +
            (case when isnull(doc.idtipomoneda,14901)=14901 then 'SOLES' ELSE 'DÓLARES AMERICANOS' end )) AS textoMonto,
        </if>
        <if test="infoMonto == 0" >
            (Select dbo.CantidadConLetra(DDOC.montopagado)+ ' ' +
            (case when isnull(doc.idtipomoneda,14901)=14901 then 'SOLES' ELSE 'DÓLARES AMERICANOS' end )) AS textoMonto,
        </if>
        <!--
        (Select dbo.CantidadConLetra(DDOC.montopagado)+ ' ' +
        (case when isnull(doc.idtipomoneda,14901)=14901 then 'SOLES' ELSE 'DÓLARES AMERICANOS' end )) AS textoMonto,
        -->
        convert(varchar,isnull((CAST((ddoc.montopagado)AS money) - CAST(isnull(ddoc.dsctobeca,0) as money)),0)) as totalPago,
        (case 
        when ddoc.dsctobeca is not null and ddoc.dsctobeca <![CDATA[ <> ]]> 0.00 then CONVERT(varchar,ISNULL(ddoc.dsctobeca,0))
        when ddoc.dsctobeca is null or ddoc.dsctobeca = 0.00 then ''
        end) as dsctobeca,
        (case 
        when ddoc.dsctobeca is not null and ddoc.dsctobeca <![CDATA[ <> ]]> 0.00 then '741112'
        when ddoc.dsctobeca is null or ddoc.dsctobeca = 0.00 then ''
        end) as cuentaDsctoBeca,
        (case 
        when ddoc.dsctobeca is not null and ddoc.dsctobeca <![CDATA[ <> ]]> 0.00 then (select top 1 upper(nombre) from MT_Concepto where cuentah =741112)
        when ddoc.dsctobeca is null or ddoc.dsctobeca = 0.00 then ''
        end) as labelDsctoBeca 
        from MT_DetDocIngreso ddoc
        inner join MT_DocIngreso doc on doc.iddocingreso=ddoc.iddocingreso and ddoc.unineg=doc.unineg
        inner join MX_Estudiante es on doc.iddiscente = es.idestudiante and doc.unineg = es.unineg
        inner join MT_CtasxCobrar c on c.idctasxcobrar=ddoc.idctasxcobrar and ddoc.unineg=c.unineg and c.iddocingreso = ddoc.iddocingreso
        INNER JOIN MT_Concepto con ON con.idconcepto = ddoc.idconcepto
        LEFT JOIN MO_UnidadNegocio uni ON uni.unineg = doc.unineg  
        where doc.unineg=#{uniNeg}  and  doc.iddocingreso  in (#{idDocIngreso}) 
        <if test="beca == 1"> 
            union all
            select 
            CONCAT(doc.serie,'-',doc.nrodoc,'/',es.codigo) as qr,
            741112 as cuenta,
            (select top 1 upper(nombre) from MT_Concepto where cuentah =741112) as concepto, 
            '-'+(CONVERT(varchar, CAST((ddoc.dsctobeca)AS money), 1)) as montoVista, 
            <if test="infoMonto == 1" > 
                (CONVERT(varchar, CAST((ddoc.monto - isnull(ddoc.dsctobeca,0))AS money), 1)) as montoPagadoVista,
            </if>
            <if test="infoMonto == 0" >
                (CONVERT(varchar, CAST((ddoc.montopagado)AS money), 1)) as montoPagadoVista,   
            </if>
            <if test="infoMonto == 1" >
                (Select dbo.CantidadConLetra((ddoc.monto - isnull(ddoc.dsctobeca,0)))+ ' ' +
                (case when isnull(doc.idtipomoneda,14901)=14901 then 'SOLES' ELSE 'DÓLARES AMERICANOS' end )) AS textoMonto,
            </if>
            <if test="infoMonto == 0" >
                (Select dbo.CantidadConLetra(DDOC.montopagado)+ ' ' +
                (case when isnull(doc.idtipomoneda,14901)=14901 then 'SOLES' ELSE 'DÓLARES AMERICANOS' end )) AS textoMonto,
            </if> 
            convert(varchar,isnull((CAST((ddoc.montopagado)AS money) - CAST(isnull(ddoc.dsctobeca,0) as money)),0)) as totalPago,
            (case 
            when ddoc.dsctobeca is not null and ddoc.dsctobeca <![CDATA[ <> ]]> 0.00 then CONVERT(varchar,ISNULL(ddoc.dsctobeca,0))
            when ddoc.dsctobeca is null or ddoc.dsctobeca = 0.00 then ''
            end) as dsctobeca,
            (case 
            when ddoc.dsctobeca is not null and ddoc.dsctobeca <![CDATA[ <> ]]> 0.00 then '741112'
            when ddoc.dsctobeca is null or ddoc.dsctobeca = 0.00 then ''
            end) as cuentaDsctoBeca,
            (case 
            when ddoc.dsctobeca is not null and ddoc.dsctobeca <![CDATA[ <> ]]> 0.00 then (select top 1 upper(nombre) from MT_Concepto where cuentah =741112)
            when ddoc.dsctobeca is null or ddoc.dsctobeca = 0.00 then ''
            end) as labelDsctoBeca
            from MT_DetDocIngreso ddoc
            inner join MT_DocIngreso doc on doc.iddocingreso=ddoc.iddocingreso and ddoc.unineg=doc.unineg
            inner join MX_Estudiante es on doc.iddiscente = es.idestudiante and doc.unineg = es.unineg
            inner join MT_CtasxCobrar c on c.idctasxcobrar=ddoc.idctasxcobrar and ddoc.unineg=c.unineg and c.iddocingreso = ddoc.iddocingreso
            INNER JOIN MT_Concepto con ON con.idconcepto = ddoc.idconcepto
            LEFT JOIN MO_UnidadNegocio uni ON uni.unineg = doc.unineg  
            where doc.unineg=#{uniNeg}  and  doc.iddocingreso  in (#{idDocIngreso})  
        </if>
        <if test="mora == 1"> 
            union all
            select 
            CONCAT(doc.serie,'-',doc.nrodoc,'/',es.codigo) as qr,
            772211 as cuenta, 
            (select nombre from MT_PlanContable where cuenta=772211) as concepto,
            (CONVERT(varchar, CAST((ddoc.mora)AS money), 1)) as montoVista, 
            <if test="infoMonto == 1" > 
                <!-- (CONVERT(varchar, CAST((ddoc.montopagado)AS money), 1)) as montoPagadoVista, -->
                (CONVERT(varchar, CAST((ddoc.monto - isnull(ddoc.dsctobeca,0))AS money), 1)) as montoPagadoVista, 
            </if>
            <if test="infoMonto == 0" > 
                (CONVERT(varchar, CAST((ddoc.montopagado)AS money), 1)) as montoPagadoVista,     
            </if>
            <if test="infoMonto == 1" >
                (Select dbo.CantidadConLetra((ddoc.monto - isnull(ddoc.dsctobeca,0)))+ ' ' +
                (case when isnull(doc.idtipomoneda,14901)=14901 then 'SOLES' ELSE 'DÓLARES AMERICANOS' end )) AS textoMonto,
            </if>
            <if test="infoMonto == 0" >
                (Select dbo.CantidadConLetra(DDOC.montopagado)+ ' ' +
                (case when isnull(doc.idtipomoneda,14901)=14901 then 'SOLES' ELSE 'DÓLARES AMERICANOS' end )) AS textoMonto,
            </if> 
            <!--
            (Select dbo.CantidadConLetra(DDOC.montopagado)+ ' ' +
            (case when isnull(doc.idtipomoneda,14901)=14901 then 'SOLES' ELSE 'DÓLARES AMERICANOS' end )) AS textoMonto,
            -->
            convert(varchar,isnull((CAST((ddoc.montopagado)AS money) - CAST(isnull(ddoc.dsctobeca,0) as money)),0)) as totalPago,
            (case 
            when ddoc.dsctobeca is not null and ddoc.dsctobeca <![CDATA[ <> ]]> 0.00 then CONVERT(varchar,ISNULL(ddoc.dsctobeca,0))
            when ddoc.dsctobeca is null or ddoc.dsctobeca = 0.00 then ''
            end) as dsctobeca,
            (case 
            when ddoc.dsctobeca is not null and ddoc.dsctobeca <![CDATA[ <> ]]> 0.00 then '741112'
            when ddoc.dsctobeca is null or ddoc.dsctobeca = 0.00 then ''
            end) as cuentaDsctoBeca,
            (case 
            when ddoc.dsctobeca is not null and ddoc.dsctobeca <![CDATA[ <> ]]> 0.00 then (select top 1 upper(nombre) from MT_Concepto where cuentah =741112)
            when ddoc.dsctobeca is null or ddoc.dsctobeca = 0.00 then ''
            end) as labelDsctoBeca 
            from MT_DetDocIngreso ddoc
            inner join MT_DocIngreso doc on doc.iddocingreso=ddoc.iddocingreso and ddoc.unineg=doc.unineg
            inner join MX_Estudiante es on doc.iddiscente = es.idestudiante and doc.unineg = es.unineg
            inner join MT_CtasxCobrar c on c.idctasxcobrar=ddoc.idctasxcobrar and ddoc.unineg=c.unineg and c.iddocingreso = ddoc.iddocingreso 
            INNER JOIN MT_Concepto con ON con.idconcepto = ddoc.idconcepto
            LEFT JOIN MO_UnidadNegocio uni ON uni.unineg = doc.unineg  
            where doc.unineg=#{uniNeg}  and  doc.iddocingreso  in (#{idDocIngreso}) 
        </if>
        <if test="dscto == 1"> 
            union all
            select 
            CONCAT(doc.serie,'-',doc.nrodoc,'/',es.codigo) as qr,
            772211 as cuenta, 
            (select 'DSCTO '+nombre from MT_PlanContable where cuenta=772211) as concepto,
            '-'+(CONVERT(varchar, CAST((ddoc.dscto)AS money), 1)) as montoVista, 
            <if test="infoMonto == 1" > 
                <!-- (CONVERT(varchar, CAST((ddoc.montopagado)AS money), 1)) as montoPagadoVista, -->
                (CONVERT(varchar, CAST((ddoc.monto - isnull(ddoc.dsctobeca,0))AS money), 1)) as montoPagadoVista, 
            </if>
            <if test="infoMonto == 0" > 
                (CONVERT(varchar, CAST((ddoc.montopagado)AS money), 1)) as montoPagadoVista,     
            </if> 
            <if test="infoMonto == 1" >
                (Select dbo.CantidadConLetra((ddoc.monto - isnull(ddoc.dsctobeca,0)))+ ' ' +
                (case when isnull(doc.idtipomoneda,14901)=14901 then 'SOLES' ELSE 'DÓLARES AMERICANOS' end )) AS textoMonto,
            </if>
            <if test="infoMonto == 0" >
                (Select dbo.CantidadConLetra(DDOC.montopagado)+ ' ' +
                (case when isnull(doc.idtipomoneda,14901)=14901 then 'SOLES' ELSE 'DÓLARES AMERICANOS' end )) AS textoMonto,
            </if> 
            convert(varchar,isnull((CAST((ddoc.montopagado)AS money) - CAST(isnull(ddoc.dsctobeca,0) as money)),0)) as totalPago,
            (case 
            when ddoc.dsctobeca is not null and ddoc.dsctobeca <![CDATA[ <> ]]> 0.00 then CONVERT(varchar,ISNULL(ddoc.dsctobeca,0))
            when ddoc.dsctobeca is null or ddoc.dsctobeca = 0.00 then ''
            end) as dsctobeca,
            (case 
            when ddoc.dsctobeca is not null and ddoc.dsctobeca <![CDATA[ <> ]]> 0.00 then '741112'
            when ddoc.dsctobeca is null or ddoc.dsctobeca = 0.00 then ''
            end) as cuentaDsctoBeca,
            (case 
            when ddoc.dsctobeca is not null and ddoc.dsctobeca <![CDATA[ <> ]]> 0.00 then (select top 1 upper(nombre) from MT_Concepto where cuentah =741112)
            when ddoc.dsctobeca is null or ddoc.dsctobeca = 0.00 then ''
            end) as labelDsctoBeca 
            from MT_DetDocIngreso ddoc
            inner join MT_DocIngreso doc on doc.iddocingreso=ddoc.iddocingreso and ddoc.unineg=doc.unineg
            inner join MX_Estudiante es on doc.iddiscente = es.idestudiante and doc.unineg = es.unineg
            inner join MT_CtasxCobrar c on c.idctasxcobrar=ddoc.idctasxcobrar and ddoc.unineg=c.unineg and c.iddocingreso = ddoc.iddocingreso
            INNER JOIN MT_Concepto con ON con.idconcepto = ddoc.idconcepto
            LEFT JOIN MO_UnidadNegocio uni ON uni.unineg = doc.unineg  
            where doc.unineg=#{uniNeg}  and  doc.iddocingreso  in (#{idDocIngreso}) 
        </if>   
    </select>
    
    <update id="actualizarRecibosMasivos" parameterType="map" >
        declare @listaDocIngreso as table (unineg char(6),iddocingreso Integer,serie varchar(5),nrodoc Integer,modipor varchar(20),fechapago datetime,numRecibo Integer identity) 
        declare @numRecibo Integer = (select isnull(max(nrodoc),0)  from MT_DocIngreso where unineg = #{uniNeg} and serie = '003')
        
        insert into @listaDocIngreso(unineg,iddocingreso,serie,nrodoc,modipor,fechapago)
        select doc.unineg,doc.iddocingreso,doc.serie,isnull(doc.nrodoc,0),doc.modipor,c.fechapago
        from MT_CtasxCobrar c
        inner join MX_Matricula m on c.idmatricula = m.idmatricula and c.unineg = m.unineg and m.anio = c.anio
        inner join MX_Estudiante est on m.idestudiante = est.idestudiante and m.unineg = est.unineg
        inner join MX_Persona p on est.idestudiante = p.idpersona and est.unineg = p.unineg
        inner join MT_DocIngreso doc on c.iddocingreso = doc.iddocingreso and c.unineg = doc.unineg
        inner join MT_DetDocIngreso ddoc on c.iddocingreso = ddoc.iddocingreso and c.unineg = ddoc.unineg
        left join mo_Codigo cod on cod.idcodigo = doc.idtipodoc
        left join mo_Codigo codLug on doc.idtipolugarpago = codLug.idcodigo 
        INNER JOIN MO_UnidadNegocio uni ON uni.unineg = doc.unineg
        LEFT JOIN MO_Entidad ent ON ent.ruc = uni.RUC and uni.unineg=ent.unineg
        LEFT JOIN MO_Distrito dis ON dis.iddistrito = ent.iddistrito
        LEFT JOIN MX_GradoAcademico gra ON gra.idgradoacademico = est.idgradohabilitado
        LEFT JOIN MX_NivelAcademico niv ON niv.idnivelacademico = gra.idnivelacademico
        LEFT JOIN MX_EstudianteBeca estBe on estBe.idestudiantebeca=c.idestudiantebeca
        left Join MT_Beca beca on estBe.idbeca=beca.idbeca
        where doc.unineg = #{uniNeg} and m.flgmatricula = 1
        <if test="matriculaBean.flgMas != 5" >
            and c.anio = #{anio} and c.mes = #{mes} 
        </if> 
        <if test="matriculaBean.flgMas == 1" > 
            and c.idtipostatusctacte = 19404 and doc.flgmasivo = 'b' and doc.flgimpresion is null 
            and DATEDIFF(DAY,c.fechapago,c.fechavenc) <![CDATA[ < ]]> 0 or DATEDIFF(DAY,c.fechapago,c.fechavenc) <![CDATA[ = ]]> 0 
        </if>
        <if test="matriculaBean.flgMas == 2" >
            and c.idtipostatusctacte = 19404 and doc.flgmasivo in ('g','c')
        </if> 
        <if test="matriculaBean.flgMas == 3" >
            and doc.flgmasivo in ('g','c','b')
        </if> 
        <if test="matriculaBean.flgMas == 4" >
            and c.idtipostatusctacte = 19401 and doc.flgmasivo = 'g' 
            and doc.flgimpresion is null 
            and DATEDIFF(DAY,c.fechapago,c.fechavenc) <![CDATA[ < ]]> 0 
            or DATEDIFF(DAY,c.fechapago,c.fechavenc) <![CDATA[ = ]]> 0  
        </if>
        <if test="matriculaBean.flgMas == 5" >
            and doc.flgmasivo in ('b') and DATEDIFF(DAY,c.fechapago,c.fechavenc) <![CDATA[ > ]]> 0 and c.idtipostatusctacte = 19404 
            and doc.flgimpresion is null and YEAR(c.fechapago) = #{anio} and MONTH(c.fechapago) <![CDATA[ > ]]> #{mes}
            <!-- and MONTH(c.fechapago) = #{mes} and YEAR(c.fechapago) = #{anio} -->
        </if>
        <if test="matriculaBean.estudianteBean.personaBean.idPersona != null and matriculaBean.estudianteBean.personaBean.idPersona != ''">
            and m.idEstudiante = #{matriculaBean.estudianteBean.personaBean.idPersona} 
        </if>
        <if test="matriculaBean.estudianteBean.personaBean.apepat != null and matriculaBean.estudianteBean.personaBean.apepat != ''">
            and upper(p.apepat) like concat('%',#{matriculaBean.estudianteBean.personaBean.apepat},'%')
        </if>
        <if test="matriculaBean.estudianteBean.personaBean.apemat != null and matriculaBean.estudianteBean.personaBean.apemat != ''">
            and upper(p.apemat) like concat('%',#{matriculaBean.estudianteBean.personaBean.apemat},'%')
        </if>
        <if test="matriculaBean.estudianteBean.personaBean.nombre != null and matriculaBean.estudianteBean.personaBean.nombre != ''">
            and upper(p.nombre) like concat('%',#{matriculaBean.estudianteBean.personaBean.nombre},'%')
        </if> 
        <if test="matriculaBean.gradoAcademicoBean.nivelAcademicoBean.idNivelAcademico != null and matriculaBean.gradoAcademicoBean.nivelAcademicoBean.idNivelAcademico != 0">
            and niv.idNivelAcademico = #{matriculaBean.gradoAcademicoBean.nivelAcademicoBean.idNivelAcademico}
        </if>
        <if test="matriculaBean.estudianteBean.gradoHabilitado.idGradoAcademico != null and matriculaBean.estudianteBean.gradoHabilitado.idGradoAcademico != 0">
            and  m.idGradoAcademico = #{matriculaBean.estudianteBean.gradoHabilitado.idGradoAcademico}
        </if>
        <if test="matriculaBean.nroIni != null and matriculaBean.nroIni != 0">
            and doc.nrodoc <![CDATA[ >= ]]> convert(Integer,#{matriculaBean.nroIni})
        </if>
        <if test="matriculaBean.nroFin != null and matriculaBean.nroFin != 0">
            and doc.nrodoc <![CDATA[ <= ]]> convert(Integer,#{matriculaBean.nroFin})
        </if>
        <if test="matriculaBean.flgMas == 1 or matriculaBean.flgMas == 5" > 
            order by niv.idNivelAcademico desc,gra.idGradoAcademico,m.seccion,p.apepat,p.apemat
        </if>
        <if test="matriculaBean.flgMas != 1 and matriculaBean.flgMas != 5" > 
            order by est.pos
        </if>
        declare @var Integer = (select COUNT(*) from @listaDocIngreso where nrodoc <![CDATA[ <> ]]> 0)
        ;with lista as(
        select ((@numRecibo + numRecibo) - @var) as recibo,iddocingreso,nrodoc,unineg,fechapago from @listaDocIngreso 
        where isnull(nrodoc,0) = 0)
        UPDATE doc 
        set
        doc.nrodoc = l.recibo,
        doc.modipor = 'sigma'+REPLACE(CONVERT(varchar,getdate(),105),'-',''),
        doc.serie = '003',
        doc.flgImpresion = 1 
        from MT_DocIngreso doc
        inner join lista l on doc.iddocingreso = l.iddocingreso and doc.unineg = l.unineg
        WHERE doc.unineg = #{uniNeg} and doc.flgImpresion is null
    </update>
    
    <select id="obtenerMaxNroDoc" parameterType="pe.marista.sigma.bean.DocIngresoBean" resultType="Integer" >
        select ISNULL(max(nrodoc),0)  
        from MT_DocIngreso where unineg = #{unidadNegocioBean.uniNeg} and serie = #{serie}
        and anio=year(getdate())
    </select>
    
    <select id="obtenerMaxNroDocSerie" parameterType="pe.marista.sigma.bean.DocIngresoBean" resultType="Integer" >
        select ISNULL(max(nrodoc),0)  
        from MT_DocIngreso where unineg = #{unidadNegocioBean.uniNeg} and serie = #{serie} 
    </select>
    
    <update id="modificarNroDocSerie" parameterType="pe.marista.sigma.bean.DocIngresoBean" >
        UPDATE MT_DocIngreso
        set 
        nrodoc = #{nroDoc},
        serie = #{serie},
        flgImpresion = #{flgImpresion}
        <if test="idTipoDoc.idCodigo !=null and idTipoDoc.idCodigo !=0" > 
            ,idTipoDoc = #{idTipoDoc.idCodigo}
        </if>
        where unineg = #{unidadNegocioBean.uniNeg} and iddocingreso = #{idDocIngreso}
    </update>
    
    <resultMap id="ctaDetDocResultado" type="pe.marista.sigma.bean.DetDocIngresoBean" >
        <result property="idCtasXCobrar" column="idCtasXCobrar" />
        <result property="idDocIngreso" column="idDocIngreso" />
        <result property="idDetDocIngreso" column="idDetDocIngreso" /> 
    </resultMap>
    
    <select id="obtenerDetoDocId" parameterType="map" resultMap="ctaDetDocResultado" >
        select idctasxcobrar as idCtasXCobrar,iddetdocingreso as idDetDocIngreso,iddocingreso as idDocIngreso
        from MT_DetDocIngreso where idctasxcobrar = #{idCtasXCobrar} and unineg = #{uniNeg}
    </select> 
    <select id="obtenerDetoDocIdNew" parameterType="map" resultMap="ctaDetDocResultado" >
        select dsctobeca as dsctoBeca,idctasxcobrar as idCtasXCobrar,iddetdocingreso as idDetDocIngreso,iddocingreso as idDocIngreso
        from MT_DetDocIngreso where idctasxcobrar = #{idCtasXCobrar} and unineg = #{uniNeg}
    </select>
    
    <!-- REIMPRESION DE RECIBOS MASIVOS -->
    <select id="obtenerFiltroDocIngresoMasivo" resultMap="docIngresoResultado" parameterType="pe.marista.sigma.bean.DocIngresoBean">
        select distinct 
        doc.iddocingreso                                                                                   as idDocIngreso   
        ,(case when doc.creaStatus is null then doc.idcajagen else  doc.idcajagenanulado    END)            as idCajaGen
        ,doc.uniNeg                                                                                         as uniNeg																						 
        ,cod.idCodigo                                                                                       as idTipoDoc
        ,cod.codigo                                                                                         as codTipoDoc
        ,doc.serie                                                                                          as serie
        ,right(replicate('0', 7) + rtrim(doc.nrodoc), 7)                                                    as nroDoc
        ,doc.iddiscente                                                                                     as codDiscente 
        ,doc.discente                                                                                       as nombreDiscente 
        ,doc.anio                                                                                           as anio
        ,ISNULL(right(replicate('0', 7) + rtrim(doc.nrodoc), 7),'-----')                                    as serieNroDoc
        ,(case when doc.creaStatus is null then doc.fechapago  else doc.creaFechaStatus end)                as fechaPago 
        ,lug.idcodigo                                                                                       as idTipoLugarPago
        ,lug.codigo                                                                                         as lugarPago
        ,mop.codigo                                                                                         as modoPago 
        ,mop.idcodigo                                                                                       as idTipoModoPago 
        ,doc.tc                                                                                             as tc
        ,caj.nombre                                                                                         as caja
        ,isnull(montoefectivosol,0)                                                                         as montoEfectivoSol																			 
        ,isnull((montoefectivodol),0)							 	            as montoefectivodol
        ,isnull(montopos1,0)                                                                                as montoPos1
        ,isnull(montopos2,0)										    as montoPos2
        ,(select isnull(sum(isnull(montopagado,0)),0) from MT_DetDocIngreso ddoc where 
        ddoc.iddocingreso=doc.iddocingreso and ddoc.unineg =#{unidadNegocioBean.uniNeg})                    as montoPagado 
        ,sta.idcodigo                                                                                       as idTipoStatusDocIng
        ,sta.codigo                                                                                         as estadoDoc
        ,(case when convert(varchar,doc.creaStatus,103) is null then convert(varchar,doc.fechapago,103)  else convert(varchar,doc.creaFechaStatus,103) end) as fechaPagoVista
        , mon.codigo                                                                                        as tipoMoneda
        ,(select sum(isnull(montoefectivosol,0)+isnull(montopos1,0)+isnull(montopos2,0))
        from MT_DocIngreso ddoc where ddoc.iddocingreso=doc.iddocingreso 
        and ddoc.unineg =#{unidadNegocioBean.uniNeg})                                                       as montoPagadoSol
        ,(select sum(montoefectivodol)
        from MT_DocIngreso ddoc where ddoc.iddocingreso=doc.iddocingreso 
        and ddoc.unineg =#{unidadNegocioBean.uniNeg})                                                       as montoPagadoDol
        ,'COPIA' as infoRecibo
        ,doc.respPago as nomResPago
        ,(case
        when doc.flgimpresion is null then 'SIN IMPRIMIR'
        when doc.flgimpresion is not null then 'IMPRESO'
        end)                                                                                                as vistaImpresion
        ,doc.flgimpresion                                                                                   as flgImpresion
        ,(case
        when cta.mes = 2 then 'MATRICULA'
        when cta.mes = 3 then 'MARZO'
        when cta.mes = 4 then 'ABRIL'
        when cta.mes = 5 then 'MAYO'
        when cta.mes = 6 then 'JUNIO'
        when cta.mes = 7 then 'JULIO'
        when cta.mes = 8 then 'AGOSTO'
        when cta.mes = 9 then 'SETIEMBRE'
        when cta.mes = 10 then 'OCTUBRE'
        when cta.mes = 11 then 'NOVIEMBRE'
        when cta.mes = 12 then 'DICIEMBRE'
        end) as mesVista
        ,(case
        when doc.flgimpresion is null then 'ORIGINAL'
        when doc.flgimpresion is not null then 'COPIA'
        end) as vistaTipo
        FROM MT_DocIngreso doc        
        inner join mt_ctasxcobrar cta on cta.iddocingreso = doc.iddocingreso and cta.unineg = doc.unineg
        inner join MT_DetDocIngreso det on det.iddocingreso=doc.iddocingreso and doc.unineg=det.unineg and det.idctasxcobrar = det.idctasxcobrar 
        and det.unineg = cta.unineg and det.iddocingreso = cta.iddocingreso and cta.iddocingreso = doc.iddocingreso 
        LEFT join MT_Concepto con  on con.idconcepto = det.idconcepto                                                                     
        LEFT JOIN MT_Impresora imp ON imp.impresora = doc.impresora and imp.unineg=doc.unineg
        LEFT join MT_CajaGen gen on gen.idcajagen = doc.idcajagen and gen.unineg=doc.unineg
        LEFT JOIN MX_Estudiante est ON est.idestudiante = doc.iddiscente and est.unineg=doc.unineg 
        LEFT JOIN MO_UnidadNegocio uni ON uni.unineg = doc.unineg  
        LEFT join MT_Caja caj on caj.idcaja=doc.idcaja and caj.unineg=doc.unineg 
        LEFT JOIN MO_Codigo cod ON cod.idcodigo = doc.idtipodoc
        LEFT JOIN MO_Codigo lug ON lug.idcodigo = doc.idtipolugarpago
        LEFT JOIN MO_Codigo mop ON mop.idcodigo = doc.idtipomodopago 
        LEFT join MO_Codigo sta on sta.idcodigo=doc.idtipostatusdocing 
        LEFT join MO_Codigo mon on mon.idcodigo=doc.idtipomoneda 
        <where>
            doc.uniNeg = #{unidadNegocioBean.uniNeg} 
            <!-- and doc.idcajagen is null -->
            <if test="tipoStatusDocIng.idCodigo != null and tipoStatusDocIng.idCodigo != 0">
                and sta.idCodigo = #{tipoStatusDocIng.idCodigo}
            </if>
            <if test="idTipoDoc.idCodigo != null and idTipoDoc.idCodigo != 0">
                and cod.idCodigo = #{idTipoDoc.idCodigo}
            </if>
            <if test="idTipoModoPago.idCodigo != null and idTipoModoPago.idCodigo != 0">
                and mop.idCodigo = #{idTipoModoPago.idCodigo}
            </if>
            <if test="idTipoLugarPago.idCodigo != null and idTipoLugarPago.idCodigo != 0">
                and lug.idCodigo = #{idTipoLugarPago.idCodigo}
            </if>
            <if test="anio != null and anio != 0">
                and doc.anio = #{anio}
            </if>
            <if test="serie != null and serie != ''">
                and doc.serie = #{serie}
            </if>
            <if test="nroDocIni != null and nroDocIni != ''">
                and doc.nroDoc <![CDATA[ >= ]]> #{nroDocIni} 
            </if>
            <if test="nroDocFin != null and nroDocFin != ''">
                and doc.nroDoc <![CDATA[ <= ]]> #{nroDocFin}                 
            </if>
            <if test="nombreDiscente != null and nombreDiscente != ''">
                and upper(doc.discente) like concat('%',#{nombreDiscente},'%') 
            </if>
            <if test="codDiscente != null and codDiscente != '' ">
                and  doc.iddiscente =#{codDiscente} 
            </if>
            <if test="codigo != null and codigo != ''"  >
                and est.codigo = #{codigo}
            </if>
            <if test="anio != null and anio != 0"  >
                and cta.anio = #{anio}
            </if>
            <if test="mes != null and mes != 0"  >
                and cta.mes = #{mes}
            </if>
            <if test="fechaInicio != null" >
                <![CDATA[ 
                and convert(date,isnull(doc.fechaPago,GETDATE())) >= convert(date,#{fechaInicio}) 
                ]]>
            </if>  
            <if test="fechaFin != null" >
                <![CDATA[
                and  convert(date,isnull(doc.fechaPago,GETDATE())) <= convert(date,#{fechaFin})
                ]]>
            </if>
            <if test="estadoImpresion != null and estadoImpresion == 1" >
                and doc.flgimpresion is not null
            </if>
            <if test="estadoImpresion != null and estadoImpresion == 2" >
                and doc.flgimpresion is null
            </if>
        </where>
        order by 12
    </select> 
    
    <select  id="obtenerRecDocIngresoForMasivo" parameterType="map" resultType="pe.marista.sigma.bean.reporte.DocIngresoRepBean">
        declare @listaMes as table(mes Integer)
        ;with listaMes as(
        select 1 as mes
        union all
        select 2 as mes
        union all
        select 3 as mes
        union all
        select 4 as mes
        union all
        select 5 as mes
        union all
        select 6 as mes
        union all
        select 7 as mes
        union all
        select 8 as mes
        union all
        select 9 as mes
        union all
        select 10 as mes
        union all
        select 11 as mes
        union all
        select 12 as mes)
        select distinct
        <!--
        (CASE WHEN doc.fechapago IS NOT NULL THEN  CONVERT(VARCHAR(10), doc.fechapago, 103) + ' '  + convert(VARCHAR(8), doc.fechapago, 14) ELSE ' /  /' END) as  fecha
        -->
        upper(isnull(ent.nombrecomercial,(select upper(isnull(nombreUniNeg,'')) from MO_UnidadNegocio where unineg=#{uniNeg})))                                                                       as nombre
        ,ent.direccion											     as direccion
        ,dis.nombre                                                                                          as nomDistrito
        ,(case when ent.telefono is not null and ent.telefono!=' ' then 'Telfs.: '+ent.telefono else ' ' end) as telefono
        ,(case when ent.correo is not null and ent.correo!=' '  then 'E-mail: '+ent.correo else ' ' end) as correo
        ,'R.U.C '+ent.ruc										     as ruc
        ,UPPER(cod.codigo)										     as tipoDoc																					   
        , concat(doc.serie,' - ',right(replicate('0', 7) + rtrim(doc.nrodoc), 7))			     as serieNroDoc    
		
        ,UPPER(doc.idRespPago)              								     AS idResPago
        ,doc.respPago                                                                                        as resPago
        
        ,UPPER(doc.discente)										    as discente
		
        ,est.codigo                                                                                         as codEstudiante	
        ,isnull(niv.nombre,'')                                                                              as nombreNivel      
        ,(case
        when doc.idgradoacademico = 1 then CONCAT('P','1',doc.seccion)
        when doc.idgradoacademico = 2 then CONCAT('P','2',doc.seccion)
        when doc.idgradoacademico = 3 then CONCAT('P','3',doc.seccion)
        when doc.idgradoacademico = 4 then CONCAT('P','4',doc.seccion)
        when doc.idgradoacademico = 5 then CONCAT('P','5',doc.seccion)
        when doc.idgradoacademico = 6 then CONCAT('P','6',doc.seccion)

        when doc.idgradoacademico = 7 then CONCAT('S','1',doc.seccion)
        when doc.idgradoacademico = 8 then CONCAT('S','2',doc.seccion)
        when doc.idgradoacademico = 9 then CONCAT('S','3',doc.seccion)
        when doc.idgradoacademico = 10 then CONCAT('S','4',doc.seccion)
        when doc.idgradoacademico = 11 then CONCAT('S','5',doc.seccion)

        when doc.idgradoacademico = 23 then CONCAT('I','3',doc.seccion)
        when doc.idgradoacademico = 24 then CONCAT('I','4',doc.seccion)
        when doc.idgradoacademico = 25 then CONCAT('I','5',doc.seccion)
        end) as nombreGrado
        ,(case when ddoc.dsctobeca <![CDATA[ >  ]]> 0 then ' ' else 'X' end ) as pagante 
        ,(case when ddoc.dsctobeca <![CDATA[ >  ]]> 0 then 'X' else ' ' end )  as becado
        
        ,(case when codLug.codigo='Colegio' then 'X' else ' ' end ) as colegio
        ,(case when codLug.codigo='Banco' then 'X' else ' ' end ) as banco
		
        ,(
        case
        when c.mes=2 then 'MATRÍCULA'
        when c.mes=3 then  'MARZO' 
        when c.mes=4 then   'ABRIL' 
        when c.mes=5 then   'MAYO'  
        when c.mes=6 then 'JUNIO' 
        when c.mes=7 then  'JULIO' 
        when c.mes=8 then   'AGOSTO'  
        when c.mes=9 then   'SEPTIEMBRE'  
        when c.mes=10 then   'OCTUBRE'  
        when c.mes=11 then   'NOVIEMBRE'  
        when c.mes=12 then 'DICIEMBRE'  
        END
        ) AS correspondientea 
        ,(select convert(varchar,C.fechaVenc ,103))	  as  fechaVenc 
        ,(case when c.idestudiantebeca is not null or c.dsctobeca <![CDATA[ > ]]>0 
        then beca.nombre
        else '-' 
        end) as tipoBeca,
        <!-- (CASE WHEN isnull(DDOC.MORA,0) <![CDATA[ > ]]> 0 THEN 1 ELSE 0 END) AS mora, -->
        (case
        when (select c.mes from MT_CtasxCobrar c where c.unineg = doc.unineg
        and ISNULL(c.idtipostatusctacte,19401) = 19401 and doc.flgmasivo = 'g' 
        and doc.flgimpresion is not null and c.iddocingreso = doc.iddocingreso) is not null
        and
        (select c.mes from MT_CtasxCobrar c
        where c.unineg = doc.unineg and c.idtipostatusctacte = 19404 and doc.flgmasivo = 'b' and doc.flgimpresion is not null
        and DATEDIFF(DAY,c.fechapago,c.fechavenc) <![CDATA[ < ]]> 0 and c.iddocingreso = doc.iddocingreso) is not null
        then (CASE WHEN isnull(DDOC.MORA,0) <![CDATA[ > ]]> 0 THEN 1 ELSE 0 END)
        when (select c.mes from MT_CtasxCobrar c where c.unineg = doc.unineg
        and ISNULL(c.idtipostatusctacte,19401) = 19401 and doc.flgmasivo = 'g' 
        and doc.flgimpresion is not null and c.iddocingreso = doc.iddocingreso) is not null
        or
        (select c.mes from MT_CtasxCobrar c
        where c.unineg = doc.unineg and c.idtipostatusctacte = 19404 and doc.flgmasivo = 'b' and doc.flgimpresion is not null
        and DATEDIFF(DAY,c.fechapago,c.fechavenc) <![CDATA[ < ]]> 0 and c.iddocingreso = doc.iddocingreso) is not null
        then 0
        end) as mora,
        (CASE WHEN isnull(DDOC.dsctobeca,0) <![CDATA[ > ]]> 0 THEN 1 ELSE 0 END) AS beca,
        (CASE WHEN isnull(DDOC.dscto,0) <![CDATA[ > ]]> 0 THEN 1 ELSE 0 END) AS dscto,
        doc.idDocIngreso,
        doc.anio as anio,
        (CONVERT(varchar, CAST((ddoc.montopagado)AS money), 1)) as montoPagadoVista,
        upper(ddoc.referencia) as nomConcepto,
        (case
        when (select c.mes from MT_CtasxCobrar c where c.unineg = doc.unineg 
        and doc.flgmasivo in ('b') and DATEDIFF(DAY,c.fechapago,c.fechavenc) <![CDATA[ > ]]> 0 and c.idtipostatusctacte = 19404 
        and doc.flgimpresion is not null and YEAR(c.fechapago) = c.anio and MONTH(c.fechapago) = c.mes
        and c.mes in (select mes from @listaMes where mes <![CDATA[ <> ]]> c.mes and mes <![CDATA[ > ]]> c.mes) and c.iddocingreso = doc.iddocingreso) is not null then CONVERT(varchar,c.fechapago,105)
        when (select c.mes from MT_CtasxCobrar c where c.unineg = doc.unineg and c.idtipostatusctacte = 19404 and doc.flgmasivo = 'b' and doc.flgimpresion is not null
        and DATEDIFF(DAY,c.fechapago,c.fechavenc) <![CDATA[ < ]]> 0 and c.iddocingreso = doc.iddocingreso) is not null 
        or 
        (select c.mes from MT_CtasxCobrar c where c.unineg = doc.unineg 
        and ISNULL(c.idtipostatusctacte,19401) = 19401 and doc.flgmasivo = 'g' 
        and doc.flgimpresion is not null and c.iddocingreso = doc.iddocingreso) is not null
        then (case
        when c.mes = 2 then CONVERT(varchar,EOMONTH(convert(datetime,CONCAT('1/02/',CONVERT(varchar,c.anio)))),105) 
        when c.mes = 3 then CONVERT(varchar,EOMONTH(convert(datetime,CONCAT('1/03/',CONVERT(varchar,c.anio)))),105) 
        when c.mes = 4 then CONVERT(varchar,EOMONTH(convert(datetime,CONCAT('1/04/',CONVERT(varchar,c.anio)))),105) 
        when c.mes = 5 then CONVERT(varchar,EOMONTH(convert(datetime,CONCAT('1/05/',CONVERT(varchar,c.anio)))),105) 
        when c.mes = 6 then CONVERT(varchar,EOMONTH(convert(datetime,CONCAT('1/06/',CONVERT(varchar,c.anio)))),105) 
        when c.mes = 7 then CONVERT(varchar,EOMONTH(convert(datetime,CONCAT('1/07/',CONVERT(varchar,c.anio)))),105) 
        when c.mes = 8 then CONVERT(varchar,EOMONTH(convert(datetime,CONCAT('1/08/',CONVERT(varchar,c.anio)))),105) 
        when c.mes = 9 then CONVERT(varchar,EOMONTH(convert(datetime,CONCAT('1/09/',CONVERT(varchar,c.anio)))),105) 
        when c.mes = 10 then CONVERT(varchar,EOMONTH(convert(datetime,CONCAT('1/10/',CONVERT(varchar,c.anio)))),105) 
        when c.mes = 11 then CONVERT(varchar,EOMONTH(convert(datetime,CONCAT('1/11/',CONVERT(varchar,c.anio)))),105) 
        when c.mes = 12 then CONVERT(varchar,EOMONTH(convert(datetime,CONCAT('1/12/',CONVERT(varchar,c.anio)))),105) 
        end) 
        else 
        (case
        when c.mes = 2 then CONVERT(varchar,EOMONTH(convert(datetime,CONCAT('1/02/',CONVERT(varchar,c.anio)))),105) 
        when c.mes = 3 then CONVERT(varchar,EOMONTH(convert(datetime,CONCAT('1/03/',CONVERT(varchar,c.anio)))),105) 
        when c.mes = 4 then CONVERT(varchar,EOMONTH(convert(datetime,CONCAT('1/04/',CONVERT(varchar,c.anio)))),105) 
        when c.mes = 5 then CONVERT(varchar,EOMONTH(convert(datetime,CONCAT('1/05/',CONVERT(varchar,c.anio)))),105) 
        when c.mes = 6 then CONVERT(varchar,EOMONTH(convert(datetime,CONCAT('1/06/',CONVERT(varchar,c.anio)))),105) 
        when c.mes = 7 then CONVERT(varchar,EOMONTH(convert(datetime,CONCAT('1/07/',CONVERT(varchar,c.anio)))),105) 
        when c.mes = 8 then CONVERT(varchar,EOMONTH(convert(datetime,CONCAT('1/08/',CONVERT(varchar,c.anio)))),105) 
        when c.mes = 9 then CONVERT(varchar,EOMONTH(convert(datetime,CONCAT('1/09/',CONVERT(varchar,c.anio)))),105) 
        when c.mes = 10 then CONVERT(varchar,EOMONTH(convert(datetime,CONCAT('1/10/',CONVERT(varchar,c.anio)))),105) 
        when c.mes = 11 then CONVERT(varchar,EOMONTH(convert(datetime,CONCAT('1/11/',CONVERT(varchar,c.anio)))),105) 
        when c.mes = 12 then CONVERT(varchar,EOMONTH(convert(datetime,CONCAT('1/12/',CONVERT(varchar,c.anio)))),105) 
        end)
        end) as fecha,
        (case 
        when c.idtipostatusctacte = 19404 then 'C'+''
        when ISNULL(c.idtipostatusctacte,19401) = 19401 then ''
        end) as infoRecibo,
        (case
        when isnull(DATEDIFF(DAY,c.fechapago,c.fechavenc),-1) <![CDATA[ < ]]>  0 then 1
        when DATEDIFF(DAY,c.fechapago,c.fechavenc) <![CDATA[ >= ]]>  0 then 0
        end) as infoMonto 
        from MT_DetDocIngreso ddoc 
        inner join MT_DocIngreso doc on doc.iddocingreso=ddoc.iddocingreso and ddoc.unineg=doc.unineg
        inner join MT_CtasxCobrar c on c.idctasxcobrar=ddoc.idctasxcobrar and ddoc.unineg=c.unineg
        inner join MX_Estudiante est on est.idestudiante=doc.iddiscente and est.unineg=doc.unineg 
        inner join MX_Persona p on est.idestudiante = p.idpersona and est.unineg = p.unineg
        inner join mo_Codigo cod on cod.idcodigo = doc.idtipodoc
        left join mo_Codigo codLug on doc.idtipolugarpago = codLug.idcodigo 
        INNER JOIN MO_UnidadNegocio uni ON uni.unineg = doc.unineg
        LEFT JOIN MO_Entidad ent ON ent.ruc = uni.RUC and uni.unineg=ent.unineg
        LEFT JOIN MO_Distrito dis ON dis.iddistrito = ent.iddistrito
        LEFT JOIN MX_GradoAcademico gra ON gra.idgradoacademico = est.idgradohabilitado 
        LEFT JOIN MX_NivelAcademico niv ON niv.idnivelacademico = gra.idnivelacademico
        LEFT JOIN MX_EstudianteBeca estBe on estBe.idestudiantebeca=c.idestudiantebeca
        left Join MT_Beca beca on estBe.idbeca=beca.idbeca
        where doc.unineg=#{uniNeg}  and  doc.iddocingreso  in
        <foreach item="item" index="index" collection="list" 
                 open="(" separator="," close=")">
            #{item}
        </foreach>
        <!-- order by c.fechapago,niv.idNivelAcademico desc,gra.idGradoAcademico,est.seccion,p.apepat,p.apemat -->
    </select>
    
    <select id="obtenerRecDetDocIngresoMasivo" resultType="pe.marista.sigma.bean.reporte.DetDocIngresoRepBean" parameterType="map">
        Select
        CONCAT(doc.serie,'-',doc.nrodoc,'/',es.codigo) as qr,
        CON.cuentad AS cuentaD,
        upper(ddoc.referencia) as nomConcepto,   
        (CONVERT(varchar, CAST((ddoc.monto)AS money), 1)) as montoVista, 
        <if test="infoMonto == 1" > 
            (CONVERT(varchar, CAST((ddoc.monto - isnull(ddoc.dsctobeca,0))AS money), 1)) as montoPagadoVista, 
        </if>
        <if test="infoMonto == 0" > 
            (CONVERT(varchar, CAST((ddoc.montopagado)AS money), 1)) as montoPagadoVista,     
        </if>
        <if test="infoMonto == 1" >
            (Select dbo.CantidadConLetra((ddoc.monto - isnull(ddoc.dsctobeca,0)))+ ' ' +
            (case when isnull(doc.idtipomoneda,14901)=14901 then 'SOLES' ELSE 'DÓLARES AMERICANOS' end )) AS textoMonto,
        </if>
        <if test="infoMonto == 0" >
            (Select dbo.CantidadConLetra(DDOC.montopagado)+ ' ' +
            (case when isnull(doc.idtipomoneda,14901)=14901 then 'SOLES' ELSE 'DÓLARES AMERICANOS' end )) AS textoMonto,
        </if>
        <!--
        (Select dbo.CantidadConLetra(DDOC.montopagado)+ ' ' +
        (case when isnull(doc.idtipomoneda,14901)=14901 then 'SOLES' ELSE 'DÓLARES AMERICANOS' end )) AS textoMonto,
        -->
        convert(varchar,isnull((CAST((ddoc.montopagado)AS money) - CAST(isnull(ddoc.dsctobeca,0) as money)),0)) as totalPago,
        (case 
        when ddoc.dsctobeca is not null and ddoc.dsctobeca <![CDATA[ <> ]]> 0.00 then CONVERT(varchar,ISNULL(ddoc.dsctobeca,0))
        when ddoc.dsctobeca is null or ddoc.dsctobeca = 0.00 then ''
        end) as dsctobeca,
        (case 
        when ddoc.dsctobeca is not null and ddoc.dsctobeca <![CDATA[ <> ]]> 0.00 then '741112'
        when ddoc.dsctobeca is null or ddoc.dsctobeca = 0.00 then ''
        end) as cuentaDsctoBeca,
        (case 
        when ddoc.dsctobeca is not null and ddoc.dsctobeca <![CDATA[ <> ]]> 0.00 then (select top 1 upper(nombre) from MT_Concepto where cuentah =741112)
        when ddoc.dsctobeca is null or ddoc.dsctobeca = 0.00 then ''
        end) as labelDsctoBeca 
        from MT_DetDocIngreso ddoc
        inner join MT_DocIngreso doc on doc.iddocingreso=ddoc.iddocingreso and ddoc.unineg=doc.unineg
        inner join MX_Estudiante es on doc.iddiscente = es.idestudiante and doc.unineg = es.unineg
        inner join MT_CtasxCobrar c on c.idctasxcobrar=ddoc.idctasxcobrar and ddoc.unineg=c.unineg and c.iddocingreso = ddoc.iddocingreso
        INNER JOIN MT_Concepto con ON con.idconcepto = ddoc.idconcepto
        LEFT JOIN MO_UnidadNegocio uni ON uni.unineg = doc.unineg  
        where doc.unineg=#{uniNeg}  and  doc.iddocingreso  in (#{idDocIngreso})
        <if test="beca == 1"> 
            union all
            select 
            CONCAT(doc.serie,' ',doc.nrodoc,' ',es.codigo) as qr,
            741112 as cuenta,
            (select top 1 upper(nombre) from MT_Concepto where cuentah =741112) as concepto, 
            '-'+(CONVERT(varchar, CAST((ddoc.dsctobeca)AS money), 1)) as montoVista, 
            <if test="infoMonto == 1" > 
                (CONVERT(varchar, CAST((ddoc.monto - isnull(ddoc.dsctobeca,0))AS money), 1)) as montoPagadoVista,
            </if>
            <if test="infoMonto == 0" >
                (CONVERT(varchar, CAST((ddoc.montopagado)AS money), 1)) as montoPagadoVista,   
            </if>
            <if test="infoMonto == 1" >
                (Select dbo.CantidadConLetra((ddoc.monto - isnull(ddoc.dsctobeca,0)))+ ' ' +
                (case when isnull(doc.idtipomoneda,14901)=14901 then 'SOLES' ELSE 'DÓLARES AMERICANOS' end )) AS textoMonto,
            </if>
            <if test="infoMonto == 0" >
                (Select dbo.CantidadConLetra(DDOC.montopagado)+ ' ' +
                (case when isnull(doc.idtipomoneda,14901)=14901 then 'SOLES' ELSE 'DÓLARES AMERICANOS' end )) AS textoMonto,
            </if> 
            convert(varchar,isnull((CAST((ddoc.montopagado)AS money) - CAST(isnull(ddoc.dsctobeca,0) as money)),0)) as totalPago,
            (case 
            when ddoc.dsctobeca is not null and ddoc.dsctobeca <![CDATA[ <> ]]> 0.00 then CONVERT(varchar,ISNULL(ddoc.dsctobeca,0))
            when ddoc.dsctobeca is null or ddoc.dsctobeca = 0.00 then ''
            end) as dsctobeca,
            (case 
            when ddoc.dsctobeca is not null and ddoc.dsctobeca <![CDATA[ <> ]]> 0.00 then '741112'
            when ddoc.dsctobeca is null or ddoc.dsctobeca = 0.00 then ''
            end) as cuentaDsctoBeca,
            (case 
            when ddoc.dsctobeca is not null and ddoc.dsctobeca <![CDATA[ <> ]]> 0.00 then (select top 1 upper(nombre) from MT_Concepto where cuentah =741112)
            when ddoc.dsctobeca is null or ddoc.dsctobeca = 0.00 then ''
            end) as labelDsctoBeca
            from MT_DetDocIngreso ddoc
            inner join MT_DocIngreso doc on doc.iddocingreso=ddoc.iddocingreso and ddoc.unineg=doc.unineg
            inner join MX_Estudiante es on doc.iddiscente = es.idestudiante and doc.unineg = es.unineg
            inner join MT_CtasxCobrar c on c.idctasxcobrar=ddoc.idctasxcobrar and ddoc.unineg=c.unineg and c.iddocingreso = ddoc.iddocingreso
            INNER JOIN MT_Concepto con ON con.idconcepto = ddoc.idconcepto
            LEFT JOIN MO_UnidadNegocio uni ON uni.unineg = doc.unineg  
            where doc.unineg=#{uniNeg}  and  doc.iddocingreso  in (#{idDocIngreso})
        </if>
        <if test="mora == 1"> 
            union all
            select 
            CONCAT(doc.serie,' ',doc.nrodoc,' ',es.codigo) as qr,
            772211 as cuenta, 
            (select nombre from MT_PlanContable where cuenta=772211) as concepto,
            (CONVERT(varchar, CAST((ddoc.mora)AS money), 1)) as montoVista, 
            <if test="infoMonto == 1" > 
                <!-- (CONVERT(varchar, CAST((ddoc.montopagado)AS money), 1)) as montoPagadoVista, -->
                (CONVERT(varchar, CAST((ddoc.monto - isnull(ddoc.dsctobeca,0))AS money), 1)) as montoPagadoVista, 
            </if>
            <if test="infoMonto == 0" > 
                (CONVERT(varchar, CAST((ddoc.montopagado)AS money), 1)) as montoPagadoVista,     
            </if>
            <if test="infoMonto == 1" >
                (Select dbo.CantidadConLetra((ddoc.monto - isnull(ddoc.dsctobeca,0)))+ ' ' +
                (case when isnull(doc.idtipomoneda,14901)=14901 then 'SOLES' ELSE 'DÓLARES AMERICANOS' end )) AS textoMonto,
            </if>
            <if test="infoMonto == 0" >
                (Select dbo.CantidadConLetra(DDOC.montopagado)+ ' ' +
                (case when isnull(doc.idtipomoneda,14901)=14901 then 'SOLES' ELSE 'DÓLARES AMERICANOS' end )) AS textoMonto,
            </if> 
            <!--
            (Select dbo.CantidadConLetra(DDOC.montopagado)+ ' ' +
            (case when isnull(doc.idtipomoneda,14901)=14901 then 'SOLES' ELSE 'DÓLARES AMERICANOS' end )) AS textoMonto,
            -->
            convert(varchar,isnull((CAST((ddoc.montopagado)AS money) - CAST(isnull(ddoc.dsctobeca,0) as money)),0)) as totalPago,
            (case 
            when ddoc.dsctobeca is not null and ddoc.dsctobeca <![CDATA[ <> ]]> 0.00 then CONVERT(varchar,ISNULL(ddoc.dsctobeca,0))
            when ddoc.dsctobeca is null or ddoc.dsctobeca = 0.00 then ''
            end) as dsctobeca,
            (case 
            when ddoc.dsctobeca is not null and ddoc.dsctobeca <![CDATA[ <> ]]> 0.00 then '741112'
            when ddoc.dsctobeca is null or ddoc.dsctobeca = 0.00 then ''
            end) as cuentaDsctoBeca,
            (case 
            when ddoc.dsctobeca is not null and ddoc.dsctobeca <![CDATA[ <> ]]> 0.00 then (select top 1 upper(nombre) from MT_Concepto where cuentah =741112)
            when ddoc.dsctobeca is null or ddoc.dsctobeca = 0.00 then ''
            end) as labelDsctoBeca 
            from MT_DetDocIngreso ddoc
            inner join MT_DocIngreso doc on doc.iddocingreso=ddoc.iddocingreso and ddoc.unineg=doc.unineg
            inner join MX_Estudiante es on doc.iddiscente = es.idestudiante and doc.unineg = es.unineg
            inner join MT_CtasxCobrar c on c.idctasxcobrar=ddoc.idctasxcobrar and ddoc.unineg=c.unineg and c.iddocingreso = ddoc.iddocingreso 
            INNER JOIN MT_Concepto con ON con.idconcepto = ddoc.idconcepto
            LEFT JOIN MO_UnidadNegocio uni ON uni.unineg = doc.unineg  
            where doc.unineg=#{uniNeg}  and  doc.iddocingreso  in (#{idDocIngreso})
        </if>
        <if test="dscto == 1"> 
            union all
            select 
            CONCAT(doc.serie,' ',doc.nrodoc,' ',es.codigo) as qr,
            772211 as cuenta, 
            (select 'DSCTO '+nombre from MT_PlanContable where cuenta=772211) as concepto,
            '-'+(CONVERT(varchar, CAST((ddoc.dscto)AS money), 1)) as montoVista, 
            <if test="infoMonto == 1" > 
                <!-- (CONVERT(varchar, CAST((ddoc.montopagado)AS money), 1)) as montoPagadoVista, -->
                (CONVERT(varchar, CAST((ddoc.monto - isnull(ddoc.dsctobeca,0))AS money), 1)) as montoPagadoVista, 
            </if>
            <if test="infoMonto == 0" > 
                (CONVERT(varchar, CAST((ddoc.montopagado)AS money), 1)) as montoPagadoVista,     
            </if> 
            <if test="infoMonto == 1" >
                (Select dbo.CantidadConLetra((ddoc.monto - isnull(ddoc.dsctobeca,0)))+ ' ' +
                (case when isnull(doc.idtipomoneda,14901)=14901 then 'SOLES' ELSE 'DÓLARES AMERICANOS' end )) AS textoMonto,
            </if>
            <if test="infoMonto == 0" >
                (Select dbo.CantidadConLetra(DDOC.montopagado)+ ' ' +
                (case when isnull(doc.idtipomoneda,14901)=14901 then 'SOLES' ELSE 'DÓLARES AMERICANOS' end )) AS textoMonto,
            </if> 
            convert(varchar,isnull((CAST((ddoc.montopagado)AS money) - CAST(isnull(ddoc.dsctobeca,0) as money)),0)) as totalPago,
            (case 
            when ddoc.dsctobeca is not null and ddoc.dsctobeca <![CDATA[ <> ]]> 0.00 then CONVERT(varchar,ISNULL(ddoc.dsctobeca,0))
            when ddoc.dsctobeca is null or ddoc.dsctobeca = 0.00 then ''
            end) as dsctobeca,
            (case 
            when ddoc.dsctobeca is not null and ddoc.dsctobeca <![CDATA[ <> ]]> 0.00 then '741112'
            when ddoc.dsctobeca is null or ddoc.dsctobeca = 0.00 then ''
            end) as cuentaDsctoBeca,
            (case 
            when ddoc.dsctobeca is not null and ddoc.dsctobeca <![CDATA[ <> ]]> 0.00 then (select top 1 upper(nombre) from MT_Concepto where cuentah =741112)
            when ddoc.dsctobeca is null or ddoc.dsctobeca = 0.00 then ''
            end) as labelDsctoBeca 
            from MT_DetDocIngreso ddoc
            inner join MT_DocIngreso doc on doc.iddocingreso=ddoc.iddocingreso and ddoc.unineg=doc.unineg
            inner join MX_Estudiante es on doc.iddiscente = es.idestudiante and doc.unineg = es.unineg
            inner join MT_CtasxCobrar c on c.idctasxcobrar=ddoc.idctasxcobrar and ddoc.unineg=c.unineg and c.iddocingreso = ddoc.iddocingreso
            INNER JOIN MT_Concepto con ON con.idconcepto = ddoc.idconcepto
            LEFT JOIN MO_UnidadNegocio uni ON uni.unineg = doc.unineg  
            where doc.unineg=#{uniNeg}  and  doc.iddocingreso  in (#{idDocIngreso})
        </if>
    </select>
    <!-- nuevos --> 
    <select id="obtenerDocIngresoPorIdFull" resultType="pe.marista.sigma.bean.DocIngresoBean" resultMap="docIngresoResultadoFull" parameterType="map" >
        declare @idDocIngreso int=#{idDocIngreso},@uniNeg varchar(6)=#{uniNeg}
        SELECT 
        doc.uniNeg			as uniNeg
        ,doc.idDocIngreso		as idDocIngreso
        ,doc.idcajagen			as idCajaGen
        ,case when cajGen.fecapertura	is null then '  /  /' else convert(varchar,cajGen.fecapertura,103) end	as fechaAperturaView
        ,doc.impresora			as impresora
        ,doc.idtipodoc			as idTipoDoc
        ,isnull(codTip.codigo,'')       as codTipoDoc
        ,doc.idcaja			as idCaja
        ,isnull(caj.nombre,'')          as nombreCaja
        ,isnull(doc.serie,'')		as serie
        ,isnull(doc.nrodoc,'')          as nroDoc
        ,doc.iddiscente			as codDiscente
        ,doc.discente			as nombreDiscente
        ,doc.seccion			as seccion
        
        ,doc.idgradoacademico		as idGradoAcademicoDoc
        ,grad.nombre			as nombreGradoAcaDoc

        ,doc.idresppago			as idRespPago
        ,doc.resppago			as nomResPago
       
        ,doc.anio			as anio
        ,doc.direccion			as direccion 
        ,doc.telefono			as telefono
        ,doc.obs			as obs

        ,doc.idtipolugarpago		as idTipoLugarPago
        ,isnull(codLug.codigo,'')       as codTipoLugarPago

        ,doc.idtipomodopago		as idTipoModoPago
        ,isnull(codTipPago.codigo,'')   as codTipoModoPago

        ,doc.fechapago			as fechaPago
        ,isnull(doc.idestudiantebeca,0) as idEstudianteBeca
        ,isnull(bec.nombre,'0/6') as beca
              
        ,doc.creapor			as creaPor
        ,doc.creafecha			as creaFecha
        ,doc.modipor			as modiPor
       
        ,isnull(doc.montopos1,0)	as montoPos1
        ,isnull(doc.montopos2,0)	as montoPos2
        ,isnull(doc.montoefectivosol,0)	as montoEfectivoSol
        ,isnull(doc.montoefectivodol,0)	as montoEfectivoDol
	   
        ,isnull(doc.tc,0)		as tc
        ,doc.idtipostatusdocing         as idTipoStatusDocIng
        ,isnull(codTipoSta.codigo,'')   as codTipoStatusDocIng

        ,doc.creaFechaStatus		as creaFechaStatus
        ,doc.creaStatus			as creaStatus	
        ,doc.flganulado			as flgAnulado
        ,doc.flgMasivo			as flgMasivo
        ,doc.idcajagenanulado		as idCajaGenAnulado      

        ,case when doc.idcajagen is null then 1 else 0 end as flgCajaGenNull
        ,case when doc.idcajagenanulado is null then 1 else 0 end as flgCajaGenAnuladoNull
         
        ,case when doc.fechapago is null then 1 else 0 end as flgFechaPagoNull
        ,case when doc.creaFechaStatus is null then 1 else 0 end as flgFechaEstNull
         
        ,doc.idcajagenanulado as idCajaGenAnulado
        ,cajA.nombre AS nombreCajaAnulado
        FROM MT_DocIngreso doc
        LEFT JOIN MT_CajaGen cajGen on cajGen.idcajagen=doc.idcajagen and doc.unineg=cajGen.unineg
        LEFT JOIN MT_CajaGen cajGenA on cajGenA.idcajagen=doc.idcajagenanulado and doc.unineg=cajGenA.unineg
        LEFT JOIN MT_Caja caj on caj.idcaja=cajGen.idcaja and caj.unineg=cajGen.unineg
        LEFT JOIN MT_Caja cajA on cajA.idcaja=cajGenA.idcaja and caj.unineg=cajGenA.unineg
        LEFT JOIN MO_Codigo codTip ON codTip.idcodigo = doc.idtipodoc
        LEFT JOIN MX_GradoAcademico grad on grad.idgradoacademico=doc.idgradoacademico
        LEFT JOIN MO_Codigo codLug ON codLug.idcodigo = doc.idtipolugarpago
        LEFT JOIN MO_Codigo codTipPago ON codTipPago.idcodigo = doc.idtipomodopago
        left join MX_EstudianteBeca estBec on estBec.idestudiantebeca=doc.idestudiantebeca and estBec.unineg=doc.unineg
        left join MT_Beca bec on bec.idbeca=estBec.idbeca
        LEFT JOIN MO_Codigo codTipoSta ON codTipoSta.idcodigo = doc.idtipostatusdocing 
        where doc.iddocingreso = @idDocIngreso and doc.unineg=@uniNeg
    </select>
    <select id="obtenerDetDocIngPorDocIngreso" resultMap="detDocIngresoBeanRes2" parameterType="map">
        SELECT 
        det.uniNeg          as uniNegDet
        ,det.idDocIngreso    as idDocIngreso
        ,det.idDetDocIngreso as idDetDocIngreso
        ,det.idConcepto      as idConcepto
        ,isnull(det.monto,0) as monto
        ,isnull(det.dscto,0) as dscto
        ,isnull(det.dsctoBeca,0) as dsctoBeca
        ,isnull(det.montoPagado,0) as montoPagado
        ,det.idTipoDscto     as idTipoDscto        
        ,det.cuentaD 
        ,det.cuentaH
        ,det.cr
        ,det.idCtasXcobrar as idCtasXCobrar
        ,det.creaPor
        ,det.creaFecha
        ,det.modiPor       
        ,isnull(montoSoles,0) as montoSoles
        ,isnull(montoDolares,0) as montoDolares
        ,isnull(det.mora,0)  as mora
        ,det.referencia 
        ,det.idProgramacion       
        FROM MT_DetDocIngreso det
        left join MO_Codigo tipDes on tipDes.idcodigo = det.idtipodscto         
        where iddocingreso=#{idDocIngreso} and unineg=#{uniNeg}
    </select>
    <update id="modificarDocIngFull" parameterType="pe.marista.sigma.bean.DocIngresoBean">
        UPDATE MT_DocIngreso
        SET  
        idcajagen=#{cajaGenBean.idCajaGen}	
        ,impresora=#{impresoraCajaBean.impresora.impresora}			 
        ,idtipodoc=#{idTipoDoc.idCodigo}	
        ,idcaja=#{cajaGenBean.cajaBean.idCaja}		
        ,serie =#{serie}
        ,nrodoc =#{nroDoc}          
        ,iddiscente=#{codDiscente}			 
        ,discente=#{nombreDiscente}			 
        ,seccion=#{seccion}	
        ,idgradoacademico=#{idGradoAcademico}		 
        ,idresppago=#{idRespPago}			 
        ,resppago=#{nomResPago}	 
        ,anio=#{anio}			
        ,direccion=#{direccion}	 
        ,telefono=#{telefono}	 
        ,obs	=#{obs}	 
        ,idtipolugarpago=#{idTipoLugarPago.idCodigo}	
        ,idtipomodopago=#{idTipoModoPago.idCodigo}	 
        ,fechapago=#{fechaPago}			 
        <!--,doc.idestudiantebeca -->
        ,creapor=#{creaPor}			 
        <!--,creafecha=#{creaFecha} -->
        ,modipor=#{modiPor}			 
        ,montopos1 =#{montoPos1}
        ,montopos2 =#{montoPos2}
        ,montoefectivosol =#{montoEfectivoSol}
        ,montoefectivodol =#{montoEfectivoDol}
        ,tc =#{tc}
        ,idtipostatusdocing =#{tipoStatusDocIng.idCodigo} 
        ,creaFechaStatus=#{creaFechaStatus}		 
        ,creaStatus=#{creaStatus}			 
        ,flganulado=#{flgAnulado}			 
        ,flgMasivo=#{flgMasivo}			 
        ,idcajagenanulado=#{idCajaGenAnulado}	 
        where  iddocingreso = #{idDocIngreso} and uniNeg=#{unidadNegocioBean.uniNeg}
    </update>
    <update id="modificarDetalleDocIngFull" parameterType="pe.marista.sigma.bean.DetDocIngresoBean">
        UPDATE MT_DetDocIngreso
        SET   
        idConcepto =#{conceptoBean.idConcepto}    
        ,monto =#{monto} 
        ,dscto =#{dscto} 
        ,dsctoBeca =#{dsctoBeca} 
        ,montoPagado =#{montoPagado} 
        ,idTipoDscto =#{idTipoDscto.idCodigo} 
        ,cuentaD  =#{cuentaD.cuenta} 
        ,cuentaH =#{cuentaH.cuenta} 
        ,cr =#{centroResponsabilidadBean.cr} 
        <!--,idCtasXcobrar  =#{} -->
        ,creaPor =#{creaPor} 
        ,creaFecha =#{creaFecha} 
        ,modiPor =#{modiPor}        
        ,montoSoles =#{montoSoles} 
        ,montoDolares =#{montoDolares} 
        ,mora =#{mora} 
        ,referencia  =#{referencia} 
        <!--,idProgramacion  =#{}       -->        
        where  iddocingreso = #{idDocIngreso} and uniNeg=#{unidadNegocioBean.uniNeg}
    </update>
    <update id="modificarDetalleDocIngDes" parameterType="map">
        UPDATE MT_DetDocIngreso
        SET    
        dsctoBeca =#{dsctoBeca}  
        where  idctasxcobrar = #{idCtasxCobrar} and uniNeg=#{uniNeg} 
    </update>
    <update id="modificarDetalleDocIngDesBecaTotal" parameterType="map">
        UPDATE MT_DetDocIngreso
        SET    
        dsctoBeca =#{dsctoBeca} ,
        montopagado =0.00,
        montosoles=0.00,
        mora=0.00 
        where  idctasxcobrar = #{idCtasxCobrar} and uniNeg=#{uniNeg} 
    </update>
    <update id="modificarDetalleDocIngDesCambioBeca" parameterType="map">
        UPDATE MT_DetDocIngreso
        SET    
        dsctoBeca =#{dsctoBeca} ,
        montoPagado=0.00,
        montosoles=0.00
        where  idctasxcobrar = #{idCtasxCobrar} and uniNeg=#{uniNeg} and iddocingreso=#{idDocIngreso}
    </update>
     
    <select id="cantDetPorIdDocIngreso" parameterType="map" resultType="Integer" >
        select count(*) from MT_DetDocIngreso where iddocingreso=#{idDocIngreso} and unineg=#{uniNeg}
    </select>
    
    <update id="cambiarFechaImpresion" parameterType="map">
        UPDATE MT_DocIngreso
        SET   
        fechaimpresion= GETDATE(),
        flgimpresion=1
        where   uniNeg=#{uniNeg}   
        <if test="list != null " >
            and iddocingreso in
            <foreach item="item" index="index" collection="list" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="list == null " >
            and iddocingreso in (0)
        </if>
        and  fechaimpresion is null
    </update>
    <update id="cambiarDsctoBeca" parameterType="map">
        UPDATE MT_DetDocIngreso
        SET   
        dsctoBeca=#{dsctoBeca}
        where   uniNeg=#{uniNeg}    
        and iddocingreso =#{idDocIngreso} 
    </update>
    <update id="ponerNroReciboMora" parameterType="map">
        UPDATE MT_DocIngreso
        SET   
        idrecibosmora=#{idRecibosMora}
        where   uniNeg=#{uniNeg}    
        and iddocingreso =#{idDocIngreso} 
    </update>
    <update id="modificarRespPagDocIng" parameterType="map">
        UPDATE d
        set  
        d.idresppago=#{idRespPago}			 
        ,d.resppago=#{nomResPago},
        d.idgradoacademico=#{idGradoAcademico}	
        from MT_DocIngreso d
        inner join MT_CtasxCobrar c on c.iddocingreso=d.iddocingreso 
        where  d.iddiscente = #{idDiscente}  and d.uniNeg=#{uniNeg} and c.anio=#{anio}
        and c.mes<![CDATA[ >= ]]>#{mesInicio} and c.mes<![CDATA[ <= ]]>#{mesFin} 
    </update>
    
    <update id="modificarMontosDocIng" parameterType="map">
        DECLARE @idGrado INTEGER
        SET @idGrado=#{idGradoAcademico} 
        UPDATE d
        set  
        d.monto=#{monto},
        d.dscto=0,
        d.dsctobeca=0,
        d.mora=0,
        d.idconcepto=(case when @IDGRADO=23 and mes=2 then 10001 
        when @IDGRADO=24 and mes=2 then 10002
        when @IDGRADO=25 and mes=2 then 10003
        when @IDGRADO=1 and mes=2 then 10004
        when @IDGRADO=2 and mes=2 then 10005
        when @IDGRADO=3 and mes=2 then 10006
        when @IDGRADO=4 and mes=2 then 10007
        when @IDGRADO=5 and mes=2 then 10008
        when @IDGRADO=6 and mes=2 then 10009
        when @IDGRADO=7 and mes=2 then 10010
        when @IDGRADO=8 and mes=2 then 10011
        when @IDGRADO=9 and mes=2 then 10012
        when @IDGRADO=10 and mes=2 then 10013
        when @IDGRADO=11 and mes=2 then 10015
        when @IDGRADO=12 and mes=2 then 10014
        when @IDGRADO=13 and mes=2 then 10016
        
        when @IDGRADO=23 and mes!=2 then 10101 
        when @IDGRADO=24 and mes!=2 then 10102
        when @IDGRADO=25 and mes!=2 then 10103
        when @IDGRADO=1 and mes!=2 then 10104
        when @IDGRADO=2 and mes!=2 then 10105
        when @IDGRADO=3 and mes!=2 then 10106
        when @IDGRADO=4 and mes!=2 then 10107
        when @IDGRADO=5 and mes!=2 then 10108
        when @IDGRADO=6 and mes!=2 then 10109
        when @IDGRADO=7 and mes!=2 then 10110
        when @IDGRADO=8 and mes!=2 then 10111
        when @IDGRADO=9 and mes!=2 then 10112
        when @IDGRADO=10 and mes!=2 then 10113
        when @IDGRADO=11 and mes!=2 then 10115
        when @IDGRADO=12 and mes!=2 then 10114
        when @IDGRADO=13 and mes!=2 then 10116
        end) ,
        referencia=concat((case when @IDGRADO=23 and mes=2 then 'MATR - INICIAL 3 - '
        when @IDGRADO=24 and mes=2 then 'MATR - INICIAL 4 - '
        when @IDGRADO=25 and mes=2 then 'MATR - INICIAL 5 AÑOS - '
        when @IDGRADO=1 and mes=2 then 'MATR - 1ER.GRADO - '
        when @IDGRADO=2 and mes=2 then 'MATR - 2DO.GRADO - '
        when @IDGRADO=3 and mes=2 then 'MATR - 3ER.GRADO - '
        when @IDGRADO=4 and mes=2 then 'MATR - 4TO.GRADO - '
        when @IDGRADO=5 and mes=2 then 'MATR - 5TO.GRADO - '
        when @IDGRADO=6 and mes=2 then 'MATR - 6TO.GRADO - '
        when @IDGRADO=7 and mes=2 then 'MATR - 7MO.GRADO - '
        when @IDGRADO=8 and mes=2 then 'MATR - OCT.GRADO - '
        when @IDGRADO=9 and mes=2 then 'MATR - NOV.GRADO - '
        when @IDGRADO=10 and mes=2 then 'MATR - DM.GRADO - '
        when @IDGRADO=11 and mes=2 then 'MATR - DM.I GRADO - '
        when @IDGRADO=12 and mes=2 then 'MATR - DM.GRADO BI - '
        when @IDGRADO=13 and mes=2 then 'MATR - DM.I GRADO BI - '
        
        when @IDGRADO=23 and mes!=2 then 'PENS - INICIAL 3 - ' 
        when @IDGRADO=24 and mes!=2 then 'PENS - INICIAL 4 - '
        when @IDGRADO=25 and mes!=2 then 'PENS - INICIAL 5 AÑOS - '
        when @IDGRADO=1 and mes!=2 then 'PENS - 1ER.GRADO - '
        when @IDGRADO=2 and mes!=2 then 'PENS - 2DO.GRADO - '
        when @IDGRADO=3 and mes!=2 then 'PENS - 3ER.GRADO - '
        when @IDGRADO=4 and mes!=2 then 'PENS - 4TO.GRADO - '
        when @IDGRADO=5 and mes!=2 then 'PENS - 5TO.GRADO - '
        when @IDGRADO=6 and mes!=2 then 'PENS - 6TO.GRADO - '
        when @IDGRADO=7 and mes!=2 then 'PENS - 7MO.GRADO - '
        when @IDGRADO=8 and mes!=2 then 'PENS - OCT.GRADO - '
        when @IDGRADO=9 and mes!=2 then 'PENS - NOV.GRADO - '
        when @IDGRADO=10 and mes!=2 then 'PENS - DM.GRADO - '
        when @IDGRADO=11 and mes!=2 then 'PENS - DM.I GRADO - '
        when @IDGRADO=12 and mes!=2 then 'PENS - DM.GRADO BI - '
        when @IDGRADO=13 and mes!=2 then 'PENS - DM.I GRADO BI - '
        end),''+ 
        convert(varchar(20),anio))
        from MT_DetDocIngreso d
        inner join MT_CtasxCobrar c on c.iddocingreso=d.iddocingreso 
        where  c.idEstudiante = #{idEstudiante}  and d.uniNeg=#{uniNeg} and c.anio=#{anio}
        and c.mes<![CDATA[ >= ]]>#{mesInicio} and c.mes<![CDATA[ <= ]]>#{mesFin} and c.idTipoStatusCtaCte!=19404
    </update>
    <update id="modificarMontosDocIngActivosCambioGrado" parameterType="map">
        DECLARE @idGrado INTEGER
        SET @idGrado=#{idGradoAcademico}  
        UPDATE d
        set  
        d.monto=#{monto}, 
        d.idconcepto=(case when @IDGRADO=23 and mes=2 then 10001 
        when @IDGRADO=24 and mes=2 then 10002
        when @IDGRADO=25 and mes=2 then 10003
        when @IDGRADO=1 and mes=2 then 10004
        when @IDGRADO=2 and mes=2 then 10005
        when @IDGRADO=3 and mes=2 then 10006
        when @IDGRADO=4 and mes=2 then 10007
        when @IDGRADO=5 and mes=2 then 10008
        when @IDGRADO=6 and mes=2 then 10009
        when @IDGRADO=7 and mes=2 then 10010
        when @IDGRADO=8 and mes=2 then 10011
        when @IDGRADO=9 and mes=2 then 10012
        when @IDGRADO=10 and mes=2 then 10013
        when @IDGRADO=11 and mes=2 then 10015
        when @IDGRADO=12 and mes=2 then 10014
        when @IDGRADO=13 and mes=2 then 10016
        
        when @IDGRADO=23 and mes!=2 then 10101 
        when @IDGRADO=24 and mes!=2 then 10102
        when @IDGRADO=25 and mes!=2 then 10103
        when @IDGRADO=1 and mes!=2 then 10104
        when @IDGRADO=2 and mes!=2 then 10105
        when @IDGRADO=3 and mes!=2 then 10106
        when @IDGRADO=4 and mes!=2 then 10107
        when @IDGRADO=5 and mes!=2 then 10108
        when @IDGRADO=6 and mes!=2 then 10109
        when @IDGRADO=7 and mes!=2 then 10110
        when @IDGRADO=8 and mes!=2 then 10111
        when @IDGRADO=9 and mes!=2 then 10112
        when @IDGRADO=10 and mes!=2 then 10113
        when @IDGRADO=11 and mes!=2 then 10115
        when @IDGRADO=12 and mes!=2 then 10114
        when @IDGRADO=13 and mes!=2 then 10116
        end) ,
        referencia=concat((case when @IDGRADO=23 and mes=2 then 'MATR - INICIAL 3 - '
        when @IDGRADO=24 and mes=2 then 'MATR - INICIAL 4 - '
        when @IDGRADO=25 and mes=2 then 'MATR - INICIAL 5 AÑOS - '
        when @IDGRADO=1 and mes=2 then 'MATR - 1ER.GRADO - '
        when @IDGRADO=2 and mes=2 then 'MATR - 2DO.GRADO - '
        when @IDGRADO=3 and mes=2 then 'MATR - 3ER.GRADO - '
        when @IDGRADO=4 and mes=2 then 'MATR - 4TO.GRADO - '
        when @IDGRADO=5 and mes=2 then 'MATR - 5TO.GRADO - '
        when @IDGRADO=6 and mes=2 then 'MATR - 6TO.GRADO - '
        when @IDGRADO=7 and mes=2 then 'MATR - 7MO.GRADO - '
        when @IDGRADO=8 and mes=2 then 'MATR - OCT.GRADO - '
        when @IDGRADO=9 and mes=2 then 'MATR - NOV.GRADO - '
        when @IDGRADO=10 and mes=2 then 'MATR - DM.GRADO - '
        when @IDGRADO=11 and mes=2 then 'MATR - DM.I GRADO - '
        when @IDGRADO=12 and mes=2 then 'MATR - DM.GRADO BI - '
        when @IDGRADO=13 and mes=2 then 'MATR - DM.I GRADO BI - '
        
        when @IDGRADO=23 and mes!=2 then 'PENS - INICIAL 3 - ' 
        when @IDGRADO=24 and mes!=2 then 'PENS - INICIAL 4 - '
        when @IDGRADO=25 and mes!=2 then 'PENS - INICIAL 5 AÑOS - '
        when @IDGRADO=1 and mes!=2 then 'PENS - 1ER.GRADO - '
        when @IDGRADO=2 and mes!=2 then 'PENS - 2DO.GRADO - '
        when @IDGRADO=3 and mes!=2 then 'PENS - 3ER.GRADO - '
        when @IDGRADO=4 and mes!=2 then 'PENS - 4TO.GRADO - '
        when @IDGRADO=5 and mes!=2 then 'PENS - 5TO.GRADO - '
        when @IDGRADO=6 and mes!=2 then 'PENS - 6TO.GRADO - '
        when @IDGRADO=7 and mes!=2 then 'PENS - 7MO.GRADO - '
        when @IDGRADO=8 and mes!=2 then 'PENS - OCT.GRADO - '
        when @IDGRADO=9 and mes!=2 then 'PENS - NOV.GRADO - '
        when @IDGRADO=10 and mes!=2 then 'PENS - DM.GRADO - '
        when @IDGRADO=11 and mes!=2 then 'PENS - DM.I GRADO - '
        when @IDGRADO=12 and mes!=2 then 'PENS - DM.GRADO BI - '
        when @IDGRADO=13 and mes!=2 then 'PENS - DM.I GRADO BI - '
        end),''+ 
        convert(varchar(20),anio))
        
        from MT_DetDocIngreso d
        inner join MT_CtasxCobrar c on c.iddocingreso=d.iddocingreso 
        where  c.idEstudiante = #{idEstudiante}  and d.uniNeg=#{uniNeg} and c.anio=#{anio}
        and c.mes<![CDATA[ >= ]]>#{mesInicio} and c.mes<![CDATA[ <= ]]>#{mesFin} and c.idTipoStatusCtaCte!=19404
    </update>
    
    <sql id="consultaDescuentoTaller">
        select 
        uni.unineg as uniNeg,
        d.iddsctotaller as idDsctoTaller,
        d.cantidad as cantidad, 
        d.porcentaje as porcentaje,
        d.flgestudiante as flgEstudiante,
        d.flgexterno as flgExterno,
        d.anio as anio,
        d.status as status,
        tipo.idtipoconcepto as idTipoConcepto
        from mt_descuentotaller d
        inner join MO_UnidadNegocio uni on uni.unineg=d.unineg
        inner join MT_TipoConcepto tipo on tipo.idtipoconcepto=d.idtipoconcepto
        
    </sql>
    <resultMap id="descuentoResultado" type="pe.marista.sigma.bean.DescuentoTallerBean">
        <id property="idDsctoTaller" column="idDsctoTaller"/>
        <result property="cantidad" column="cantidad"/>
        <result property="porcentaje" column="porcentaje"/>
        <result property="flgEstudiante" column="flgEstudiante"/>
        <result property="flgExterno" column="flgExterno"/>
        <result property="anio" column="anio"/>
        <result property="status" column="status"/> 
        <association property="unidadNegocioBean" column="uniNeg"
                     javaType="pe.marista.sigma.bean.UnidadNegocioBean"
                     resultMap="unidadNegocioResultado"/> 
        <association property="tipoConceptoBean" column="idTipoConcepto"
                     javaType="pe.marista.sigma.bean.TipoConceptoBean"
                     resultMap="tipoConceptoResultado"/>  
    </resultMap>   
    <select id="obtenerDescuentosHabilitados" resultMap="descuentoResultado" parameterType="pe.marista.sigma.bean.DescuentoTallerBean">
        <include refid="consultaDescuentoTaller"/>
        Where uni.uniNeg = #{unidadNegocioBean.uniNeg} and status=1  and tipo.idtipoconcepto=#{tipoConceptoBean.idTipoConcepto}
    </select>
    <select id="obtenerTalleresWeb" resultMap="docIngresoResultado" parameterType="map" resultType="pe.marista.sigma.bean.DocIngresoBean" >
        declare @anio int =#{anio}
        declare @unineg varchar(6) =#{uniNeg}
        SELECT  
        concat(convert(varchar(4),serie),' - '+convert(varchar(20),d.nrodoc)) as serieNroDoc,
        discente as nombreDiscente,d.iddocingreso as idDocIngreso,
        convert(varchar(20),d.fechapago,103) as fechaPagoVista,
        d.flgimpresion,d.fechaimpresion,d.anio
        FROM MT_DocIngreso  d 
        inner join MX_Persona p on p.idpersona=d.iddiscente  
        WHERE  
        d.anio=@anio and d.unineg=@unineg 
        and iddocingreso in(select iddocingreso from MT_DetDocIngreso dd 
        inner join MX_Programacion pro on pro.idprogramacion=dd.idprogramacion) 
        <if test="nombre != null and nombre != '' " >
            and concat(
            REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(p.apepat,'á','a'),'é','e'),'í','i'),'ó','o'),'ú','u'),' ', 
            REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(p.apemat,'á','a'),'é','e'),'í','i'),'ó','o'),'ú','u'),' ', 
            REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(p.nombre,'á','a'),'é','e'),'í','i'),'ó','o'),'ú','u')) 
            like '%'+rtrim(ltrim(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(#{nombre},'á','a'),'é','e'),'í','i'),'ó','o'),'ú','u')))+'%'  
        </if> 
        <if test="serie != null and serie != '' " >
            and d.serie=#{serie}
        </if>  
        <if test="nroDoc != null and nroDoc != '' " >
            and d.nrodoc=#{nroDoc}
        </if>  
        <if test="flgRecImp != null " >
            <if test="flgRecImp == 1 " >
                and d.fechaimpresion is null
            </if>
            <if test="flgRecImp == 2 " >
                and d.fechaimpresion is not null
            </if>
        </if>      
        <!-- orden-->
        <if test="orden == 1" >
            order by p.apepat,p.apemat, p.nombre asc
        </if> 
        <if test="orden == 2" >
            order by d.fechapago 
        </if> 
        <if test="orden == 3" >
            order by d.fechapago desc
        </if> 
        <if test="orden == 4" >
            order by d.nrodoc
        </if>     
    </select>
</mapper>
